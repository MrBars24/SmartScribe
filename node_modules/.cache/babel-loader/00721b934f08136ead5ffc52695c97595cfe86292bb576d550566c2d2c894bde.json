{"ast":null,"code":"'use strict';require(\"core-js/modules/es.array.push.js\");require(\"core-js/modules/es.iterator.constructor.js\");require(\"core-js/modules/es.iterator.every.js\");require(\"core-js/modules/es.iterator.filter.js\");require(\"core-js/modules/es.iterator.find.js\");require(\"core-js/modules/es.iterator.for-each.js\");require(\"core-js/modules/es.iterator.map.js\");require(\"core-js/modules/es.iterator.some.js\");require(\"core-js/modules/es.set.difference.v2.js\");require(\"core-js/modules/es.set.intersection.v2.js\");require(\"core-js/modules/es.set.is-disjoint-from.v2.js\");require(\"core-js/modules/es.set.is-subset-of.v2.js\");require(\"core-js/modules/es.set.is-superset-of.v2.js\");require(\"core-js/modules/es.set.symmetric-difference.v2.js\");require(\"core-js/modules/es.set.union.v2.js\");Object.defineProperty(exports,'__esModule',{value:true});function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(-1!==e.indexOf(n))continue;t[n]=r[n];}return t;}class Position{constructor(line,col,index){this.line=void 0;this.column=void 0;this.index=void 0;this.line=line;this.column=col;this.index=index;}}class SourceLocation{constructor(start,end){this.start=void 0;this.end=void 0;this.filename=void 0;this.identifierName=void 0;this.start=start;this.end=end;}}function createPositionWithColumnOffset(position,columnOffset){const{line,column,index}=position;return new Position(line,column+columnOffset,index+columnOffset);}const code=\"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";var ModuleErrors={ImportMetaOutsideModule:{message:`import.meta may appear only with 'sourceType: \"module\"'`,code},ImportOutsideModule:{message:`'import' and 'export' may appear only with 'sourceType: \"module\"'`,code}};const NodeDescriptions={ArrayPattern:\"array destructuring pattern\",AssignmentExpression:\"assignment expression\",AssignmentPattern:\"assignment expression\",ArrowFunctionExpression:\"arrow function expression\",ConditionalExpression:\"conditional expression\",CatchClause:\"catch clause\",ForOfStatement:\"for-of statement\",ForInStatement:\"for-in statement\",ForStatement:\"for-loop\",FormalParameters:\"function parameter list\",Identifier:\"identifier\",ImportSpecifier:\"import specifier\",ImportDefaultSpecifier:\"import default specifier\",ImportNamespaceSpecifier:\"import namespace specifier\",ObjectPattern:\"object destructuring pattern\",ParenthesizedExpression:\"parenthesized expression\",RestElement:\"rest element\",UpdateExpression:{true:\"prefix operation\",false:\"postfix operation\"},VariableDeclarator:\"variable declaration\",YieldExpression:\"yield expression\"};const toNodeDescription=node=>node.type===\"UpdateExpression\"?NodeDescriptions.UpdateExpression[`${node.prefix}`]:NodeDescriptions[node.type];var StandardErrors={AccessorIsGenerator:({kind})=>`A ${kind}ter cannot be a generator.`,ArgumentsInClass:\"'arguments' is only allowed in functions and class methods.\",AsyncFunctionInSingleStatementContext:\"Async functions can only be declared at the top level or inside a block.\",AwaitBindingIdentifier:\"Can not use 'await' as identifier inside an async function.\",AwaitBindingIdentifierInStaticBlock:\"Can not use 'await' as identifier inside a static block.\",AwaitExpressionFormalParameter:\"'await' is not allowed in async function parameters.\",AwaitUsingNotInAsyncContext:\"'await using' is only allowed within async functions and at the top levels of modules.\",AwaitNotInAsyncContext:\"'await' is only allowed within async functions and at the top levels of modules.\",BadGetterArity:\"A 'get' accessor must not have any formal parameters.\",BadSetterArity:\"A 'set' accessor must have exactly one formal parameter.\",BadSetterRestParameter:\"A 'set' accessor function argument must not be a rest parameter.\",ConstructorClassField:\"Classes may not have a field named 'constructor'.\",ConstructorClassPrivateField:\"Classes may not have a private field named '#constructor'.\",ConstructorIsAccessor:\"Class constructor may not be an accessor.\",ConstructorIsAsync:\"Constructor can't be an async function.\",ConstructorIsGenerator:\"Constructor can't be a generator.\",DeclarationMissingInitializer:({kind})=>`Missing initializer in ${kind} declaration.`,DecoratorArgumentsOutsideParentheses:\"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",DecoratorBeforeExport:\"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",DecoratorsBeforeAfterExport:\"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",DecoratorConstructor:\"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",DecoratorExportClass:\"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",DecoratorSemicolon:\"Decorators must not be followed by a semicolon.\",DecoratorStaticBlock:\"Decorators can't be used with a static block.\",DeferImportRequiresNamespace:'Only `import defer * as x from \"./module\"` is valid.',DeletePrivateField:\"Deleting a private field is not allowed.\",DestructureNamedImport:\"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",DuplicateConstructor:\"Duplicate constructor in the same class.\",DuplicateDefaultExport:\"Only one default export allowed per module.\",DuplicateExport:({exportName})=>`\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,DuplicateProto:\"Redefinition of __proto__ property.\",DuplicateRegExpFlags:\"Duplicate regular expression flag.\",DynamicImportPhaseRequiresImportExpressions:({phase})=>`'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,ElementAfterRest:\"Rest element must be last element.\",EscapedCharNotAnIdentifier:\"Invalid Unicode escape.\",ExportBindingIsString:({localName,exportName})=>`A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,ExportDefaultFromAsIdentifier:\"'from' is not allowed as an identifier after 'export default'.\",ForInOfLoopInitializer:({type})=>`'${type===\"ForInStatement\"?\"for-in\":\"for-of\"}' loop variable declaration may not have an initializer.`,ForInUsing:\"For-in loop may not start with 'using' declaration.\",ForOfAsync:\"The left-hand side of a for-of loop may not be 'async'.\",ForOfLet:\"The left-hand side of a for-of loop may not start with 'let'.\",GeneratorInSingleStatementContext:\"Generators can only be declared at the top level or inside a block.\",IllegalBreakContinue:({type})=>`Unsyntactic ${type===\"BreakStatement\"?\"break\":\"continue\"}.`,IllegalLanguageModeDirective:\"Illegal 'use strict' directive in function with non-simple parameter list.\",IllegalReturn:\"'return' outside of function.\",ImportAttributesUseAssert:\"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",ImportBindingIsString:({importName})=>`A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,ImportCallArity:`\\`import()\\` requires exactly one or two arguments.`,ImportCallNotNewExpression:\"Cannot use new with import(...).\",ImportCallSpreadArgument:\"`...` is not allowed in `import()`.\",ImportJSONBindingNotDefault:\"A JSON module can only be imported with `default`.\",ImportReflectionHasAssertion:\"`import module x` cannot have assertions.\",ImportReflectionNotBinding:'Only `import module x from \"./module\"` is valid.',IncompatibleRegExpUVFlags:\"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",InvalidBigIntLiteral:\"Invalid BigIntLiteral.\",InvalidCodePoint:\"Code point out of bounds.\",InvalidCoverInitializedName:\"Invalid shorthand property initializer.\",InvalidDecimal:\"Invalid decimal.\",InvalidDigit:({radix})=>`Expected number in radix ${radix}.`,InvalidEscapeSequence:\"Bad character escape sequence.\",InvalidEscapeSequenceTemplate:\"Invalid escape sequence in template.\",InvalidEscapedReservedWord:({reservedWord})=>`Escape sequence in keyword ${reservedWord}.`,InvalidIdentifier:({identifierName})=>`Invalid identifier ${identifierName}.`,InvalidLhs:({ancestor})=>`Invalid left-hand side in ${toNodeDescription(ancestor)}.`,InvalidLhsBinding:({ancestor})=>`Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,InvalidLhsOptionalChaining:({ancestor})=>`Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,InvalidNumber:\"Invalid number.\",InvalidOrMissingExponent:\"Floating-point numbers require a valid exponent after the 'e'.\",InvalidOrUnexpectedToken:({unexpected})=>`Unexpected character '${unexpected}'.`,InvalidParenthesizedAssignment:\"Invalid parenthesized assignment pattern.\",InvalidPrivateFieldResolution:({identifierName})=>`Private name #${identifierName} is not defined.`,InvalidPropertyBindingPattern:\"Binding member expression.\",InvalidRecordProperty:\"Only properties and spread elements are allowed in record definitions.\",InvalidRestAssignmentPattern:\"Invalid rest operator's argument.\",LabelRedeclaration:({labelName})=>`Label '${labelName}' is already declared.`,LetInLexicalBinding:\"'let' is disallowed as a lexically bound name.\",LineTerminatorBeforeArrow:\"No line break is allowed before '=>'.\",MalformedRegExpFlags:\"Invalid regular expression flag.\",MissingClassName:\"A class name is required.\",MissingEqInAssignment:\"Only '=' operator can be used for specifying default value.\",MissingSemicolon:\"Missing semicolon.\",MissingPlugin:({missingPlugin})=>`This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name=>JSON.stringify(name)).join(\", \")}.`,MissingOneOfPlugins:({missingPlugin})=>`This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name=>JSON.stringify(name)).join(\", \")}.`,MissingUnicodeEscape:\"Expecting Unicode escape sequence \\\\uXXXX.\",MixingCoalesceWithLogical:\"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",ModuleAttributeDifferentFromType:\"The only accepted module attribute is `type`.\",ModuleAttributeInvalidValue:\"Only string literals are allowed as module attribute values.\",ModuleAttributesWithDuplicateKeys:({key})=>`Duplicate key \"${key}\" is not allowed in module attributes.`,ModuleExportNameHasLoneSurrogate:({surrogateCharCode})=>`An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`,ModuleExportUndefined:({localName})=>`Export '${localName}' is not defined.`,MultipleDefaultsInSwitch:\"Multiple default clauses.\",NewlineAfterThrow:\"Illegal newline after throw.\",NoCatchOrFinally:\"Missing catch or finally clause.\",NumberIdentifier:\"Identifier directly after number.\",NumericSeparatorInEscapeSequence:\"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",ObsoleteAwaitStar:\"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",OptionalChainingNoNew:\"Constructors in/after an Optional Chain are not allowed.\",OptionalChainingNoTemplate:\"Tagged Template Literals are not allowed in optionalChain.\",OverrideOnConstructor:\"'override' modifier cannot appear on a constructor declaration.\",ParamDupe:\"Argument name clash.\",PatternHasAccessor:\"Object pattern can't contain getter or setter.\",PatternHasMethod:\"Object pattern can't contain methods.\",PrivateInExpectedIn:({identifierName})=>`Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,PrivateNameRedeclaration:({identifierName})=>`Duplicate private name #${identifierName}.`,RecordExpressionBarIncorrectEndSyntaxType:\"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",RecordExpressionBarIncorrectStartSyntaxType:\"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",RecordExpressionHashIncorrectStartSyntaxType:\"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",RecordNoProto:\"'__proto__' is not allowed in Record expressions.\",RestTrailingComma:\"Unexpected trailing comma after rest element.\",SloppyFunction:\"In non-strict mode code, functions can only be declared at top level or inside a block.\",SloppyFunctionAnnexB:\"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",SourcePhaseImportRequiresDefault:'Only `import source x from \"./module\"` is valid.',StaticPrototype:\"Classes may not have static property named prototype.\",SuperNotAllowed:\"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",SuperPrivateField:\"Private fields can't be accessed on super.\",TrailingDecorator:\"Decorators must be attached to a class element.\",TupleExpressionBarIncorrectEndSyntaxType:\"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",TupleExpressionBarIncorrectStartSyntaxType:\"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",TupleExpressionHashIncorrectStartSyntaxType:\"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",UnexpectedArgumentPlaceholder:\"Unexpected argument placeholder.\",UnexpectedAwaitAfterPipelineBody:'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',UnexpectedDigitAfterHash:\"Unexpected digit after hash token.\",UnexpectedImportExport:\"'import' and 'export' may only appear at the top level.\",UnexpectedKeyword:({keyword})=>`Unexpected keyword '${keyword}'.`,UnexpectedLeadingDecorator:\"Leading decorators must be attached to a class declaration.\",UnexpectedLexicalDeclaration:\"Lexical declaration cannot appear in a single-statement context.\",UnexpectedNewTarget:\"`new.target` can only be used in functions or class properties.\",UnexpectedNumericSeparator:\"A numeric separator is only allowed between two digits.\",UnexpectedPrivateField:\"Unexpected private name.\",UnexpectedReservedWord:({reservedWord})=>`Unexpected reserved word '${reservedWord}'.`,UnexpectedSuper:\"'super' is only allowed in object methods and classes.\",UnexpectedToken:({expected,unexpected})=>`Unexpected token${unexpected?` '${unexpected}'.`:\"\"}${expected?`, expected \"${expected}\"`:\"\"}`,UnexpectedTokenUnaryExponentiation:\"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",UnexpectedUsingDeclaration:\"Using declaration cannot appear in the top level when source type is `script`.\",UnsupportedBind:\"Binding should be performed on object property.\",UnsupportedDecoratorExport:\"A decorated export must export a class declaration.\",UnsupportedDefaultExport:\"Only expressions, functions or classes are allowed as the `default` export.\",UnsupportedImport:\"`import` can only be used in `import()` or `import.meta`.\",UnsupportedMetaProperty:({target,onlyValidPropertyName})=>`The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,UnsupportedParameterDecorator:\"Decorators cannot be used to decorate parameters.\",UnsupportedPropertyDecorator:\"Decorators cannot be used to decorate object literal properties.\",UnsupportedSuper:\"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",UnterminatedComment:\"Unterminated comment.\",UnterminatedRegExp:\"Unterminated regular expression.\",UnterminatedString:\"Unterminated string constant.\",UnterminatedTemplate:\"Unterminated template.\",UsingDeclarationExport:\"Using declaration cannot be exported.\",UsingDeclarationHasBindingPattern:\"Using declaration cannot have destructuring patterns.\",VarRedeclaration:({identifierName})=>`Identifier '${identifierName}' has already been declared.`,YieldBindingIdentifier:\"Can not use 'yield' as identifier inside a generator.\",YieldInParameter:\"Yield expression is not allowed in formal parameters.\",YieldNotInGeneratorFunction:\"'yield' is only allowed within generator functions.\",ZeroDigitNumericSeparator:\"Numeric separator can not be used after leading 0.\"};var StrictModeErrors={StrictDelete:\"Deleting local variable in strict mode.\",StrictEvalArguments:({referenceName})=>`Assigning to '${referenceName}' in strict mode.`,StrictEvalArgumentsBinding:({bindingName})=>`Binding '${bindingName}' in strict mode.`,StrictFunction:\"In strict mode code, functions can only be declared at top level or inside a block.\",StrictNumericEscape:\"The only valid numeric escape in strict mode is '\\\\0'.\",StrictOctalLiteral:\"Legacy octal literals are not allowed in strict mode.\",StrictWith:\"'with' in strict mode.\"};const UnparenthesizedPipeBodyDescriptions=new Set([\"ArrowFunctionExpression\",\"AssignmentExpression\",\"ConditionalExpression\",\"YieldExpression\"]);var PipelineOperatorErrors=Object.assign({PipeBodyIsTighter:\"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",PipeTopicRequiresHackPipes:'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',PipeTopicUnbound:\"Topic reference is unbound; it must be inside a pipe body.\",PipeTopicUnconfiguredToken:({token})=>`Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,PipeTopicUnused:\"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",PipeUnparenthesizedBody:({type})=>`Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({type})}; please wrap it in parentheses.`},{PipelineBodyNoArrow:'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',PipelineBodySequenceExpression:\"Pipeline body may not be a comma-separated sequence expression.\",PipelineHeadSequenceExpression:\"Pipeline head should not be a comma-separated sequence expression.\",PipelineTopicUnused:\"Pipeline is in topic style but does not use topic reference.\",PrimaryTopicNotAllowed:\"Topic reference was used in a lexical context without topic binding.\",PrimaryTopicRequiresSmartPipeline:'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'});const _excluded=[\"message\"];function defineHidden(obj,key,value){Object.defineProperty(obj,key,{enumerable:false,configurable:true,value});}function toParseErrorConstructor({toMessage,code,reasonCode,syntaxPlugin}){const hasMissingPlugin=reasonCode===\"MissingPlugin\"||reasonCode===\"MissingOneOfPlugins\";{const oldReasonCodes={AccessorCannotDeclareThisParameter:\"AccesorCannotDeclareThisParameter\",AccessorCannotHaveTypeParameters:\"AccesorCannotHaveTypeParameters\",ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",SetAccessorCannotHaveOptionalParameter:\"SetAccesorCannotHaveOptionalParameter\",SetAccessorCannotHaveRestParameter:\"SetAccesorCannotHaveRestParameter\",SetAccessorCannotHaveReturnType:\"SetAccesorCannotHaveReturnType\"};if(oldReasonCodes[reasonCode]){reasonCode=oldReasonCodes[reasonCode];}}return function constructor(loc,details){const error=new SyntaxError();error.code=code;error.reasonCode=reasonCode;error.loc=loc;error.pos=loc.index;error.syntaxPlugin=syntaxPlugin;if(hasMissingPlugin){error.missingPlugin=details.missingPlugin;}defineHidden(error,\"clone\",function clone(overrides={}){var _overrides$loc;const{line,column,index}=(_overrides$loc=overrides.loc)!=null?_overrides$loc:loc;return constructor(new Position(line,column,index),Object.assign({},details,overrides.details));});defineHidden(error,\"details\",details);Object.defineProperty(error,\"message\",{configurable:true,get(){const message=`${toMessage(details)} (${loc.line}:${loc.column})`;this.message=message;return message;},set(value){Object.defineProperty(this,\"message\",{value,writable:true});}});return error;};}function ParseErrorEnum(argument,syntaxPlugin){if(Array.isArray(argument)){return parseErrorTemplates=>ParseErrorEnum(parseErrorTemplates,argument[0]);}const ParseErrorConstructors={};for(const reasonCode of Object.keys(argument)){const template=argument[reasonCode];const _ref=typeof template===\"string\"?{message:()=>template}:typeof template===\"function\"?{message:template}:template,{message}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const toMessage=typeof message===\"string\"?()=>message:message;ParseErrorConstructors[reasonCode]=toParseErrorConstructor(Object.assign({code:\"BABEL_PARSER_SYNTAX_ERROR\",reasonCode,toMessage},syntaxPlugin?{syntaxPlugin}:{},rest));}return ParseErrorConstructors;}const Errors=Object.assign({},ParseErrorEnum(ModuleErrors),ParseErrorEnum(StandardErrors),ParseErrorEnum(StrictModeErrors),ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));function createDefaultOptions(){return{sourceType:\"script\",sourceFilename:undefined,startIndex:0,startColumn:0,startLine:1,allowAwaitOutsideFunction:false,allowReturnOutsideFunction:false,allowNewTargetOutsideFunction:false,allowImportExportEverywhere:false,allowSuperOutsideMethod:false,allowUndeclaredExports:false,allowYieldOutsideFunction:false,plugins:[],strictMode:null,ranges:false,tokens:false,createImportExpressions:false,createParenthesizedExpressions:false,errorRecovery:false,attachComment:true,annexB:true};}function getOptions(opts){const options=createDefaultOptions();if(opts==null){return options;}if(opts.annexB!=null&&opts.annexB!==false){throw new Error(\"The `annexB` option can only be set to `false`.\");}for(const key of Object.keys(options)){if(opts[key]!=null)options[key]=opts[key];}if(options.startLine===1){if(opts.startIndex==null&&options.startColumn>0){options.startIndex=options.startColumn;}else if(opts.startColumn==null&&options.startIndex>0){options.startColumn=options.startIndex;}}else if(opts.startColumn==null||opts.startIndex==null){if(opts.startIndex!=null){throw new Error(\"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\");}}return options;}const{defineProperty}=Object;const toUnenumerable=(object,key)=>{if(object){defineProperty(object,key,{enumerable:false,value:object[key]});}};function toESTreeLocation(node){toUnenumerable(node.loc.start,\"index\");toUnenumerable(node.loc.end,\"index\");return node;}var estree=superClass=>class ESTreeParserMixin extends superClass{parse(){const file=toESTreeLocation(super.parse());if(this.optionFlags&256){file.tokens=file.tokens.map(toESTreeLocation);}return file;}parseRegExpLiteral({pattern,flags}){let regex=null;try{regex=new RegExp(pattern,flags);}catch(_){}const node=this.estreeParseLiteral(regex);node.regex={pattern,flags};return node;}parseBigIntLiteral(value){let bigInt;try{bigInt=BigInt(value);}catch(_unused){bigInt=null;}const node=this.estreeParseLiteral(bigInt);node.bigint=String(node.value||value);return node;}parseDecimalLiteral(value){const decimal=null;const node=this.estreeParseLiteral(decimal);node.decimal=String(node.value||value);return node;}estreeParseLiteral(value){return this.parseLiteral(value,\"Literal\");}parseStringLiteral(value){return this.estreeParseLiteral(value);}parseNumericLiteral(value){return this.estreeParseLiteral(value);}parseNullLiteral(){return this.estreeParseLiteral(null);}parseBooleanLiteral(value){return this.estreeParseLiteral(value);}estreeParseChainExpression(node,endLoc){const chain=this.startNodeAtNode(node);chain.expression=node;return this.finishNodeAt(chain,\"ChainExpression\",endLoc);}directiveToStmt(directive){const expression=directive.value;delete directive.value;this.castNodeTo(expression,\"Literal\");expression.raw=expression.extra.raw;expression.value=expression.extra.expressionValue;const stmt=this.castNodeTo(directive,\"ExpressionStatement\");stmt.expression=expression;stmt.directive=expression.extra.rawValue;delete expression.extra;return stmt;}fillOptionalPropertiesForTSESLint(node){}cloneEstreeStringLiteral(node){const{start,end,loc,range,raw,value}=node;const cloned=Object.create(node.constructor.prototype);cloned.type=\"Literal\";cloned.start=start;cloned.end=end;cloned.loc=loc;cloned.range=range;cloned.raw=raw;cloned.value=value;return cloned;}initFunction(node,isAsync){super.initFunction(node,isAsync);node.expression=false;}checkDeclaration(node){if(node!=null&&this.isObjectProperty(node)){this.checkDeclaration(node.value);}else{super.checkDeclaration(node);}}getObjectOrClassMethodParams(method){return method.value.params;}isValidDirective(stmt){var _stmt$expression$extr;return stmt.type===\"ExpressionStatement\"&&stmt.expression.type===\"Literal\"&&typeof stmt.expression.value===\"string\"&&!((_stmt$expression$extr=stmt.expression.extra)!=null&&_stmt$expression$extr.parenthesized);}parseBlockBody(node,allowDirectives,topLevel,end,afterBlockParse){super.parseBlockBody(node,allowDirectives,topLevel,end,afterBlockParse);const directiveStatements=node.directives.map(d=>this.directiveToStmt(d));node.body=directiveStatements.concat(node.body);delete node.directives;}parsePrivateName(){const node=super.parsePrivateName();{if(!this.getPluginOption(\"estree\",\"classFeatures\")){return node;}}return this.convertPrivateNameToPrivateIdentifier(node);}convertPrivateNameToPrivateIdentifier(node){const name=super.getPrivateNameSV(node);node=node;delete node.id;node.name=name;return this.castNodeTo(node,\"PrivateIdentifier\");}isPrivateName(node){{if(!this.getPluginOption(\"estree\",\"classFeatures\")){return super.isPrivateName(node);}}return node.type===\"PrivateIdentifier\";}getPrivateNameSV(node){{if(!this.getPluginOption(\"estree\",\"classFeatures\")){return super.getPrivateNameSV(node);}}return node.name;}parseLiteral(value,type){const node=super.parseLiteral(value,type);node.raw=node.extra.raw;delete node.extra;return node;}parseFunctionBody(node,allowExpression,isMethod=false){super.parseFunctionBody(node,allowExpression,isMethod);node.expression=node.body.type!==\"BlockStatement\";}parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope=false){let funcNode=this.startNode();funcNode.kind=node.kind;funcNode=super.parseMethod(funcNode,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope);delete funcNode.kind;const{typeParameters}=node;if(typeParameters){delete node.typeParameters;funcNode.typeParameters=typeParameters;this.resetStartLocationFromNode(funcNode,typeParameters);}const valueNode=this.castNodeTo(funcNode,\"FunctionExpression\");node.value=valueNode;if(type===\"ClassPrivateMethod\"){node.computed=false;}if(type===\"ObjectMethod\"){if(node.kind===\"method\"){node.kind=\"init\";}node.shorthand=false;return this.finishNode(node,\"Property\");}else{return this.finishNode(node,\"MethodDefinition\");}}nameIsConstructor(key){if(key.type===\"Literal\")return key.value===\"constructor\";return super.nameIsConstructor(key);}parseClassProperty(...args){const propertyNode=super.parseClassProperty(...args);{if(!this.getPluginOption(\"estree\",\"classFeatures\")){return propertyNode;}}{this.castNodeTo(propertyNode,\"PropertyDefinition\");}return propertyNode;}parseClassPrivateProperty(...args){const propertyNode=super.parseClassPrivateProperty(...args);{if(!this.getPluginOption(\"estree\",\"classFeatures\")){return propertyNode;}}{this.castNodeTo(propertyNode,\"PropertyDefinition\");}propertyNode.computed=false;return propertyNode;}parseClassAccessorProperty(node){const accessorPropertyNode=super.parseClassAccessorProperty(node);{if(!this.getPluginOption(\"estree\",\"classFeatures\")){return accessorPropertyNode;}}if(accessorPropertyNode.abstract&&this.hasPlugin(\"typescript\")){delete accessorPropertyNode.abstract;this.castNodeTo(accessorPropertyNode,\"TSAbstractAccessorProperty\");}else{this.castNodeTo(accessorPropertyNode,\"AccessorProperty\");}return accessorPropertyNode;}parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors){const node=super.parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors);if(node){node.kind=\"init\";this.castNodeTo(node,\"Property\");}return node;}finishObjectProperty(node){node.kind=\"init\";return this.finishNode(node,\"Property\");}isValidLVal(type,isUnparenthesizedInAssign,binding){return type===\"Property\"?\"value\":super.isValidLVal(type,isUnparenthesizedInAssign,binding);}isAssignable(node,isBinding){if(node!=null&&this.isObjectProperty(node)){return this.isAssignable(node.value,isBinding);}return super.isAssignable(node,isBinding);}toAssignable(node,isLHS=false){if(node!=null&&this.isObjectProperty(node)){const{key,value}=node;if(this.isPrivateName(key)){this.classScope.usePrivateName(this.getPrivateNameSV(key),key.loc.start);}this.toAssignable(value,isLHS);}else{super.toAssignable(node,isLHS);}}toAssignableObjectExpressionProp(prop,isLast,isLHS){if(prop.type===\"Property\"&&(prop.kind===\"get\"||prop.kind===\"set\")){this.raise(Errors.PatternHasAccessor,prop.key);}else if(prop.type===\"Property\"&&prop.method){this.raise(Errors.PatternHasMethod,prop.key);}else{super.toAssignableObjectExpressionProp(prop,isLast,isLHS);}}finishCallExpression(unfinished,optional){const node=super.finishCallExpression(unfinished,optional);if(node.callee.type===\"Import\"){var _ref,_ref2;this.castNodeTo(node,\"ImportExpression\");node.source=node.arguments[0];node.options=(_ref=node.arguments[1])!=null?_ref:null;node.attributes=(_ref2=node.arguments[1])!=null?_ref2:null;delete node.arguments;delete node.callee;}else if(node.type===\"OptionalCallExpression\"){this.castNodeTo(node,\"CallExpression\");}else{node.optional=false;}return node;}toReferencedArguments(node){if(node.type===\"ImportExpression\"){return;}super.toReferencedArguments(node);}parseExport(unfinished,decorators){const exportStartLoc=this.state.lastTokStartLoc;const node=super.parseExport(unfinished,decorators);switch(node.type){case\"ExportAllDeclaration\":node.exported=null;break;case\"ExportNamedDeclaration\":if(node.specifiers.length===1&&node.specifiers[0].type===\"ExportNamespaceSpecifier\"){this.castNodeTo(node,\"ExportAllDeclaration\");node.exported=node.specifiers[0].exported;delete node.specifiers;}case\"ExportDefaultDeclaration\":{var _declaration$decorato;const{declaration}=node;if((declaration==null?void 0:declaration.type)===\"ClassDeclaration\"&&((_declaration$decorato=declaration.decorators)==null?void 0:_declaration$decorato.length)>0&&declaration.start===node.start){this.resetStartLocation(node,exportStartLoc);}}break;}return node;}stopParseSubscript(base,state){const node=super.stopParseSubscript(base,state);if(state.optionalChainMember){return this.estreeParseChainExpression(node,base.loc.end);}return node;}parseMember(base,startLoc,state,computed,optional){const node=super.parseMember(base,startLoc,state,computed,optional);if(node.type===\"OptionalMemberExpression\"){this.castNodeTo(node,\"MemberExpression\");}else{node.optional=false;}return node;}isOptionalMemberExpression(node){if(node.type===\"ChainExpression\"){return node.expression.type===\"MemberExpression\";}return super.isOptionalMemberExpression(node);}hasPropertyAsPrivateName(node){if(node.type===\"ChainExpression\"){node=node.expression;}return super.hasPropertyAsPrivateName(node);}isObjectProperty(node){return node.type===\"Property\"&&node.kind===\"init\"&&!node.method;}isObjectMethod(node){return node.type===\"Property\"&&(node.method||node.kind===\"get\"||node.kind===\"set\");}castNodeTo(node,type){const result=super.castNodeTo(node,type);this.fillOptionalPropertiesForTSESLint(result);return result;}cloneIdentifier(node){const cloned=super.cloneIdentifier(node);this.fillOptionalPropertiesForTSESLint(cloned);return cloned;}cloneStringLiteral(node){if(node.type===\"Literal\"){return this.cloneEstreeStringLiteral(node);}return super.cloneStringLiteral(node);}finishNodeAt(node,type,endLoc){return toESTreeLocation(super.finishNodeAt(node,type,endLoc));}finishNode(node,type){const result=super.finishNode(node,type);this.fillOptionalPropertiesForTSESLint(result);return result;}resetStartLocation(node,startLoc){super.resetStartLocation(node,startLoc);toESTreeLocation(node);}resetEndLocation(node,endLoc=this.state.lastTokEndLoc){super.resetEndLocation(node,endLoc);toESTreeLocation(node);}};class TokContext{constructor(token,preserveSpace){this.token=void 0;this.preserveSpace=void 0;this.token=token;this.preserveSpace=!!preserveSpace;}}const types={brace:new TokContext(\"{\"),j_oTag:new TokContext(\"<tag\"),j_cTag:new TokContext(\"</tag\"),j_expr:new TokContext(\"<tag>...</tag>\",true)};{types.template=new TokContext(\"`\",true);}const beforeExpr=true;const startsExpr=true;const isLoop=true;const isAssign=true;const prefix=true;const postfix=true;class ExportedTokenType{constructor(label,conf={}){this.label=void 0;this.keyword=void 0;this.beforeExpr=void 0;this.startsExpr=void 0;this.rightAssociative=void 0;this.isLoop=void 0;this.isAssign=void 0;this.prefix=void 0;this.postfix=void 0;this.binop=void 0;this.label=label;this.keyword=conf.keyword;this.beforeExpr=!!conf.beforeExpr;this.startsExpr=!!conf.startsExpr;this.rightAssociative=!!conf.rightAssociative;this.isLoop=!!conf.isLoop;this.isAssign=!!conf.isAssign;this.prefix=!!conf.prefix;this.postfix=!!conf.postfix;this.binop=conf.binop!=null?conf.binop:null;{this.updateContext=null;}}}const keywords$1=new Map();function createKeyword(name,options={}){options.keyword=name;const token=createToken(name,options);keywords$1.set(name,token);return token;}function createBinop(name,binop){return createToken(name,{beforeExpr,binop});}let tokenTypeCounter=-1;const tokenTypes=[];const tokenLabels=[];const tokenBinops=[];const tokenBeforeExprs=[];const tokenStartsExprs=[];const tokenPrefixes=[];function createToken(name,options={}){var _options$binop,_options$beforeExpr,_options$startsExpr,_options$prefix;++tokenTypeCounter;tokenLabels.push(name);tokenBinops.push((_options$binop=options.binop)!=null?_options$binop:-1);tokenBeforeExprs.push((_options$beforeExpr=options.beforeExpr)!=null?_options$beforeExpr:false);tokenStartsExprs.push((_options$startsExpr=options.startsExpr)!=null?_options$startsExpr:false);tokenPrefixes.push((_options$prefix=options.prefix)!=null?_options$prefix:false);tokenTypes.push(new ExportedTokenType(name,options));return tokenTypeCounter;}function createKeywordLike(name,options={}){var _options$binop2,_options$beforeExpr2,_options$startsExpr2,_options$prefix2;++tokenTypeCounter;keywords$1.set(name,tokenTypeCounter);tokenLabels.push(name);tokenBinops.push((_options$binop2=options.binop)!=null?_options$binop2:-1);tokenBeforeExprs.push((_options$beforeExpr2=options.beforeExpr)!=null?_options$beforeExpr2:false);tokenStartsExprs.push((_options$startsExpr2=options.startsExpr)!=null?_options$startsExpr2:false);tokenPrefixes.push((_options$prefix2=options.prefix)!=null?_options$prefix2:false);tokenTypes.push(new ExportedTokenType(\"name\",options));return tokenTypeCounter;}const tt={bracketL:createToken(\"[\",{beforeExpr,startsExpr}),bracketHashL:createToken(\"#[\",{beforeExpr,startsExpr}),bracketBarL:createToken(\"[|\",{beforeExpr,startsExpr}),bracketR:createToken(\"]\"),bracketBarR:createToken(\"|]\"),braceL:createToken(\"{\",{beforeExpr,startsExpr}),braceBarL:createToken(\"{|\",{beforeExpr,startsExpr}),braceHashL:createToken(\"#{\",{beforeExpr,startsExpr}),braceR:createToken(\"}\"),braceBarR:createToken(\"|}\"),parenL:createToken(\"(\",{beforeExpr,startsExpr}),parenR:createToken(\")\"),comma:createToken(\",\",{beforeExpr}),semi:createToken(\";\",{beforeExpr}),colon:createToken(\":\",{beforeExpr}),doubleColon:createToken(\"::\",{beforeExpr}),dot:createToken(\".\"),question:createToken(\"?\",{beforeExpr}),questionDot:createToken(\"?.\"),arrow:createToken(\"=>\",{beforeExpr}),template:createToken(\"template\"),ellipsis:createToken(\"...\",{beforeExpr}),backQuote:createToken(\"`\",{startsExpr}),dollarBraceL:createToken(\"${\",{beforeExpr,startsExpr}),templateTail:createToken(\"...`\",{startsExpr}),templateNonTail:createToken(\"...${\",{beforeExpr,startsExpr}),at:createToken(\"@\"),hash:createToken(\"#\",{startsExpr}),interpreterDirective:createToken(\"#!...\"),eq:createToken(\"=\",{beforeExpr,isAssign}),assign:createToken(\"_=\",{beforeExpr,isAssign}),slashAssign:createToken(\"_=\",{beforeExpr,isAssign}),xorAssign:createToken(\"_=\",{beforeExpr,isAssign}),moduloAssign:createToken(\"_=\",{beforeExpr,isAssign}),incDec:createToken(\"++/--\",{prefix,postfix,startsExpr}),bang:createToken(\"!\",{beforeExpr,prefix,startsExpr}),tilde:createToken(\"~\",{beforeExpr,prefix,startsExpr}),doubleCaret:createToken(\"^^\",{startsExpr}),doubleAt:createToken(\"@@\",{startsExpr}),pipeline:createBinop(\"|>\",0),nullishCoalescing:createBinop(\"??\",1),logicalOR:createBinop(\"||\",1),logicalAND:createBinop(\"&&\",2),bitwiseOR:createBinop(\"|\",3),bitwiseXOR:createBinop(\"^\",4),bitwiseAND:createBinop(\"&\",5),equality:createBinop(\"==/!=/===/!==\",6),lt:createBinop(\"</>/<=/>=\",7),gt:createBinop(\"</>/<=/>=\",7),relational:createBinop(\"</>/<=/>=\",7),bitShift:createBinop(\"<</>>/>>>\",8),bitShiftL:createBinop(\"<</>>/>>>\",8),bitShiftR:createBinop(\"<</>>/>>>\",8),plusMin:createToken(\"+/-\",{beforeExpr,binop:9,prefix,startsExpr}),modulo:createToken(\"%\",{binop:10,startsExpr}),star:createToken(\"*\",{binop:10}),slash:createBinop(\"/\",10),exponent:createToken(\"**\",{beforeExpr,binop:11,rightAssociative:true}),_in:createKeyword(\"in\",{beforeExpr,binop:7}),_instanceof:createKeyword(\"instanceof\",{beforeExpr,binop:7}),_break:createKeyword(\"break\"),_case:createKeyword(\"case\",{beforeExpr}),_catch:createKeyword(\"catch\"),_continue:createKeyword(\"continue\"),_debugger:createKeyword(\"debugger\"),_default:createKeyword(\"default\",{beforeExpr}),_else:createKeyword(\"else\",{beforeExpr}),_finally:createKeyword(\"finally\"),_function:createKeyword(\"function\",{startsExpr}),_if:createKeyword(\"if\"),_return:createKeyword(\"return\",{beforeExpr}),_switch:createKeyword(\"switch\"),_throw:createKeyword(\"throw\",{beforeExpr,prefix,startsExpr}),_try:createKeyword(\"try\"),_var:createKeyword(\"var\"),_const:createKeyword(\"const\"),_with:createKeyword(\"with\"),_new:createKeyword(\"new\",{beforeExpr,startsExpr}),_this:createKeyword(\"this\",{startsExpr}),_super:createKeyword(\"super\",{startsExpr}),_class:createKeyword(\"class\",{startsExpr}),_extends:createKeyword(\"extends\",{beforeExpr}),_export:createKeyword(\"export\"),_import:createKeyword(\"import\",{startsExpr}),_null:createKeyword(\"null\",{startsExpr}),_true:createKeyword(\"true\",{startsExpr}),_false:createKeyword(\"false\",{startsExpr}),_typeof:createKeyword(\"typeof\",{beforeExpr,prefix,startsExpr}),_void:createKeyword(\"void\",{beforeExpr,prefix,startsExpr}),_delete:createKeyword(\"delete\",{beforeExpr,prefix,startsExpr}),_do:createKeyword(\"do\",{isLoop,beforeExpr}),_for:createKeyword(\"for\",{isLoop}),_while:createKeyword(\"while\",{isLoop}),_as:createKeywordLike(\"as\",{startsExpr}),_assert:createKeywordLike(\"assert\",{startsExpr}),_async:createKeywordLike(\"async\",{startsExpr}),_await:createKeywordLike(\"await\",{startsExpr}),_defer:createKeywordLike(\"defer\",{startsExpr}),_from:createKeywordLike(\"from\",{startsExpr}),_get:createKeywordLike(\"get\",{startsExpr}),_let:createKeywordLike(\"let\",{startsExpr}),_meta:createKeywordLike(\"meta\",{startsExpr}),_of:createKeywordLike(\"of\",{startsExpr}),_sent:createKeywordLike(\"sent\",{startsExpr}),_set:createKeywordLike(\"set\",{startsExpr}),_source:createKeywordLike(\"source\",{startsExpr}),_static:createKeywordLike(\"static\",{startsExpr}),_using:createKeywordLike(\"using\",{startsExpr}),_yield:createKeywordLike(\"yield\",{startsExpr}),_asserts:createKeywordLike(\"asserts\",{startsExpr}),_checks:createKeywordLike(\"checks\",{startsExpr}),_exports:createKeywordLike(\"exports\",{startsExpr}),_global:createKeywordLike(\"global\",{startsExpr}),_implements:createKeywordLike(\"implements\",{startsExpr}),_intrinsic:createKeywordLike(\"intrinsic\",{startsExpr}),_infer:createKeywordLike(\"infer\",{startsExpr}),_is:createKeywordLike(\"is\",{startsExpr}),_mixins:createKeywordLike(\"mixins\",{startsExpr}),_proto:createKeywordLike(\"proto\",{startsExpr}),_require:createKeywordLike(\"require\",{startsExpr}),_satisfies:createKeywordLike(\"satisfies\",{startsExpr}),_keyof:createKeywordLike(\"keyof\",{startsExpr}),_readonly:createKeywordLike(\"readonly\",{startsExpr}),_unique:createKeywordLike(\"unique\",{startsExpr}),_abstract:createKeywordLike(\"abstract\",{startsExpr}),_declare:createKeywordLike(\"declare\",{startsExpr}),_enum:createKeywordLike(\"enum\",{startsExpr}),_module:createKeywordLike(\"module\",{startsExpr}),_namespace:createKeywordLike(\"namespace\",{startsExpr}),_interface:createKeywordLike(\"interface\",{startsExpr}),_type:createKeywordLike(\"type\",{startsExpr}),_opaque:createKeywordLike(\"opaque\",{startsExpr}),name:createToken(\"name\",{startsExpr}),placeholder:createToken(\"%%\",{startsExpr:true}),string:createToken(\"string\",{startsExpr}),num:createToken(\"num\",{startsExpr}),bigint:createToken(\"bigint\",{startsExpr}),decimal:createToken(\"decimal\",{startsExpr}),regexp:createToken(\"regexp\",{startsExpr}),privateName:createToken(\"#name\",{startsExpr}),eof:createToken(\"eof\"),jsxName:createToken(\"jsxName\"),jsxText:createToken(\"jsxText\",{beforeExpr:true}),jsxTagStart:createToken(\"jsxTagStart\",{startsExpr:true}),jsxTagEnd:createToken(\"jsxTagEnd\")};function tokenIsIdentifier(token){return token>=93&&token<=133;}function tokenKeywordOrIdentifierIsKeyword(token){return token<=92;}function tokenIsKeywordOrIdentifier(token){return token>=58&&token<=133;}function tokenIsLiteralPropertyName(token){return token>=58&&token<=137;}function tokenComesBeforeExpression(token){return tokenBeforeExprs[token];}function tokenCanStartExpression(token){return tokenStartsExprs[token];}function tokenIsAssignment(token){return token>=29&&token<=33;}function tokenIsFlowInterfaceOrTypeOrOpaque(token){return token>=129&&token<=131;}function tokenIsLoop(token){return token>=90&&token<=92;}function tokenIsKeyword(token){return token>=58&&token<=92;}function tokenIsOperator(token){return token>=39&&token<=59;}function tokenIsPostfix(token){return token===34;}function tokenIsPrefix(token){return tokenPrefixes[token];}function tokenIsTSTypeOperator(token){return token>=121&&token<=123;}function tokenIsTSDeclarationStart(token){return token>=124&&token<=130;}function tokenLabelName(token){return tokenLabels[token];}function tokenOperatorPrecedence(token){return tokenBinops[token];}function tokenIsRightAssociative(token){return token===57;}function tokenIsTemplate(token){return token>=24&&token<=25;}function getExportedToken(token){return tokenTypes[token];}{tokenTypes[8].updateContext=context=>{context.pop();};tokenTypes[5].updateContext=tokenTypes[7].updateContext=tokenTypes[23].updateContext=context=>{context.push(types.brace);};tokenTypes[22].updateContext=context=>{if(context[context.length-1]===types.template){context.pop();}else{context.push(types.template);}};tokenTypes[143].updateContext=context=>{context.push(types.j_expr,types.j_oTag);};}let nonASCIIidentifierStartChars=\"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";let nonASCIIidentifierChars=\"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";const nonASCIIidentifierStart=new RegExp(\"[\"+nonASCIIidentifierStartChars+\"]\");const nonASCIIidentifier=new RegExp(\"[\"+nonASCIIidentifierStartChars+nonASCIIidentifierChars+\"]\");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;const astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];const astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];function isInAstralSet(code,set){let pos=0x10000;for(let i=0,length=set.length;i<length;i+=2){pos+=set[i];if(pos>code)return false;pos+=set[i+1];if(pos>=code)return true;}return false;}function isIdentifierStart(code){if(code<65)return code===36;if(code<=90)return true;if(code<97)return code===95;if(code<=122)return true;if(code<=0xffff){return code>=0xaa&&nonASCIIidentifierStart.test(String.fromCharCode(code));}return isInAstralSet(code,astralIdentifierStartCodes);}function isIdentifierChar(code){if(code<48)return code===36;if(code<58)return true;if(code<65)return false;if(code<=90)return true;if(code<97)return code===95;if(code<=122)return true;if(code<=0xffff){return code>=0xaa&&nonASCIIidentifier.test(String.fromCharCode(code));}return isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes);}const reservedWords={keyword:[\"break\",\"case\",\"catch\",\"continue\",\"debugger\",\"default\",\"do\",\"else\",\"finally\",\"for\",\"function\",\"if\",\"return\",\"switch\",\"throw\",\"try\",\"var\",\"const\",\"while\",\"with\",\"new\",\"this\",\"super\",\"class\",\"extends\",\"export\",\"import\",\"null\",\"true\",\"false\",\"in\",\"instanceof\",\"typeof\",\"void\",\"delete\"],strict:[\"implements\",\"interface\",\"let\",\"package\",\"private\",\"protected\",\"public\",\"static\",\"yield\"],strictBind:[\"eval\",\"arguments\"]};const keywords=new Set(reservedWords.keyword);const reservedWordsStrictSet=new Set(reservedWords.strict);const reservedWordsStrictBindSet=new Set(reservedWords.strictBind);function isReservedWord(word,inModule){return inModule&&word===\"await\"||word===\"enum\";}function isStrictReservedWord(word,inModule){return isReservedWord(word,inModule)||reservedWordsStrictSet.has(word);}function isStrictBindOnlyReservedWord(word){return reservedWordsStrictBindSet.has(word);}function isStrictBindReservedWord(word,inModule){return isStrictReservedWord(word,inModule)||isStrictBindOnlyReservedWord(word);}function isKeyword(word){return keywords.has(word);}function isIteratorStart(current,next,next2){return current===64&&next===64&&isIdentifierStart(next2);}const reservedWordLikeSet=new Set([\"break\",\"case\",\"catch\",\"continue\",\"debugger\",\"default\",\"do\",\"else\",\"finally\",\"for\",\"function\",\"if\",\"return\",\"switch\",\"throw\",\"try\",\"var\",\"const\",\"while\",\"with\",\"new\",\"this\",\"super\",\"class\",\"extends\",\"export\",\"import\",\"null\",\"true\",\"false\",\"in\",\"instanceof\",\"typeof\",\"void\",\"delete\",\"implements\",\"interface\",\"let\",\"package\",\"private\",\"protected\",\"public\",\"static\",\"yield\",\"eval\",\"arguments\",\"enum\",\"await\"]);function canBeReservedWord(word){return reservedWordLikeSet.has(word);}class Scope{constructor(flags){this.flags=0;this.names=new Map();this.firstLexicalName=\"\";this.flags=flags;}}class ScopeHandler{constructor(parser,inModule){this.parser=void 0;this.scopeStack=[];this.inModule=void 0;this.undefinedExports=new Map();this.parser=parser;this.inModule=inModule;}get inTopLevel(){return(this.currentScope().flags&1)>0;}get inFunction(){return(this.currentVarScopeFlags()&2)>0;}get allowSuper(){return(this.currentThisScopeFlags()&16)>0;}get allowDirectSuper(){return(this.currentThisScopeFlags()&32)>0;}get inClass(){return(this.currentThisScopeFlags()&64)>0;}get inClassAndNotInNonArrowFunction(){const flags=this.currentThisScopeFlags();return(flags&64)>0&&(flags&2)===0;}get inStaticBlock(){for(let i=this.scopeStack.length-1;;i--){const{flags}=this.scopeStack[i];if(flags&128){return true;}if(flags&(387|64)){return false;}}}get inNonArrowFunction(){return(this.currentThisScopeFlags()&2)>0;}get treatFunctionsAsVar(){return this.treatFunctionsAsVarInScope(this.currentScope());}createScope(flags){return new Scope(flags);}enter(flags){this.scopeStack.push(this.createScope(flags));}exit(){const scope=this.scopeStack.pop();return scope.flags;}treatFunctionsAsVarInScope(scope){return!!(scope.flags&(2|128)||!this.parser.inModule&&scope.flags&1);}declareName(name,bindingType,loc){let scope=this.currentScope();if(bindingType&8||bindingType&16){this.checkRedeclarationInScope(scope,name,bindingType,loc);let type=scope.names.get(name)||0;if(bindingType&16){type=type|4;}else{if(!scope.firstLexicalName){scope.firstLexicalName=name;}type=type|2;}scope.names.set(name,type);if(bindingType&8){this.maybeExportDefined(scope,name);}}else if(bindingType&4){for(let i=this.scopeStack.length-1;i>=0;--i){scope=this.scopeStack[i];this.checkRedeclarationInScope(scope,name,bindingType,loc);scope.names.set(name,(scope.names.get(name)||0)|1);this.maybeExportDefined(scope,name);if(scope.flags&387)break;}}if(this.parser.inModule&&scope.flags&1){this.undefinedExports.delete(name);}}maybeExportDefined(scope,name){if(this.parser.inModule&&scope.flags&1){this.undefinedExports.delete(name);}}checkRedeclarationInScope(scope,name,bindingType,loc){if(this.isRedeclaredInScope(scope,name,bindingType)){this.parser.raise(Errors.VarRedeclaration,loc,{identifierName:name});}}isRedeclaredInScope(scope,name,bindingType){if(!(bindingType&1))return false;if(bindingType&8){return scope.names.has(name);}const type=scope.names.get(name);if(bindingType&16){return(type&2)>0||!this.treatFunctionsAsVarInScope(scope)&&(type&1)>0;}return(type&2)>0&&!(scope.flags&8&&scope.firstLexicalName===name)||!this.treatFunctionsAsVarInScope(scope)&&(type&4)>0;}checkLocalExport(id){const{name}=id;const topLevelScope=this.scopeStack[0];if(!topLevelScope.names.has(name)){this.undefinedExports.set(name,id.loc.start);}}currentScope(){return this.scopeStack[this.scopeStack.length-1];}currentVarScopeFlags(){for(let i=this.scopeStack.length-1;;i--){const{flags}=this.scopeStack[i];if(flags&387){return flags;}}}currentThisScopeFlags(){for(let i=this.scopeStack.length-1;;i--){const{flags}=this.scopeStack[i];if(flags&(387|64)&&!(flags&4)){return flags;}}}}class FlowScope extends Scope{constructor(...args){super(...args);this.declareFunctions=new Set();}}class FlowScopeHandler extends ScopeHandler{createScope(flags){return new FlowScope(flags);}declareName(name,bindingType,loc){const scope=this.currentScope();if(bindingType&2048){this.checkRedeclarationInScope(scope,name,bindingType,loc);this.maybeExportDefined(scope,name);scope.declareFunctions.add(name);return;}super.declareName(name,bindingType,loc);}isRedeclaredInScope(scope,name,bindingType){if(super.isRedeclaredInScope(scope,name,bindingType))return true;if(bindingType&2048&&!scope.declareFunctions.has(name)){const type=scope.names.get(name);return(type&4)>0||(type&2)>0;}return false;}checkLocalExport(id){if(!this.scopeStack[0].declareFunctions.has(id.name)){super.checkLocalExport(id);}}}const reservedTypes=new Set([\"_\",\"any\",\"bool\",\"boolean\",\"empty\",\"extends\",\"false\",\"interface\",\"mixed\",\"null\",\"number\",\"static\",\"string\",\"true\",\"typeof\",\"void\"]);const FlowErrors=ParseErrorEnum`flow`({AmbiguousConditionalArrow:\"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",AmbiguousDeclareModuleKind:\"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",AssignReservedType:({reservedType})=>`Cannot overwrite reserved type ${reservedType}.`,DeclareClassElement:\"The `declare` modifier can only appear on class fields.\",DeclareClassFieldInitializer:\"Initializers are not allowed in fields with the `declare` modifier.\",DuplicateDeclareModuleExports:\"Duplicate `declare module.exports` statement.\",EnumBooleanMemberNotInitialized:({memberName,enumName})=>`Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,EnumDuplicateMemberName:({memberName,enumName})=>`Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,EnumInconsistentMemberValues:({enumName})=>`Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,EnumInvalidExplicitType:({invalidEnumType,enumName})=>`Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,EnumInvalidExplicitTypeUnknownSupplied:({enumName})=>`Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,EnumInvalidMemberInitializerPrimaryType:({enumName,memberName,explicitType})=>`Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,EnumInvalidMemberInitializerSymbolType:({enumName,memberName})=>`Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,EnumInvalidMemberInitializerUnknownType:({enumName,memberName})=>`The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,EnumInvalidMemberName:({enumName,memberName,suggestion})=>`Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,EnumNumberMemberNotInitialized:({enumName,memberName})=>`Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,EnumStringMemberInconsistentlyInitialized:({enumName})=>`String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,GetterMayNotHaveThisParam:\"A getter cannot have a `this` parameter.\",ImportReflectionHasImportType:\"An `import module` declaration can not use `type` or `typeof` keyword.\",ImportTypeShorthandOnlyInPureImport:\"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",InexactInsideExact:\"Explicit inexact syntax cannot appear inside an explicit exact object type.\",InexactInsideNonObject:\"Explicit inexact syntax cannot appear in class or interface definitions.\",InexactVariance:\"Explicit inexact syntax cannot have variance.\",InvalidNonTypeImportInDeclareModule:\"Imports within a `declare module` body must always be `import type` or `import typeof`.\",MissingTypeParamDefault:\"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",NestedDeclareModule:\"`declare module` cannot be used inside another `declare module`.\",NestedFlowComment:\"Cannot have a flow comment inside another flow comment.\",PatternIsOptional:Object.assign({message:\"A binding pattern parameter cannot be optional in an implementation signature.\"},{reasonCode:\"OptionalBindingPattern\"}),SetterMayNotHaveThisParam:\"A setter cannot have a `this` parameter.\",SpreadVariance:\"Spread properties cannot have variance.\",ThisParamAnnotationRequired:\"A type annotation is required for the `this` parameter.\",ThisParamBannedInConstructor:\"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",ThisParamMayNotBeOptional:\"The `this` parameter cannot be optional.\",ThisParamMustBeFirst:\"The `this` parameter must be the first function parameter.\",ThisParamNoDefault:\"The `this` parameter may not have a default value.\",TypeBeforeInitializer:\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",TypeCastInPattern:\"The type cast expression is expected to be wrapped with parenthesis.\",UnexpectedExplicitInexactInObject:\"Explicit inexact syntax must appear at the end of an inexact object.\",UnexpectedReservedType:({reservedType})=>`Unexpected reserved type ${reservedType}.`,UnexpectedReservedUnderscore:\"`_` is only allowed as a type argument to call or new.\",UnexpectedSpaceBetweenModuloChecks:\"Spaces between `%` and `checks` are not allowed here.\",UnexpectedSpreadType:\"Spread operator cannot appear in class or interface definitions.\",UnexpectedSubtractionOperand:'Unexpected token, expected \"number\" or \"bigint\".',UnexpectedTokenAfterTypeParameter:\"Expected an arrow function after this type parameter declaration.\",UnexpectedTypeParameterBeforeAsyncArrowFunction:\"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",UnsupportedDeclareExportKind:({unsupportedExportKind,suggestion})=>`\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,UnsupportedStatementInDeclareModule:\"Only declares and type imports are allowed inside declare module.\",UnterminatedFlowComment:\"Unterminated flow-comment.\"});function isEsModuleType(bodyElement){return bodyElement.type===\"DeclareExportAllDeclaration\"||bodyElement.type===\"DeclareExportDeclaration\"&&(!bodyElement.declaration||bodyElement.declaration.type!==\"TypeAlias\"&&bodyElement.declaration.type!==\"InterfaceDeclaration\");}function hasTypeImportKind(node){return node.importKind===\"type\"||node.importKind===\"typeof\";}const exportSuggestions={const:\"declare export var\",let:\"declare export var\",type:\"export type\",interface:\"export interface\"};function partition(list,test){const list1=[];const list2=[];for(let i=0;i<list.length;i++){(test(list[i],i,list)?list1:list2).push(list[i]);}return[list1,list2];}const FLOW_PRAGMA_REGEX=/\\*?\\s*@((?:no)?flow)\\b/;var flow=superClass=>class FlowParserMixin extends superClass{constructor(...args){super(...args);this.flowPragma=undefined;}getScopeHandler(){return FlowScopeHandler;}shouldParseTypes(){return this.getPluginOption(\"flow\",\"all\")||this.flowPragma===\"flow\";}finishToken(type,val){if(type!==134&&type!==13&&type!==28){if(this.flowPragma===undefined){this.flowPragma=null;}}super.finishToken(type,val);}addComment(comment){if(this.flowPragma===undefined){const matches=FLOW_PRAGMA_REGEX.exec(comment.value);if(!matches);else if(matches[1]===\"flow\"){this.flowPragma=\"flow\";}else if(matches[1]===\"noflow\"){this.flowPragma=\"noflow\";}else{throw new Error(\"Unexpected flow pragma\");}}super.addComment(comment);}flowParseTypeInitialiser(tok){const oldInType=this.state.inType;this.state.inType=true;this.expect(tok||14);const type=this.flowParseType();this.state.inType=oldInType;return type;}flowParsePredicate(){const node=this.startNode();const moduloLoc=this.state.startLoc;this.next();this.expectContextual(110);if(this.state.lastTokStartLoc.index>moduloLoc.index+1){this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks,moduloLoc);}if(this.eat(10)){node.value=super.parseExpression();this.expect(11);return this.finishNode(node,\"DeclaredPredicate\");}else{return this.finishNode(node,\"InferredPredicate\");}}flowParseTypeAndPredicateInitialiser(){const oldInType=this.state.inType;this.state.inType=true;this.expect(14);let type=null;let predicate=null;if(this.match(54)){this.state.inType=oldInType;predicate=this.flowParsePredicate();}else{type=this.flowParseType();this.state.inType=oldInType;if(this.match(54)){predicate=this.flowParsePredicate();}}return[type,predicate];}flowParseDeclareClass(node){this.next();this.flowParseInterfaceish(node,true);return this.finishNode(node,\"DeclareClass\");}flowParseDeclareFunction(node){this.next();const id=node.id=this.parseIdentifier();const typeNode=this.startNode();const typeContainer=this.startNode();if(this.match(47)){typeNode.typeParameters=this.flowParseTypeParameterDeclaration();}else{typeNode.typeParameters=null;}this.expect(10);const tmp=this.flowParseFunctionTypeParams();typeNode.params=tmp.params;typeNode.rest=tmp.rest;typeNode.this=tmp._this;this.expect(11);[typeNode.returnType,node.predicate]=this.flowParseTypeAndPredicateInitialiser();typeContainer.typeAnnotation=this.finishNode(typeNode,\"FunctionTypeAnnotation\");id.typeAnnotation=this.finishNode(typeContainer,\"TypeAnnotation\");this.resetEndLocation(id);this.semicolon();this.scope.declareName(node.id.name,2048,node.id.loc.start);return this.finishNode(node,\"DeclareFunction\");}flowParseDeclare(node,insideModule){if(this.match(80)){return this.flowParseDeclareClass(node);}else if(this.match(68)){return this.flowParseDeclareFunction(node);}else if(this.match(74)){return this.flowParseDeclareVariable(node);}else if(this.eatContextual(127)){if(this.match(16)){return this.flowParseDeclareModuleExports(node);}else{if(insideModule){this.raise(FlowErrors.NestedDeclareModule,this.state.lastTokStartLoc);}return this.flowParseDeclareModule(node);}}else if(this.isContextual(130)){return this.flowParseDeclareTypeAlias(node);}else if(this.isContextual(131)){return this.flowParseDeclareOpaqueType(node);}else if(this.isContextual(129)){return this.flowParseDeclareInterface(node);}else if(this.match(82)){return this.flowParseDeclareExportDeclaration(node,insideModule);}else{this.unexpected();}}flowParseDeclareVariable(node){this.next();node.id=this.flowParseTypeAnnotatableIdentifier(true);this.scope.declareName(node.id.name,5,node.id.loc.start);this.semicolon();return this.finishNode(node,\"DeclareVariable\");}flowParseDeclareModule(node){this.scope.enter(0);if(this.match(134)){node.id=super.parseExprAtom();}else{node.id=this.parseIdentifier();}const bodyNode=node.body=this.startNode();const body=bodyNode.body=[];this.expect(5);while(!this.match(8)){let bodyNode=this.startNode();if(this.match(83)){this.next();if(!this.isContextual(130)&&!this.match(87)){this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule,this.state.lastTokStartLoc);}super.parseImport(bodyNode);}else{this.expectContextual(125,FlowErrors.UnsupportedStatementInDeclareModule);bodyNode=this.flowParseDeclare(bodyNode,true);}body.push(bodyNode);}this.scope.exit();this.expect(8);this.finishNode(bodyNode,\"BlockStatement\");let kind=null;let hasModuleExport=false;body.forEach(bodyElement=>{if(isEsModuleType(bodyElement)){if(kind===\"CommonJS\"){this.raise(FlowErrors.AmbiguousDeclareModuleKind,bodyElement);}kind=\"ES\";}else if(bodyElement.type===\"DeclareModuleExports\"){if(hasModuleExport){this.raise(FlowErrors.DuplicateDeclareModuleExports,bodyElement);}if(kind===\"ES\"){this.raise(FlowErrors.AmbiguousDeclareModuleKind,bodyElement);}kind=\"CommonJS\";hasModuleExport=true;}});node.kind=kind||\"CommonJS\";return this.finishNode(node,\"DeclareModule\");}flowParseDeclareExportDeclaration(node,insideModule){this.expect(82);if(this.eat(65)){if(this.match(68)||this.match(80)){node.declaration=this.flowParseDeclare(this.startNode());}else{node.declaration=this.flowParseType();this.semicolon();}node.default=true;return this.finishNode(node,\"DeclareExportDeclaration\");}else{if(this.match(75)||this.isLet()||(this.isContextual(130)||this.isContextual(129))&&!insideModule){const label=this.state.value;throw this.raise(FlowErrors.UnsupportedDeclareExportKind,this.state.startLoc,{unsupportedExportKind:label,suggestion:exportSuggestions[label]});}if(this.match(74)||this.match(68)||this.match(80)||this.isContextual(131)){node.declaration=this.flowParseDeclare(this.startNode());node.default=false;return this.finishNode(node,\"DeclareExportDeclaration\");}else if(this.match(55)||this.match(5)||this.isContextual(129)||this.isContextual(130)||this.isContextual(131)){node=this.parseExport(node,null);if(node.type===\"ExportNamedDeclaration\"){node.default=false;delete node.exportKind;return this.castNodeTo(node,\"DeclareExportDeclaration\");}else{return this.castNodeTo(node,\"DeclareExportAllDeclaration\");}}}this.unexpected();}flowParseDeclareModuleExports(node){this.next();this.expectContextual(111);node.typeAnnotation=this.flowParseTypeAnnotation();this.semicolon();return this.finishNode(node,\"DeclareModuleExports\");}flowParseDeclareTypeAlias(node){this.next();const finished=this.flowParseTypeAlias(node);this.castNodeTo(finished,\"DeclareTypeAlias\");return finished;}flowParseDeclareOpaqueType(node){this.next();const finished=this.flowParseOpaqueType(node,true);this.castNodeTo(finished,\"DeclareOpaqueType\");return finished;}flowParseDeclareInterface(node){this.next();this.flowParseInterfaceish(node,false);return this.finishNode(node,\"DeclareInterface\");}flowParseInterfaceish(node,isClass){node.id=this.flowParseRestrictedIdentifier(!isClass,true);this.scope.declareName(node.id.name,isClass?17:8201,node.id.loc.start);if(this.match(47)){node.typeParameters=this.flowParseTypeParameterDeclaration();}else{node.typeParameters=null;}node.extends=[];if(this.eat(81)){do{node.extends.push(this.flowParseInterfaceExtends());}while(!isClass&&this.eat(12));}if(isClass){node.implements=[];node.mixins=[];if(this.eatContextual(117)){do{node.mixins.push(this.flowParseInterfaceExtends());}while(this.eat(12));}if(this.eatContextual(113)){do{node.implements.push(this.flowParseInterfaceExtends());}while(this.eat(12));}}node.body=this.flowParseObjectType({allowStatic:isClass,allowExact:false,allowSpread:false,allowProto:isClass,allowInexact:false});}flowParseInterfaceExtends(){const node=this.startNode();node.id=this.flowParseQualifiedTypeIdentifier();if(this.match(47)){node.typeParameters=this.flowParseTypeParameterInstantiation();}else{node.typeParameters=null;}return this.finishNode(node,\"InterfaceExtends\");}flowParseInterface(node){this.flowParseInterfaceish(node,false);return this.finishNode(node,\"InterfaceDeclaration\");}checkNotUnderscore(word){if(word===\"_\"){this.raise(FlowErrors.UnexpectedReservedUnderscore,this.state.startLoc);}}checkReservedType(word,startLoc,declaration){if(!reservedTypes.has(word))return;this.raise(declaration?FlowErrors.AssignReservedType:FlowErrors.UnexpectedReservedType,startLoc,{reservedType:word});}flowParseRestrictedIdentifier(liberal,declaration){this.checkReservedType(this.state.value,this.state.startLoc,declaration);return this.parseIdentifier(liberal);}flowParseTypeAlias(node){node.id=this.flowParseRestrictedIdentifier(false,true);this.scope.declareName(node.id.name,8201,node.id.loc.start);if(this.match(47)){node.typeParameters=this.flowParseTypeParameterDeclaration();}else{node.typeParameters=null;}node.right=this.flowParseTypeInitialiser(29);this.semicolon();return this.finishNode(node,\"TypeAlias\");}flowParseOpaqueType(node,declare){this.expectContextual(130);node.id=this.flowParseRestrictedIdentifier(true,true);this.scope.declareName(node.id.name,8201,node.id.loc.start);if(this.match(47)){node.typeParameters=this.flowParseTypeParameterDeclaration();}else{node.typeParameters=null;}node.supertype=null;if(this.match(14)){node.supertype=this.flowParseTypeInitialiser(14);}node.impltype=null;if(!declare){node.impltype=this.flowParseTypeInitialiser(29);}this.semicolon();return this.finishNode(node,\"OpaqueType\");}flowParseTypeParameter(requireDefault=false){const nodeStartLoc=this.state.startLoc;const node=this.startNode();const variance=this.flowParseVariance();const ident=this.flowParseTypeAnnotatableIdentifier();node.name=ident.name;node.variance=variance;node.bound=ident.typeAnnotation;if(this.match(29)){this.eat(29);node.default=this.flowParseType();}else{if(requireDefault){this.raise(FlowErrors.MissingTypeParamDefault,nodeStartLoc);}}return this.finishNode(node,\"TypeParameter\");}flowParseTypeParameterDeclaration(){const oldInType=this.state.inType;const node=this.startNode();node.params=[];this.state.inType=true;if(this.match(47)||this.match(143)){this.next();}else{this.unexpected();}let defaultRequired=false;do{const typeParameter=this.flowParseTypeParameter(defaultRequired);node.params.push(typeParameter);if(typeParameter.default){defaultRequired=true;}if(!this.match(48)){this.expect(12);}}while(!this.match(48));this.expect(48);this.state.inType=oldInType;return this.finishNode(node,\"TypeParameterDeclaration\");}flowInTopLevelContext(cb){if(this.curContext()!==types.brace){const oldContext=this.state.context;this.state.context=[oldContext[0]];try{return cb();}finally{this.state.context=oldContext;}}else{return cb();}}flowParseTypeParameterInstantiationInExpression(){if(this.reScan_lt()!==47)return;return this.flowParseTypeParameterInstantiation();}flowParseTypeParameterInstantiation(){const node=this.startNode();const oldInType=this.state.inType;this.state.inType=true;node.params=[];this.flowInTopLevelContext(()=>{this.expect(47);const oldNoAnonFunctionType=this.state.noAnonFunctionType;this.state.noAnonFunctionType=false;while(!this.match(48)){node.params.push(this.flowParseType());if(!this.match(48)){this.expect(12);}}this.state.noAnonFunctionType=oldNoAnonFunctionType;});this.state.inType=oldInType;if(!this.state.inType&&this.curContext()===types.brace){this.reScan_lt_gt();}this.expect(48);return this.finishNode(node,\"TypeParameterInstantiation\");}flowParseTypeParameterInstantiationCallOrNew(){if(this.reScan_lt()!==47)return;const node=this.startNode();const oldInType=this.state.inType;node.params=[];this.state.inType=true;this.expect(47);while(!this.match(48)){node.params.push(this.flowParseTypeOrImplicitInstantiation());if(!this.match(48)){this.expect(12);}}this.expect(48);this.state.inType=oldInType;return this.finishNode(node,\"TypeParameterInstantiation\");}flowParseInterfaceType(){const node=this.startNode();this.expectContextual(129);node.extends=[];if(this.eat(81)){do{node.extends.push(this.flowParseInterfaceExtends());}while(this.eat(12));}node.body=this.flowParseObjectType({allowStatic:false,allowExact:false,allowSpread:false,allowProto:false,allowInexact:false});return this.finishNode(node,\"InterfaceTypeAnnotation\");}flowParseObjectPropertyKey(){return this.match(135)||this.match(134)?super.parseExprAtom():this.parseIdentifier(true);}flowParseObjectTypeIndexer(node,isStatic,variance){node.static=isStatic;if(this.lookahead().type===14){node.id=this.flowParseObjectPropertyKey();node.key=this.flowParseTypeInitialiser();}else{node.id=null;node.key=this.flowParseType();}this.expect(3);node.value=this.flowParseTypeInitialiser();node.variance=variance;return this.finishNode(node,\"ObjectTypeIndexer\");}flowParseObjectTypeInternalSlot(node,isStatic){node.static=isStatic;node.id=this.flowParseObjectPropertyKey();this.expect(3);this.expect(3);if(this.match(47)||this.match(10)){node.method=true;node.optional=false;node.value=this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));}else{node.method=false;if(this.eat(17)){node.optional=true;}node.value=this.flowParseTypeInitialiser();}return this.finishNode(node,\"ObjectTypeInternalSlot\");}flowParseObjectTypeMethodish(node){node.params=[];node.rest=null;node.typeParameters=null;node.this=null;if(this.match(47)){node.typeParameters=this.flowParseTypeParameterDeclaration();}this.expect(10);if(this.match(78)){node.this=this.flowParseFunctionTypeParam(true);node.this.name=null;if(!this.match(11)){this.expect(12);}}while(!this.match(11)&&!this.match(21)){node.params.push(this.flowParseFunctionTypeParam(false));if(!this.match(11)){this.expect(12);}}if(this.eat(21)){node.rest=this.flowParseFunctionTypeParam(false);}this.expect(11);node.returnType=this.flowParseTypeInitialiser();return this.finishNode(node,\"FunctionTypeAnnotation\");}flowParseObjectTypeCallProperty(node,isStatic){const valueNode=this.startNode();node.static=isStatic;node.value=this.flowParseObjectTypeMethodish(valueNode);return this.finishNode(node,\"ObjectTypeCallProperty\");}flowParseObjectType({allowStatic,allowExact,allowSpread,allowProto,allowInexact}){const oldInType=this.state.inType;this.state.inType=true;const nodeStart=this.startNode();nodeStart.callProperties=[];nodeStart.properties=[];nodeStart.indexers=[];nodeStart.internalSlots=[];let endDelim;let exact;let inexact=false;if(allowExact&&this.match(6)){this.expect(6);endDelim=9;exact=true;}else{this.expect(5);endDelim=8;exact=false;}nodeStart.exact=exact;while(!this.match(endDelim)){let isStatic=false;let protoStartLoc=null;let inexactStartLoc=null;const node=this.startNode();if(allowProto&&this.isContextual(118)){const lookahead=this.lookahead();if(lookahead.type!==14&&lookahead.type!==17){this.next();protoStartLoc=this.state.startLoc;allowStatic=false;}}if(allowStatic&&this.isContextual(106)){const lookahead=this.lookahead();if(lookahead.type!==14&&lookahead.type!==17){this.next();isStatic=true;}}const variance=this.flowParseVariance();if(this.eat(0)){if(protoStartLoc!=null){this.unexpected(protoStartLoc);}if(this.eat(0)){if(variance){this.unexpected(variance.loc.start);}nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node,isStatic));}else{nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node,isStatic,variance));}}else if(this.match(10)||this.match(47)){if(protoStartLoc!=null){this.unexpected(protoStartLoc);}if(variance){this.unexpected(variance.loc.start);}nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node,isStatic));}else{let kind=\"init\";if(this.isContextual(99)||this.isContextual(104)){const lookahead=this.lookahead();if(tokenIsLiteralPropertyName(lookahead.type)){kind=this.state.value;this.next();}}const propOrInexact=this.flowParseObjectTypeProperty(node,isStatic,protoStartLoc,variance,kind,allowSpread,allowInexact!=null?allowInexact:!exact);if(propOrInexact===null){inexact=true;inexactStartLoc=this.state.lastTokStartLoc;}else{nodeStart.properties.push(propOrInexact);}}this.flowObjectTypeSemicolon();if(inexactStartLoc&&!this.match(8)&&!this.match(9)){this.raise(FlowErrors.UnexpectedExplicitInexactInObject,inexactStartLoc);}}this.expect(endDelim);if(allowSpread){nodeStart.inexact=inexact;}const out=this.finishNode(nodeStart,\"ObjectTypeAnnotation\");this.state.inType=oldInType;return out;}flowParseObjectTypeProperty(node,isStatic,protoStartLoc,variance,kind,allowSpread,allowInexact){if(this.eat(21)){const isInexactToken=this.match(12)||this.match(13)||this.match(8)||this.match(9);if(isInexactToken){if(!allowSpread){this.raise(FlowErrors.InexactInsideNonObject,this.state.lastTokStartLoc);}else if(!allowInexact){this.raise(FlowErrors.InexactInsideExact,this.state.lastTokStartLoc);}if(variance){this.raise(FlowErrors.InexactVariance,variance);}return null;}if(!allowSpread){this.raise(FlowErrors.UnexpectedSpreadType,this.state.lastTokStartLoc);}if(protoStartLoc!=null){this.unexpected(protoStartLoc);}if(variance){this.raise(FlowErrors.SpreadVariance,variance);}node.argument=this.flowParseType();return this.finishNode(node,\"ObjectTypeSpreadProperty\");}else{node.key=this.flowParseObjectPropertyKey();node.static=isStatic;node.proto=protoStartLoc!=null;node.kind=kind;let optional=false;if(this.match(47)||this.match(10)){node.method=true;if(protoStartLoc!=null){this.unexpected(protoStartLoc);}if(variance){this.unexpected(variance.loc.start);}node.value=this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));if(kind===\"get\"||kind===\"set\"){this.flowCheckGetterSetterParams(node);}if(!allowSpread&&node.key.name===\"constructor\"&&node.value.this){this.raise(FlowErrors.ThisParamBannedInConstructor,node.value.this);}}else{if(kind!==\"init\")this.unexpected();node.method=false;if(this.eat(17)){optional=true;}node.value=this.flowParseTypeInitialiser();node.variance=variance;}node.optional=optional;return this.finishNode(node,\"ObjectTypeProperty\");}}flowCheckGetterSetterParams(property){const paramCount=property.kind===\"get\"?0:1;const length=property.value.params.length+(property.value.rest?1:0);if(property.value.this){this.raise(property.kind===\"get\"?FlowErrors.GetterMayNotHaveThisParam:FlowErrors.SetterMayNotHaveThisParam,property.value.this);}if(length!==paramCount){this.raise(property.kind===\"get\"?Errors.BadGetterArity:Errors.BadSetterArity,property);}if(property.kind===\"set\"&&property.value.rest){this.raise(Errors.BadSetterRestParameter,property);}}flowObjectTypeSemicolon(){if(!this.eat(13)&&!this.eat(12)&&!this.match(8)&&!this.match(9)){this.unexpected();}}flowParseQualifiedTypeIdentifier(startLoc,id){startLoc!=null?startLoc:startLoc=this.state.startLoc;let node=id||this.flowParseRestrictedIdentifier(true);while(this.eat(16)){const node2=this.startNodeAt(startLoc);node2.qualification=node;node2.id=this.flowParseRestrictedIdentifier(true);node=this.finishNode(node2,\"QualifiedTypeIdentifier\");}return node;}flowParseGenericType(startLoc,id){const node=this.startNodeAt(startLoc);node.typeParameters=null;node.id=this.flowParseQualifiedTypeIdentifier(startLoc,id);if(this.match(47)){node.typeParameters=this.flowParseTypeParameterInstantiation();}return this.finishNode(node,\"GenericTypeAnnotation\");}flowParseTypeofType(){const node=this.startNode();this.expect(87);node.argument=this.flowParsePrimaryType();return this.finishNode(node,\"TypeofTypeAnnotation\");}flowParseTupleType(){const node=this.startNode();node.types=[];this.expect(0);while(this.state.pos<this.length&&!this.match(3)){node.types.push(this.flowParseType());if(this.match(3))break;this.expect(12);}this.expect(3);return this.finishNode(node,\"TupleTypeAnnotation\");}flowParseFunctionTypeParam(first){let name=null;let optional=false;let typeAnnotation=null;const node=this.startNode();const lh=this.lookahead();const isThis=this.state.type===78;if(lh.type===14||lh.type===17){if(isThis&&!first){this.raise(FlowErrors.ThisParamMustBeFirst,node);}name=this.parseIdentifier(isThis);if(this.eat(17)){optional=true;if(isThis){this.raise(FlowErrors.ThisParamMayNotBeOptional,node);}}typeAnnotation=this.flowParseTypeInitialiser();}else{typeAnnotation=this.flowParseType();}node.name=name;node.optional=optional;node.typeAnnotation=typeAnnotation;return this.finishNode(node,\"FunctionTypeParam\");}reinterpretTypeAsFunctionTypeParam(type){const node=this.startNodeAt(type.loc.start);node.name=null;node.optional=false;node.typeAnnotation=type;return this.finishNode(node,\"FunctionTypeParam\");}flowParseFunctionTypeParams(params=[]){let rest=null;let _this=null;if(this.match(78)){_this=this.flowParseFunctionTypeParam(true);_this.name=null;if(!this.match(11)){this.expect(12);}}while(!this.match(11)&&!this.match(21)){params.push(this.flowParseFunctionTypeParam(false));if(!this.match(11)){this.expect(12);}}if(this.eat(21)){rest=this.flowParseFunctionTypeParam(false);}return{params,rest,_this};}flowIdentToTypeAnnotation(startLoc,node,id){switch(id.name){case\"any\":return this.finishNode(node,\"AnyTypeAnnotation\");case\"bool\":case\"boolean\":return this.finishNode(node,\"BooleanTypeAnnotation\");case\"mixed\":return this.finishNode(node,\"MixedTypeAnnotation\");case\"empty\":return this.finishNode(node,\"EmptyTypeAnnotation\");case\"number\":return this.finishNode(node,\"NumberTypeAnnotation\");case\"string\":return this.finishNode(node,\"StringTypeAnnotation\");case\"symbol\":return this.finishNode(node,\"SymbolTypeAnnotation\");default:this.checkNotUnderscore(id.name);return this.flowParseGenericType(startLoc,id);}}flowParsePrimaryType(){const startLoc=this.state.startLoc;const node=this.startNode();let tmp;let type;let isGroupedType=false;const oldNoAnonFunctionType=this.state.noAnonFunctionType;switch(this.state.type){case 5:return this.flowParseObjectType({allowStatic:false,allowExact:false,allowSpread:true,allowProto:false,allowInexact:true});case 6:return this.flowParseObjectType({allowStatic:false,allowExact:true,allowSpread:true,allowProto:false,allowInexact:false});case 0:this.state.noAnonFunctionType=false;type=this.flowParseTupleType();this.state.noAnonFunctionType=oldNoAnonFunctionType;return type;case 47:{const node=this.startNode();node.typeParameters=this.flowParseTypeParameterDeclaration();this.expect(10);tmp=this.flowParseFunctionTypeParams();node.params=tmp.params;node.rest=tmp.rest;node.this=tmp._this;this.expect(11);this.expect(19);node.returnType=this.flowParseType();return this.finishNode(node,\"FunctionTypeAnnotation\");}case 10:{const node=this.startNode();this.next();if(!this.match(11)&&!this.match(21)){if(tokenIsIdentifier(this.state.type)||this.match(78)){const token=this.lookahead().type;isGroupedType=token!==17&&token!==14;}else{isGroupedType=true;}}if(isGroupedType){this.state.noAnonFunctionType=false;type=this.flowParseType();this.state.noAnonFunctionType=oldNoAnonFunctionType;if(this.state.noAnonFunctionType||!(this.match(12)||this.match(11)&&this.lookahead().type===19)){this.expect(11);return type;}else{this.eat(12);}}if(type){tmp=this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);}else{tmp=this.flowParseFunctionTypeParams();}node.params=tmp.params;node.rest=tmp.rest;node.this=tmp._this;this.expect(11);this.expect(19);node.returnType=this.flowParseType();node.typeParameters=null;return this.finishNode(node,\"FunctionTypeAnnotation\");}case 134:return this.parseLiteral(this.state.value,\"StringLiteralTypeAnnotation\");case 85:case 86:node.value=this.match(85);this.next();return this.finishNode(node,\"BooleanLiteralTypeAnnotation\");case 53:if(this.state.value===\"-\"){this.next();if(this.match(135)){return this.parseLiteralAtNode(-this.state.value,\"NumberLiteralTypeAnnotation\",node);}if(this.match(136)){return this.parseLiteralAtNode(-this.state.value,\"BigIntLiteralTypeAnnotation\",node);}throw this.raise(FlowErrors.UnexpectedSubtractionOperand,this.state.startLoc);}this.unexpected();return;case 135:return this.parseLiteral(this.state.value,\"NumberLiteralTypeAnnotation\");case 136:return this.parseLiteral(this.state.value,\"BigIntLiteralTypeAnnotation\");case 88:this.next();return this.finishNode(node,\"VoidTypeAnnotation\");case 84:this.next();return this.finishNode(node,\"NullLiteralTypeAnnotation\");case 78:this.next();return this.finishNode(node,\"ThisTypeAnnotation\");case 55:this.next();return this.finishNode(node,\"ExistsTypeAnnotation\");case 87:return this.flowParseTypeofType();default:if(tokenIsKeyword(this.state.type)){const label=tokenLabelName(this.state.type);this.next();return super.createIdentifier(node,label);}else if(tokenIsIdentifier(this.state.type)){if(this.isContextual(129)){return this.flowParseInterfaceType();}return this.flowIdentToTypeAnnotation(startLoc,node,this.parseIdentifier());}}this.unexpected();}flowParsePostfixType(){const startLoc=this.state.startLoc;let type=this.flowParsePrimaryType();let seenOptionalIndexedAccess=false;while((this.match(0)||this.match(18))&&!this.canInsertSemicolon()){const node=this.startNodeAt(startLoc);const optional=this.eat(18);seenOptionalIndexedAccess=seenOptionalIndexedAccess||optional;this.expect(0);if(!optional&&this.match(3)){node.elementType=type;this.next();type=this.finishNode(node,\"ArrayTypeAnnotation\");}else{node.objectType=type;node.indexType=this.flowParseType();this.expect(3);if(seenOptionalIndexedAccess){node.optional=optional;type=this.finishNode(node,\"OptionalIndexedAccessType\");}else{type=this.finishNode(node,\"IndexedAccessType\");}}}return type;}flowParsePrefixType(){const node=this.startNode();if(this.eat(17)){node.typeAnnotation=this.flowParsePrefixType();return this.finishNode(node,\"NullableTypeAnnotation\");}else{return this.flowParsePostfixType();}}flowParseAnonFunctionWithoutParens(){const param=this.flowParsePrefixType();if(!this.state.noAnonFunctionType&&this.eat(19)){const node=this.startNodeAt(param.loc.start);node.params=[this.reinterpretTypeAsFunctionTypeParam(param)];node.rest=null;node.this=null;node.returnType=this.flowParseType();node.typeParameters=null;return this.finishNode(node,\"FunctionTypeAnnotation\");}return param;}flowParseIntersectionType(){const node=this.startNode();this.eat(45);const type=this.flowParseAnonFunctionWithoutParens();node.types=[type];while(this.eat(45)){node.types.push(this.flowParseAnonFunctionWithoutParens());}return node.types.length===1?type:this.finishNode(node,\"IntersectionTypeAnnotation\");}flowParseUnionType(){const node=this.startNode();this.eat(43);const type=this.flowParseIntersectionType();node.types=[type];while(this.eat(43)){node.types.push(this.flowParseIntersectionType());}return node.types.length===1?type:this.finishNode(node,\"UnionTypeAnnotation\");}flowParseType(){const oldInType=this.state.inType;this.state.inType=true;const type=this.flowParseUnionType();this.state.inType=oldInType;return type;}flowParseTypeOrImplicitInstantiation(){if(this.state.type===132&&this.state.value===\"_\"){const startLoc=this.state.startLoc;const node=this.parseIdentifier();return this.flowParseGenericType(startLoc,node);}else{return this.flowParseType();}}flowParseTypeAnnotation(){const node=this.startNode();node.typeAnnotation=this.flowParseTypeInitialiser();return this.finishNode(node,\"TypeAnnotation\");}flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride){const ident=allowPrimitiveOverride?this.parseIdentifier():this.flowParseRestrictedIdentifier();if(this.match(14)){ident.typeAnnotation=this.flowParseTypeAnnotation();this.resetEndLocation(ident);}return ident;}typeCastToParameter(node){node.expression.typeAnnotation=node.typeAnnotation;this.resetEndLocation(node.expression,node.typeAnnotation.loc.end);return node.expression;}flowParseVariance(){let variance=null;if(this.match(53)){variance=this.startNode();if(this.state.value===\"+\"){variance.kind=\"plus\";}else{variance.kind=\"minus\";}this.next();return this.finishNode(variance,\"Variance\");}return variance;}parseFunctionBody(node,allowExpressionBody,isMethod=false){if(allowExpressionBody){this.forwardNoArrowParamsConversionAt(node,()=>super.parseFunctionBody(node,true,isMethod));return;}super.parseFunctionBody(node,false,isMethod);}parseFunctionBodyAndFinish(node,type,isMethod=false){if(this.match(14)){const typeNode=this.startNode();[typeNode.typeAnnotation,node.predicate]=this.flowParseTypeAndPredicateInitialiser();node.returnType=typeNode.typeAnnotation?this.finishNode(typeNode,\"TypeAnnotation\"):null;}return super.parseFunctionBodyAndFinish(node,type,isMethod);}parseStatementLike(flags){if(this.state.strict&&this.isContextual(129)){const lookahead=this.lookahead();if(tokenIsKeywordOrIdentifier(lookahead.type)){const node=this.startNode();this.next();return this.flowParseInterface(node);}}else if(this.isContextual(126)){const node=this.startNode();this.next();return this.flowParseEnumDeclaration(node);}const stmt=super.parseStatementLike(flags);if(this.flowPragma===undefined&&!this.isValidDirective(stmt)){this.flowPragma=null;}return stmt;}parseExpressionStatement(node,expr,decorators){if(expr.type===\"Identifier\"){if(expr.name===\"declare\"){if(this.match(80)||tokenIsIdentifier(this.state.type)||this.match(68)||this.match(74)||this.match(82)){return this.flowParseDeclare(node);}}else if(tokenIsIdentifier(this.state.type)){if(expr.name===\"interface\"){return this.flowParseInterface(node);}else if(expr.name===\"type\"){return this.flowParseTypeAlias(node);}else if(expr.name===\"opaque\"){return this.flowParseOpaqueType(node,false);}}}return super.parseExpressionStatement(node,expr,decorators);}shouldParseExportDeclaration(){const{type}=this.state;if(type===126||tokenIsFlowInterfaceOrTypeOrOpaque(type)){return!this.state.containsEsc;}return super.shouldParseExportDeclaration();}isExportDefaultSpecifier(){const{type}=this.state;if(type===126||tokenIsFlowInterfaceOrTypeOrOpaque(type)){return this.state.containsEsc;}return super.isExportDefaultSpecifier();}parseExportDefaultExpression(){if(this.isContextual(126)){const node=this.startNode();this.next();return this.flowParseEnumDeclaration(node);}return super.parseExportDefaultExpression();}parseConditional(expr,startLoc,refExpressionErrors){if(!this.match(17))return expr;if(this.state.maybeInArrowParameters){const nextCh=this.lookaheadCharCode();if(nextCh===44||nextCh===61||nextCh===58||nextCh===41){this.setOptionalParametersError(refExpressionErrors);return expr;}}this.expect(17);const state=this.state.clone();const originalNoArrowAt=this.state.noArrowAt;const node=this.startNodeAt(startLoc);let{consequent,failed}=this.tryParseConditionalConsequent();let[valid,invalid]=this.getArrowLikeExpressions(consequent);if(failed||invalid.length>0){const noArrowAt=[...originalNoArrowAt];if(invalid.length>0){this.state=state;this.state.noArrowAt=noArrowAt;for(let i=0;i<invalid.length;i++){noArrowAt.push(invalid[i].start);}({consequent,failed}=this.tryParseConditionalConsequent());[valid,invalid]=this.getArrowLikeExpressions(consequent);}if(failed&&valid.length>1){this.raise(FlowErrors.AmbiguousConditionalArrow,state.startLoc);}if(failed&&valid.length===1){this.state=state;noArrowAt.push(valid[0].start);this.state.noArrowAt=noArrowAt;({consequent,failed}=this.tryParseConditionalConsequent());}}this.getArrowLikeExpressions(consequent,true);this.state.noArrowAt=originalNoArrowAt;this.expect(14);node.test=expr;node.consequent=consequent;node.alternate=this.forwardNoArrowParamsConversionAt(node,()=>this.parseMaybeAssign(undefined,undefined));return this.finishNode(node,\"ConditionalExpression\");}tryParseConditionalConsequent(){this.state.noArrowParamsConversionAt.push(this.state.start);const consequent=this.parseMaybeAssignAllowIn();const failed=!this.match(14);this.state.noArrowParamsConversionAt.pop();return{consequent,failed};}getArrowLikeExpressions(node,disallowInvalid){const stack=[node];const arrows=[];while(stack.length!==0){const node=stack.pop();if(node.type===\"ArrowFunctionExpression\"&&node.body.type!==\"BlockStatement\"){if(node.typeParameters||!node.returnType){this.finishArrowValidation(node);}else{arrows.push(node);}stack.push(node.body);}else if(node.type===\"ConditionalExpression\"){stack.push(node.consequent);stack.push(node.alternate);}}if(disallowInvalid){arrows.forEach(node=>this.finishArrowValidation(node));return[arrows,[]];}return partition(arrows,node=>node.params.every(param=>this.isAssignable(param,true)));}finishArrowValidation(node){var _node$extra;this.toAssignableList(node.params,(_node$extra=node.extra)==null?void 0:_node$extra.trailingCommaLoc,false);this.scope.enter(2|4);super.checkParams(node,false,true);this.scope.exit();}forwardNoArrowParamsConversionAt(node,parse){let result;if(this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))){this.state.noArrowParamsConversionAt.push(this.state.start);result=parse();this.state.noArrowParamsConversionAt.pop();}else{result=parse();}return result;}parseParenItem(node,startLoc){const newNode=super.parseParenItem(node,startLoc);if(this.eat(17)){newNode.optional=true;this.resetEndLocation(node);}if(this.match(14)){const typeCastNode=this.startNodeAt(startLoc);typeCastNode.expression=newNode;typeCastNode.typeAnnotation=this.flowParseTypeAnnotation();return this.finishNode(typeCastNode,\"TypeCastExpression\");}return newNode;}assertModuleNodeAllowed(node){if(node.type===\"ImportDeclaration\"&&(node.importKind===\"type\"||node.importKind===\"typeof\")||node.type===\"ExportNamedDeclaration\"&&node.exportKind===\"type\"||node.type===\"ExportAllDeclaration\"&&node.exportKind===\"type\"){return;}super.assertModuleNodeAllowed(node);}parseExportDeclaration(node){if(this.isContextual(130)){node.exportKind=\"type\";const declarationNode=this.startNode();this.next();if(this.match(5)){node.specifiers=this.parseExportSpecifiers(true);super.parseExportFrom(node);return null;}else{return this.flowParseTypeAlias(declarationNode);}}else if(this.isContextual(131)){node.exportKind=\"type\";const declarationNode=this.startNode();this.next();return this.flowParseOpaqueType(declarationNode,false);}else if(this.isContextual(129)){node.exportKind=\"type\";const declarationNode=this.startNode();this.next();return this.flowParseInterface(declarationNode);}else if(this.isContextual(126)){node.exportKind=\"value\";const declarationNode=this.startNode();this.next();return this.flowParseEnumDeclaration(declarationNode);}else{return super.parseExportDeclaration(node);}}eatExportStar(node){if(super.eatExportStar(node))return true;if(this.isContextual(130)&&this.lookahead().type===55){node.exportKind=\"type\";this.next();this.next();return true;}return false;}maybeParseExportNamespaceSpecifier(node){const{startLoc}=this.state;const hasNamespace=super.maybeParseExportNamespaceSpecifier(node);if(hasNamespace&&node.exportKind===\"type\"){this.unexpected(startLoc);}return hasNamespace;}parseClassId(node,isStatement,optionalId){super.parseClassId(node,isStatement,optionalId);if(this.match(47)){node.typeParameters=this.flowParseTypeParameterDeclaration();}}parseClassMember(classBody,member,state){const{startLoc}=this.state;if(this.isContextual(125)){if(super.parseClassMemberFromModifier(classBody,member)){return;}member.declare=true;}super.parseClassMember(classBody,member,state);if(member.declare){if(member.type!==\"ClassProperty\"&&member.type!==\"ClassPrivateProperty\"&&member.type!==\"PropertyDefinition\"){this.raise(FlowErrors.DeclareClassElement,startLoc);}else if(member.value){this.raise(FlowErrors.DeclareClassFieldInitializer,member.value);}}}isIterator(word){return word===\"iterator\"||word===\"asyncIterator\";}readIterator(){const word=super.readWord1();const fullWord=\"@@\"+word;if(!this.isIterator(word)||!this.state.inType){this.raise(Errors.InvalidIdentifier,this.state.curPosition(),{identifierName:fullWord});}this.finishToken(132,fullWord);}getTokenFromCode(code){const next=this.input.charCodeAt(this.state.pos+1);if(code===123&&next===124){this.finishOp(6,2);}else if(this.state.inType&&(code===62||code===60)){this.finishOp(code===62?48:47,1);}else if(this.state.inType&&code===63){if(next===46){this.finishOp(18,2);}else{this.finishOp(17,1);}}else if(isIteratorStart(code,next,this.input.charCodeAt(this.state.pos+2))){this.state.pos+=2;this.readIterator();}else{super.getTokenFromCode(code);}}isAssignable(node,isBinding){if(node.type===\"TypeCastExpression\"){return this.isAssignable(node.expression,isBinding);}else{return super.isAssignable(node,isBinding);}}toAssignable(node,isLHS=false){if(!isLHS&&node.type===\"AssignmentExpression\"&&node.left.type===\"TypeCastExpression\"){node.left=this.typeCastToParameter(node.left);}super.toAssignable(node,isLHS);}toAssignableList(exprList,trailingCommaLoc,isLHS){for(let i=0;i<exprList.length;i++){const expr=exprList[i];if((expr==null?void 0:expr.type)===\"TypeCastExpression\"){exprList[i]=this.typeCastToParameter(expr);}}super.toAssignableList(exprList,trailingCommaLoc,isLHS);}toReferencedList(exprList,isParenthesizedExpr){for(let i=0;i<exprList.length;i++){var _expr$extra;const expr=exprList[i];if(expr&&expr.type===\"TypeCastExpression\"&&!((_expr$extra=expr.extra)!=null&&_expr$extra.parenthesized)&&(exprList.length>1||!isParenthesizedExpr)){this.raise(FlowErrors.TypeCastInPattern,expr.typeAnnotation);}}return exprList;}parseArrayLike(close,canBePattern,isTuple,refExpressionErrors){const node=super.parseArrayLike(close,canBePattern,isTuple,refExpressionErrors);if(canBePattern&&!this.state.maybeInArrowParameters){this.toReferencedList(node.elements);}return node;}isValidLVal(type,isParenthesized,binding){return type===\"TypeCastExpression\"||super.isValidLVal(type,isParenthesized,binding);}parseClassProperty(node){if(this.match(14)){node.typeAnnotation=this.flowParseTypeAnnotation();}return super.parseClassProperty(node);}parseClassPrivateProperty(node){if(this.match(14)){node.typeAnnotation=this.flowParseTypeAnnotation();}return super.parseClassPrivateProperty(node);}isClassMethod(){return this.match(47)||super.isClassMethod();}isClassProperty(){return this.match(14)||super.isClassProperty();}isNonstaticConstructor(method){return!this.match(14)&&super.isNonstaticConstructor(method);}pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper){if(method.variance){this.unexpected(method.variance.loc.start);}delete method.variance;if(this.match(47)){method.typeParameters=this.flowParseTypeParameterDeclaration();}super.pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper);if(method.params&&isConstructor){const params=method.params;if(params.length>0&&this.isThisParam(params[0])){this.raise(FlowErrors.ThisParamBannedInConstructor,method);}}else if(method.type===\"MethodDefinition\"&&isConstructor&&method.value.params){const params=method.value.params;if(params.length>0&&this.isThisParam(params[0])){this.raise(FlowErrors.ThisParamBannedInConstructor,method);}}}pushClassPrivateMethod(classBody,method,isGenerator,isAsync){if(method.variance){this.unexpected(method.variance.loc.start);}delete method.variance;if(this.match(47)){method.typeParameters=this.flowParseTypeParameterDeclaration();}super.pushClassPrivateMethod(classBody,method,isGenerator,isAsync);}parseClassSuper(node){super.parseClassSuper(node);if(node.superClass&&(this.match(47)||this.match(51))){{node.superTypeParameters=this.flowParseTypeParameterInstantiationInExpression();}}if(this.isContextual(113)){this.next();const implemented=node.implements=[];do{const node=this.startNode();node.id=this.flowParseRestrictedIdentifier(true);if(this.match(47)){node.typeParameters=this.flowParseTypeParameterInstantiation();}else{node.typeParameters=null;}implemented.push(this.finishNode(node,\"ClassImplements\"));}while(this.eat(12));}}checkGetterSetterParams(method){super.checkGetterSetterParams(method);const params=this.getObjectOrClassMethodParams(method);if(params.length>0){const param=params[0];if(this.isThisParam(param)&&method.kind===\"get\"){this.raise(FlowErrors.GetterMayNotHaveThisParam,param);}else if(this.isThisParam(param)){this.raise(FlowErrors.SetterMayNotHaveThisParam,param);}}}parsePropertyNamePrefixOperator(node){node.variance=this.flowParseVariance();}parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors){if(prop.variance){this.unexpected(prop.variance.loc.start);}delete prop.variance;let typeParameters;if(this.match(47)&&!isAccessor){typeParameters=this.flowParseTypeParameterDeclaration();if(!this.match(10))this.unexpected();}const result=super.parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors);if(typeParameters){(result.value||result).typeParameters=typeParameters;}return result;}parseFunctionParamType(param){if(this.eat(17)){if(param.type!==\"Identifier\"){this.raise(FlowErrors.PatternIsOptional,param);}if(this.isThisParam(param)){this.raise(FlowErrors.ThisParamMayNotBeOptional,param);}param.optional=true;}if(this.match(14)){param.typeAnnotation=this.flowParseTypeAnnotation();}else if(this.isThisParam(param)){this.raise(FlowErrors.ThisParamAnnotationRequired,param);}if(this.match(29)&&this.isThisParam(param)){this.raise(FlowErrors.ThisParamNoDefault,param);}this.resetEndLocation(param);return param;}parseMaybeDefault(startLoc,left){const node=super.parseMaybeDefault(startLoc,left);if(node.type===\"AssignmentPattern\"&&node.typeAnnotation&&node.right.start<node.typeAnnotation.start){this.raise(FlowErrors.TypeBeforeInitializer,node.typeAnnotation);}return node;}checkImportReflection(node){super.checkImportReflection(node);if(node.module&&node.importKind!==\"value\"){this.raise(FlowErrors.ImportReflectionHasImportType,node.specifiers[0].loc.start);}}parseImportSpecifierLocal(node,specifier,type){specifier.local=hasTypeImportKind(node)?this.flowParseRestrictedIdentifier(true,true):this.parseIdentifier();node.specifiers.push(this.finishImportSpecifier(specifier,type));}isPotentialImportPhase(isExport){if(super.isPotentialImportPhase(isExport))return true;if(this.isContextual(130)){if(!isExport)return true;const ch=this.lookaheadCharCode();return ch===123||ch===42;}return!isExport&&this.isContextual(87);}applyImportPhase(node,isExport,phase,loc){super.applyImportPhase(node,isExport,phase,loc);if(isExport){if(!phase&&this.match(65)){return;}node.exportKind=phase===\"type\"?phase:\"value\";}else{if(phase===\"type\"&&this.match(55))this.unexpected();node.importKind=phase===\"type\"||phase===\"typeof\"?phase:\"value\";}}parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,bindingType){const firstIdent=specifier.imported;let specifierTypeKind=null;if(firstIdent.type===\"Identifier\"){if(firstIdent.name===\"type\"){specifierTypeKind=\"type\";}else if(firstIdent.name===\"typeof\"){specifierTypeKind=\"typeof\";}}let isBinding=false;if(this.isContextual(93)&&!this.isLookaheadContextual(\"as\")){const as_ident=this.parseIdentifier(true);if(specifierTypeKind!==null&&!tokenIsKeywordOrIdentifier(this.state.type)){specifier.imported=as_ident;specifier.importKind=specifierTypeKind;specifier.local=this.cloneIdentifier(as_ident);}else{specifier.imported=firstIdent;specifier.importKind=null;specifier.local=this.parseIdentifier();}}else{if(specifierTypeKind!==null&&tokenIsKeywordOrIdentifier(this.state.type)){specifier.imported=this.parseIdentifier(true);specifier.importKind=specifierTypeKind;}else{if(importedIsString){throw this.raise(Errors.ImportBindingIsString,specifier,{importName:firstIdent.value});}specifier.imported=firstIdent;specifier.importKind=null;}if(this.eatContextual(93)){specifier.local=this.parseIdentifier();}else{isBinding=true;specifier.local=this.cloneIdentifier(specifier.imported);}}const specifierIsTypeImport=hasTypeImportKind(specifier);if(isInTypeOnlyImport&&specifierIsTypeImport){this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport,specifier);}if(isInTypeOnlyImport||specifierIsTypeImport){this.checkReservedType(specifier.local.name,specifier.local.loc.start,true);}if(isBinding&&!isInTypeOnlyImport&&!specifierIsTypeImport){this.checkReservedWord(specifier.local.name,specifier.loc.start,true,true);}return this.finishImportSpecifier(specifier,\"ImportSpecifier\");}parseBindingAtom(){switch(this.state.type){case 78:return this.parseIdentifier(true);default:return super.parseBindingAtom();}}parseFunctionParams(node,isConstructor){const kind=node.kind;if(kind!==\"get\"&&kind!==\"set\"&&this.match(47)){node.typeParameters=this.flowParseTypeParameterDeclaration();}super.parseFunctionParams(node,isConstructor);}parseVarId(decl,kind){super.parseVarId(decl,kind);if(this.match(14)){decl.id.typeAnnotation=this.flowParseTypeAnnotation();this.resetEndLocation(decl.id);}}parseAsyncArrowFromCallExpression(node,call){if(this.match(14)){const oldNoAnonFunctionType=this.state.noAnonFunctionType;this.state.noAnonFunctionType=true;node.returnType=this.flowParseTypeAnnotation();this.state.noAnonFunctionType=oldNoAnonFunctionType;}return super.parseAsyncArrowFromCallExpression(node,call);}shouldParseAsyncArrow(){return this.match(14)||super.shouldParseAsyncArrow();}parseMaybeAssign(refExpressionErrors,afterLeftParse){var _jsx;let state=null;let jsx;if(this.hasPlugin(\"jsx\")&&(this.match(143)||this.match(47))){state=this.state.clone();jsx=this.tryParse(()=>super.parseMaybeAssign(refExpressionErrors,afterLeftParse),state);if(!jsx.error)return jsx.node;const{context}=this.state;const currentContext=context[context.length-1];if(currentContext===types.j_oTag||currentContext===types.j_expr){context.pop();}}if((_jsx=jsx)!=null&&_jsx.error||this.match(47)){var _jsx2,_jsx3;state=state||this.state.clone();let typeParameters;const arrow=this.tryParse(abort=>{var _arrowExpression$extr;typeParameters=this.flowParseTypeParameterDeclaration();const arrowExpression=this.forwardNoArrowParamsConversionAt(typeParameters,()=>{const result=super.parseMaybeAssign(refExpressionErrors,afterLeftParse);this.resetStartLocationFromNode(result,typeParameters);return result;});if((_arrowExpression$extr=arrowExpression.extra)!=null&&_arrowExpression$extr.parenthesized)abort();const expr=this.maybeUnwrapTypeCastExpression(arrowExpression);if(expr.type!==\"ArrowFunctionExpression\")abort();expr.typeParameters=typeParameters;this.resetStartLocationFromNode(expr,typeParameters);return arrowExpression;},state);let arrowExpression=null;if(arrow.node&&this.maybeUnwrapTypeCastExpression(arrow.node).type===\"ArrowFunctionExpression\"){if(!arrow.error&&!arrow.aborted){if(arrow.node.async){this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,typeParameters);}return arrow.node;}arrowExpression=arrow.node;}if((_jsx2=jsx)!=null&&_jsx2.node){this.state=jsx.failState;return jsx.node;}if(arrowExpression){this.state=arrow.failState;return arrowExpression;}if((_jsx3=jsx)!=null&&_jsx3.thrown)throw jsx.error;if(arrow.thrown)throw arrow.error;throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter,typeParameters);}return super.parseMaybeAssign(refExpressionErrors,afterLeftParse);}parseArrow(node){if(this.match(14)){const result=this.tryParse(()=>{const oldNoAnonFunctionType=this.state.noAnonFunctionType;this.state.noAnonFunctionType=true;const typeNode=this.startNode();[typeNode.typeAnnotation,node.predicate]=this.flowParseTypeAndPredicateInitialiser();this.state.noAnonFunctionType=oldNoAnonFunctionType;if(this.canInsertSemicolon())this.unexpected();if(!this.match(19))this.unexpected();return typeNode;});if(result.thrown)return null;if(result.error)this.state=result.failState;node.returnType=result.node.typeAnnotation?this.finishNode(result.node,\"TypeAnnotation\"):null;}return super.parseArrow(node);}shouldParseArrow(params){return this.match(14)||super.shouldParseArrow(params);}setArrowFunctionParameters(node,params){if(this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))){node.params=params;}else{super.setArrowFunctionParameters(node,params);}}checkParams(node,allowDuplicates,isArrowFunction,strictModeChanged=true){if(isArrowFunction&&this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))){return;}for(let i=0;i<node.params.length;i++){if(this.isThisParam(node.params[i])&&i>0){this.raise(FlowErrors.ThisParamMustBeFirst,node.params[i]);}}super.checkParams(node,allowDuplicates,isArrowFunction,strictModeChanged);}parseParenAndDistinguishExpression(canBeArrow){return super.parseParenAndDistinguishExpression(canBeArrow&&!this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));}parseSubscripts(base,startLoc,noCalls){if(base.type===\"Identifier\"&&base.name===\"async\"&&this.state.noArrowAt.includes(startLoc.index)){this.next();const node=this.startNodeAt(startLoc);node.callee=base;node.arguments=super.parseCallExpressionArguments(11);base=this.finishNode(node,\"CallExpression\");}else if(base.type===\"Identifier\"&&base.name===\"async\"&&this.match(47)){const state=this.state.clone();const arrow=this.tryParse(abort=>this.parseAsyncArrowWithTypeParameters(startLoc)||abort(),state);if(!arrow.error&&!arrow.aborted)return arrow.node;const result=this.tryParse(()=>super.parseSubscripts(base,startLoc,noCalls),state);if(result.node&&!result.error)return result.node;if(arrow.node){this.state=arrow.failState;return arrow.node;}if(result.node){this.state=result.failState;return result.node;}throw arrow.error||result.error;}return super.parseSubscripts(base,startLoc,noCalls);}parseSubscript(base,startLoc,noCalls,subscriptState){if(this.match(18)&&this.isLookaheadToken_lt()){subscriptState.optionalChainMember=true;if(noCalls){subscriptState.stop=true;return base;}this.next();const node=this.startNodeAt(startLoc);node.callee=base;node.typeArguments=this.flowParseTypeParameterInstantiationInExpression();this.expect(10);node.arguments=this.parseCallExpressionArguments(11);node.optional=true;return this.finishCallExpression(node,true);}else if(!noCalls&&this.shouldParseTypes()&&(this.match(47)||this.match(51))){const node=this.startNodeAt(startLoc);node.callee=base;const result=this.tryParse(()=>{node.typeArguments=this.flowParseTypeParameterInstantiationCallOrNew();this.expect(10);node.arguments=super.parseCallExpressionArguments(11);if(subscriptState.optionalChainMember){node.optional=false;}return this.finishCallExpression(node,subscriptState.optionalChainMember);});if(result.node){if(result.error)this.state=result.failState;return result.node;}}return super.parseSubscript(base,startLoc,noCalls,subscriptState);}parseNewCallee(node){super.parseNewCallee(node);let targs=null;if(this.shouldParseTypes()&&this.match(47)){targs=this.tryParse(()=>this.flowParseTypeParameterInstantiationCallOrNew()).node;}node.typeArguments=targs;}parseAsyncArrowWithTypeParameters(startLoc){const node=this.startNodeAt(startLoc);this.parseFunctionParams(node,false);if(!this.parseArrow(node))return;return super.parseArrowExpression(node,undefined,true);}readToken_mult_modulo(code){const next=this.input.charCodeAt(this.state.pos+1);if(code===42&&next===47&&this.state.hasFlowComment){this.state.hasFlowComment=false;this.state.pos+=2;this.nextToken();return;}super.readToken_mult_modulo(code);}readToken_pipe_amp(code){const next=this.input.charCodeAt(this.state.pos+1);if(code===124&&next===125){this.finishOp(9,2);return;}super.readToken_pipe_amp(code);}parseTopLevel(file,program){const fileNode=super.parseTopLevel(file,program);if(this.state.hasFlowComment){this.raise(FlowErrors.UnterminatedFlowComment,this.state.curPosition());}return fileNode;}skipBlockComment(){if(this.hasPlugin(\"flowComments\")&&this.skipFlowComment()){if(this.state.hasFlowComment){throw this.raise(FlowErrors.NestedFlowComment,this.state.startLoc);}this.hasFlowCommentCompletion();const commentSkip=this.skipFlowComment();if(commentSkip){this.state.pos+=commentSkip;this.state.hasFlowComment=true;}return;}return super.skipBlockComment(this.state.hasFlowComment?\"*-/\":\"*/\");}skipFlowComment(){const{pos}=this.state;let shiftToFirstNonWhiteSpace=2;while([32,9].includes(this.input.charCodeAt(pos+shiftToFirstNonWhiteSpace))){shiftToFirstNonWhiteSpace++;}const ch2=this.input.charCodeAt(shiftToFirstNonWhiteSpace+pos);const ch3=this.input.charCodeAt(shiftToFirstNonWhiteSpace+pos+1);if(ch2===58&&ch3===58){return shiftToFirstNonWhiteSpace+2;}if(this.input.slice(shiftToFirstNonWhiteSpace+pos,shiftToFirstNonWhiteSpace+pos+12)===\"flow-include\"){return shiftToFirstNonWhiteSpace+12;}if(ch2===58&&ch3!==58){return shiftToFirstNonWhiteSpace;}return false;}hasFlowCommentCompletion(){const end=this.input.indexOf(\"*/\",this.state.pos);if(end===-1){throw this.raise(Errors.UnterminatedComment,this.state.curPosition());}}flowEnumErrorBooleanMemberNotInitialized(loc,{enumName,memberName}){this.raise(FlowErrors.EnumBooleanMemberNotInitialized,loc,{memberName,enumName});}flowEnumErrorInvalidMemberInitializer(loc,enumContext){return this.raise(!enumContext.explicitType?FlowErrors.EnumInvalidMemberInitializerUnknownType:enumContext.explicitType===\"symbol\"?FlowErrors.EnumInvalidMemberInitializerSymbolType:FlowErrors.EnumInvalidMemberInitializerPrimaryType,loc,enumContext);}flowEnumErrorNumberMemberNotInitialized(loc,details){this.raise(FlowErrors.EnumNumberMemberNotInitialized,loc,details);}flowEnumErrorStringMemberInconsistentlyInitialized(node,details){this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized,node,details);}flowEnumMemberInit(){const startLoc=this.state.startLoc;const endOfInit=()=>this.match(12)||this.match(8);switch(this.state.type){case 135:{const literal=this.parseNumericLiteral(this.state.value);if(endOfInit()){return{type:\"number\",loc:literal.loc.start,value:literal};}return{type:\"invalid\",loc:startLoc};}case 134:{const literal=this.parseStringLiteral(this.state.value);if(endOfInit()){return{type:\"string\",loc:literal.loc.start,value:literal};}return{type:\"invalid\",loc:startLoc};}case 85:case 86:{const literal=this.parseBooleanLiteral(this.match(85));if(endOfInit()){return{type:\"boolean\",loc:literal.loc.start,value:literal};}return{type:\"invalid\",loc:startLoc};}default:return{type:\"invalid\",loc:startLoc};}}flowEnumMemberRaw(){const loc=this.state.startLoc;const id=this.parseIdentifier(true);const init=this.eat(29)?this.flowEnumMemberInit():{type:\"none\",loc};return{id,init};}flowEnumCheckExplicitTypeMismatch(loc,context,expectedType){const{explicitType}=context;if(explicitType===null){return;}if(explicitType!==expectedType){this.flowEnumErrorInvalidMemberInitializer(loc,context);}}flowEnumMembers({enumName,explicitType}){const seenNames=new Set();const members={booleanMembers:[],numberMembers:[],stringMembers:[],defaultedMembers:[]};let hasUnknownMembers=false;while(!this.match(8)){if(this.eat(21)){hasUnknownMembers=true;break;}const memberNode=this.startNode();const{id,init}=this.flowEnumMemberRaw();const memberName=id.name;if(memberName===\"\"){continue;}if(/^[a-z]/.test(memberName)){this.raise(FlowErrors.EnumInvalidMemberName,id,{memberName,suggestion:memberName[0].toUpperCase()+memberName.slice(1),enumName});}if(seenNames.has(memberName)){this.raise(FlowErrors.EnumDuplicateMemberName,id,{memberName,enumName});}seenNames.add(memberName);const context={enumName,explicitType,memberName};memberNode.id=id;switch(init.type){case\"boolean\":{this.flowEnumCheckExplicitTypeMismatch(init.loc,context,\"boolean\");memberNode.init=init.value;members.booleanMembers.push(this.finishNode(memberNode,\"EnumBooleanMember\"));break;}case\"number\":{this.flowEnumCheckExplicitTypeMismatch(init.loc,context,\"number\");memberNode.init=init.value;members.numberMembers.push(this.finishNode(memberNode,\"EnumNumberMember\"));break;}case\"string\":{this.flowEnumCheckExplicitTypeMismatch(init.loc,context,\"string\");memberNode.init=init.value;members.stringMembers.push(this.finishNode(memberNode,\"EnumStringMember\"));break;}case\"invalid\":{throw this.flowEnumErrorInvalidMemberInitializer(init.loc,context);}case\"none\":{switch(explicitType){case\"boolean\":this.flowEnumErrorBooleanMemberNotInitialized(init.loc,context);break;case\"number\":this.flowEnumErrorNumberMemberNotInitialized(init.loc,context);break;default:members.defaultedMembers.push(this.finishNode(memberNode,\"EnumDefaultedMember\"));}}}if(!this.match(8)){this.expect(12);}}return{members,hasUnknownMembers};}flowEnumStringMembers(initializedMembers,defaultedMembers,{enumName}){if(initializedMembers.length===0){return defaultedMembers;}else if(defaultedMembers.length===0){return initializedMembers;}else if(defaultedMembers.length>initializedMembers.length){for(const member of initializedMembers){this.flowEnumErrorStringMemberInconsistentlyInitialized(member,{enumName});}return defaultedMembers;}else{for(const member of defaultedMembers){this.flowEnumErrorStringMemberInconsistentlyInitialized(member,{enumName});}return initializedMembers;}}flowEnumParseExplicitType({enumName}){if(!this.eatContextual(102))return null;if(!tokenIsIdentifier(this.state.type)){throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,this.state.startLoc,{enumName});}const{value}=this.state;this.next();if(value!==\"boolean\"&&value!==\"number\"&&value!==\"string\"&&value!==\"symbol\"){this.raise(FlowErrors.EnumInvalidExplicitType,this.state.startLoc,{enumName,invalidEnumType:value});}return value;}flowEnumBody(node,id){const enumName=id.name;const nameLoc=id.loc.start;const explicitType=this.flowEnumParseExplicitType({enumName});this.expect(5);const{members,hasUnknownMembers}=this.flowEnumMembers({enumName,explicitType});node.hasUnknownMembers=hasUnknownMembers;switch(explicitType){case\"boolean\":node.explicitType=true;node.members=members.booleanMembers;this.expect(8);return this.finishNode(node,\"EnumBooleanBody\");case\"number\":node.explicitType=true;node.members=members.numberMembers;this.expect(8);return this.finishNode(node,\"EnumNumberBody\");case\"string\":node.explicitType=true;node.members=this.flowEnumStringMembers(members.stringMembers,members.defaultedMembers,{enumName});this.expect(8);return this.finishNode(node,\"EnumStringBody\");case\"symbol\":node.members=members.defaultedMembers;this.expect(8);return this.finishNode(node,\"EnumSymbolBody\");default:{const empty=()=>{node.members=[];this.expect(8);return this.finishNode(node,\"EnumStringBody\");};node.explicitType=false;const boolsLen=members.booleanMembers.length;const numsLen=members.numberMembers.length;const strsLen=members.stringMembers.length;const defaultedLen=members.defaultedMembers.length;if(!boolsLen&&!numsLen&&!strsLen&&!defaultedLen){return empty();}else if(!boolsLen&&!numsLen){node.members=this.flowEnumStringMembers(members.stringMembers,members.defaultedMembers,{enumName});this.expect(8);return this.finishNode(node,\"EnumStringBody\");}else if(!numsLen&&!strsLen&&boolsLen>=defaultedLen){for(const member of members.defaultedMembers){this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start,{enumName,memberName:member.id.name});}node.members=members.booleanMembers;this.expect(8);return this.finishNode(node,\"EnumBooleanBody\");}else if(!boolsLen&&!strsLen&&numsLen>=defaultedLen){for(const member of members.defaultedMembers){this.flowEnumErrorNumberMemberNotInitialized(member.loc.start,{enumName,memberName:member.id.name});}node.members=members.numberMembers;this.expect(8);return this.finishNode(node,\"EnumNumberBody\");}else{this.raise(FlowErrors.EnumInconsistentMemberValues,nameLoc,{enumName});return empty();}}}}flowParseEnumDeclaration(node){const id=this.parseIdentifier();node.id=id;node.body=this.flowEnumBody(this.startNode(),id);return this.finishNode(node,\"EnumDeclaration\");}jsxParseOpeningElementAfterName(node){if(this.shouldParseTypes()){if(this.match(47)||this.match(51)){node.typeArguments=this.flowParseTypeParameterInstantiationInExpression();}}return super.jsxParseOpeningElementAfterName(node);}isLookaheadToken_lt(){const next=this.nextTokenStart();if(this.input.charCodeAt(next)===60){const afterNext=this.input.charCodeAt(next+1);return afterNext!==60&&afterNext!==61;}return false;}reScan_lt_gt(){const{type}=this.state;if(type===47){this.state.pos-=1;this.readToken_lt();}else if(type===48){this.state.pos-=1;this.readToken_gt();}}reScan_lt(){const{type}=this.state;if(type===51){this.state.pos-=2;this.finishOp(47,1);return 47;}return type;}maybeUnwrapTypeCastExpression(node){return node.type===\"TypeCastExpression\"?node.expression:node;}};const entities={__proto__:null,quot:\"\\u0022\",amp:\"&\",apos:\"\\u0027\",lt:\"<\",gt:\">\",nbsp:\"\\u00A0\",iexcl:\"\\u00A1\",cent:\"\\u00A2\",pound:\"\\u00A3\",curren:\"\\u00A4\",yen:\"\\u00A5\",brvbar:\"\\u00A6\",sect:\"\\u00A7\",uml:\"\\u00A8\",copy:\"\\u00A9\",ordf:\"\\u00AA\",laquo:\"\\u00AB\",not:\"\\u00AC\",shy:\"\\u00AD\",reg:\"\\u00AE\",macr:\"\\u00AF\",deg:\"\\u00B0\",plusmn:\"\\u00B1\",sup2:\"\\u00B2\",sup3:\"\\u00B3\",acute:\"\\u00B4\",micro:\"\\u00B5\",para:\"\\u00B6\",middot:\"\\u00B7\",cedil:\"\\u00B8\",sup1:\"\\u00B9\",ordm:\"\\u00BA\",raquo:\"\\u00BB\",frac14:\"\\u00BC\",frac12:\"\\u00BD\",frac34:\"\\u00BE\",iquest:\"\\u00BF\",Agrave:\"\\u00C0\",Aacute:\"\\u00C1\",Acirc:\"\\u00C2\",Atilde:\"\\u00C3\",Auml:\"\\u00C4\",Aring:\"\\u00C5\",AElig:\"\\u00C6\",Ccedil:\"\\u00C7\",Egrave:\"\\u00C8\",Eacute:\"\\u00C9\",Ecirc:\"\\u00CA\",Euml:\"\\u00CB\",Igrave:\"\\u00CC\",Iacute:\"\\u00CD\",Icirc:\"\\u00CE\",Iuml:\"\\u00CF\",ETH:\"\\u00D0\",Ntilde:\"\\u00D1\",Ograve:\"\\u00D2\",Oacute:\"\\u00D3\",Ocirc:\"\\u00D4\",Otilde:\"\\u00D5\",Ouml:\"\\u00D6\",times:\"\\u00D7\",Oslash:\"\\u00D8\",Ugrave:\"\\u00D9\",Uacute:\"\\u00DA\",Ucirc:\"\\u00DB\",Uuml:\"\\u00DC\",Yacute:\"\\u00DD\",THORN:\"\\u00DE\",szlig:\"\\u00DF\",agrave:\"\\u00E0\",aacute:\"\\u00E1\",acirc:\"\\u00E2\",atilde:\"\\u00E3\",auml:\"\\u00E4\",aring:\"\\u00E5\",aelig:\"\\u00E6\",ccedil:\"\\u00E7\",egrave:\"\\u00E8\",eacute:\"\\u00E9\",ecirc:\"\\u00EA\",euml:\"\\u00EB\",igrave:\"\\u00EC\",iacute:\"\\u00ED\",icirc:\"\\u00EE\",iuml:\"\\u00EF\",eth:\"\\u00F0\",ntilde:\"\\u00F1\",ograve:\"\\u00F2\",oacute:\"\\u00F3\",ocirc:\"\\u00F4\",otilde:\"\\u00F5\",ouml:\"\\u00F6\",divide:\"\\u00F7\",oslash:\"\\u00F8\",ugrave:\"\\u00F9\",uacute:\"\\u00FA\",ucirc:\"\\u00FB\",uuml:\"\\u00FC\",yacute:\"\\u00FD\",thorn:\"\\u00FE\",yuml:\"\\u00FF\",OElig:\"\\u0152\",oelig:\"\\u0153\",Scaron:\"\\u0160\",scaron:\"\\u0161\",Yuml:\"\\u0178\",fnof:\"\\u0192\",circ:\"\\u02C6\",tilde:\"\\u02DC\",Alpha:\"\\u0391\",Beta:\"\\u0392\",Gamma:\"\\u0393\",Delta:\"\\u0394\",Epsilon:\"\\u0395\",Zeta:\"\\u0396\",Eta:\"\\u0397\",Theta:\"\\u0398\",Iota:\"\\u0399\",Kappa:\"\\u039A\",Lambda:\"\\u039B\",Mu:\"\\u039C\",Nu:\"\\u039D\",Xi:\"\\u039E\",Omicron:\"\\u039F\",Pi:\"\\u03A0\",Rho:\"\\u03A1\",Sigma:\"\\u03A3\",Tau:\"\\u03A4\",Upsilon:\"\\u03A5\",Phi:\"\\u03A6\",Chi:\"\\u03A7\",Psi:\"\\u03A8\",Omega:\"\\u03A9\",alpha:\"\\u03B1\",beta:\"\\u03B2\",gamma:\"\\u03B3\",delta:\"\\u03B4\",epsilon:\"\\u03B5\",zeta:\"\\u03B6\",eta:\"\\u03B7\",theta:\"\\u03B8\",iota:\"\\u03B9\",kappa:\"\\u03BA\",lambda:\"\\u03BB\",mu:\"\\u03BC\",nu:\"\\u03BD\",xi:\"\\u03BE\",omicron:\"\\u03BF\",pi:\"\\u03C0\",rho:\"\\u03C1\",sigmaf:\"\\u03C2\",sigma:\"\\u03C3\",tau:\"\\u03C4\",upsilon:\"\\u03C5\",phi:\"\\u03C6\",chi:\"\\u03C7\",psi:\"\\u03C8\",omega:\"\\u03C9\",thetasym:\"\\u03D1\",upsih:\"\\u03D2\",piv:\"\\u03D6\",ensp:\"\\u2002\",emsp:\"\\u2003\",thinsp:\"\\u2009\",zwnj:\"\\u200C\",zwj:\"\\u200D\",lrm:\"\\u200E\",rlm:\"\\u200F\",ndash:\"\\u2013\",mdash:\"\\u2014\",lsquo:\"\\u2018\",rsquo:\"\\u2019\",sbquo:\"\\u201A\",ldquo:\"\\u201C\",rdquo:\"\\u201D\",bdquo:\"\\u201E\",dagger:\"\\u2020\",Dagger:\"\\u2021\",bull:\"\\u2022\",hellip:\"\\u2026\",permil:\"\\u2030\",prime:\"\\u2032\",Prime:\"\\u2033\",lsaquo:\"\\u2039\",rsaquo:\"\\u203A\",oline:\"\\u203E\",frasl:\"\\u2044\",euro:\"\\u20AC\",image:\"\\u2111\",weierp:\"\\u2118\",real:\"\\u211C\",trade:\"\\u2122\",alefsym:\"\\u2135\",larr:\"\\u2190\",uarr:\"\\u2191\",rarr:\"\\u2192\",darr:\"\\u2193\",harr:\"\\u2194\",crarr:\"\\u21B5\",lArr:\"\\u21D0\",uArr:\"\\u21D1\",rArr:\"\\u21D2\",dArr:\"\\u21D3\",hArr:\"\\u21D4\",forall:\"\\u2200\",part:\"\\u2202\",exist:\"\\u2203\",empty:\"\\u2205\",nabla:\"\\u2207\",isin:\"\\u2208\",notin:\"\\u2209\",ni:\"\\u220B\",prod:\"\\u220F\",sum:\"\\u2211\",minus:\"\\u2212\",lowast:\"\\u2217\",radic:\"\\u221A\",prop:\"\\u221D\",infin:\"\\u221E\",ang:\"\\u2220\",and:\"\\u2227\",or:\"\\u2228\",cap:\"\\u2229\",cup:\"\\u222A\",int:\"\\u222B\",there4:\"\\u2234\",sim:\"\\u223C\",cong:\"\\u2245\",asymp:\"\\u2248\",ne:\"\\u2260\",equiv:\"\\u2261\",le:\"\\u2264\",ge:\"\\u2265\",sub:\"\\u2282\",sup:\"\\u2283\",nsub:\"\\u2284\",sube:\"\\u2286\",supe:\"\\u2287\",oplus:\"\\u2295\",otimes:\"\\u2297\",perp:\"\\u22A5\",sdot:\"\\u22C5\",lceil:\"\\u2308\",rceil:\"\\u2309\",lfloor:\"\\u230A\",rfloor:\"\\u230B\",lang:\"\\u2329\",rang:\"\\u232A\",loz:\"\\u25CA\",spades:\"\\u2660\",clubs:\"\\u2663\",hearts:\"\\u2665\",diams:\"\\u2666\"};const lineBreak=/\\r\\n|[\\r\\n\\u2028\\u2029]/;const lineBreakG=new RegExp(lineBreak.source,\"g\");function isNewLine(code){switch(code){case 10:case 13:case 8232:case 8233:return true;default:return false;}}function hasNewLine(input,start,end){for(let i=start;i<end;i++){if(isNewLine(input.charCodeAt(i))){return true;}}return false;}const skipWhiteSpace=/(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;const skipWhiteSpaceInLine=/(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;function isWhitespace(code){switch(code){case 0x0009:case 0x000b:case 0x000c:case 32:case 160:case 5760:case 0x2000:case 0x2001:case 0x2002:case 0x2003:case 0x2004:case 0x2005:case 0x2006:case 0x2007:case 0x2008:case 0x2009:case 0x200a:case 0x202f:case 0x205f:case 0x3000:case 0xfeff:return true;default:return false;}}const JsxErrors=ParseErrorEnum`jsx`({AttributeIsEmpty:\"JSX attributes must only be assigned a non-empty expression.\",MissingClosingTagElement:({openingTagName})=>`Expected corresponding JSX closing tag for <${openingTagName}>.`,MissingClosingTagFragment:\"Expected corresponding JSX closing tag for <>.\",UnexpectedSequenceExpression:\"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",UnexpectedToken:({unexpected,HTMLEntity})=>`Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,UnsupportedJsxValue:\"JSX value should be either an expression or a quoted JSX text.\",UnterminatedJsxContent:\"Unterminated JSX contents.\",UnwrappedAdjacentJSXElements:\"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"});function isFragment(object){return object?object.type===\"JSXOpeningFragment\"||object.type===\"JSXClosingFragment\":false;}function getQualifiedJSXName(object){if(object.type===\"JSXIdentifier\"){return object.name;}if(object.type===\"JSXNamespacedName\"){return object.namespace.name+\":\"+object.name.name;}if(object.type===\"JSXMemberExpression\"){return getQualifiedJSXName(object.object)+\".\"+getQualifiedJSXName(object.property);}throw new Error(\"Node had unexpected type: \"+object.type);}var jsx=superClass=>class JSXParserMixin extends superClass{jsxReadToken(){let out=\"\";let chunkStart=this.state.pos;for(;;){if(this.state.pos>=this.length){throw this.raise(JsxErrors.UnterminatedJsxContent,this.state.startLoc);}const ch=this.input.charCodeAt(this.state.pos);switch(ch){case 60:case 123:if(this.state.pos===this.state.start){if(ch===60&&this.state.canStartJSXElement){++this.state.pos;this.finishToken(143);}else{super.getTokenFromCode(ch);}return;}out+=this.input.slice(chunkStart,this.state.pos);this.finishToken(142,out);return;case 38:out+=this.input.slice(chunkStart,this.state.pos);out+=this.jsxReadEntity();chunkStart=this.state.pos;break;case 62:case 125:default:if(isNewLine(ch)){out+=this.input.slice(chunkStart,this.state.pos);out+=this.jsxReadNewLine(true);chunkStart=this.state.pos;}else{++this.state.pos;}}}}jsxReadNewLine(normalizeCRLF){const ch=this.input.charCodeAt(this.state.pos);let out;++this.state.pos;if(ch===13&&this.input.charCodeAt(this.state.pos)===10){++this.state.pos;out=normalizeCRLF?\"\\n\":\"\\r\\n\";}else{out=String.fromCharCode(ch);}++this.state.curLine;this.state.lineStart=this.state.pos;return out;}jsxReadString(quote){let out=\"\";let chunkStart=++this.state.pos;for(;;){if(this.state.pos>=this.length){throw this.raise(Errors.UnterminatedString,this.state.startLoc);}const ch=this.input.charCodeAt(this.state.pos);if(ch===quote)break;if(ch===38){out+=this.input.slice(chunkStart,this.state.pos);out+=this.jsxReadEntity();chunkStart=this.state.pos;}else if(isNewLine(ch)){out+=this.input.slice(chunkStart,this.state.pos);out+=this.jsxReadNewLine(false);chunkStart=this.state.pos;}else{++this.state.pos;}}out+=this.input.slice(chunkStart,this.state.pos++);this.finishToken(134,out);}jsxReadEntity(){const startPos=++this.state.pos;if(this.codePointAtPos(this.state.pos)===35){++this.state.pos;let radix=10;if(this.codePointAtPos(this.state.pos)===120){radix=16;++this.state.pos;}const codePoint=this.readInt(radix,undefined,false,\"bail\");if(codePoint!==null&&this.codePointAtPos(this.state.pos)===59){++this.state.pos;return String.fromCodePoint(codePoint);}}else{let count=0;let semi=false;while(count++<10&&this.state.pos<this.length&&!(semi=this.codePointAtPos(this.state.pos)===59)){++this.state.pos;}if(semi){const desc=this.input.slice(startPos,this.state.pos);const entity=entities[desc];++this.state.pos;if(entity){return entity;}}}this.state.pos=startPos;return\"&\";}jsxReadWord(){let ch;const start=this.state.pos;do{ch=this.input.charCodeAt(++this.state.pos);}while(isIdentifierChar(ch)||ch===45);this.finishToken(141,this.input.slice(start,this.state.pos));}jsxParseIdentifier(){const node=this.startNode();if(this.match(141)){node.name=this.state.value;}else if(tokenIsKeyword(this.state.type)){node.name=tokenLabelName(this.state.type);}else{this.unexpected();}this.next();return this.finishNode(node,\"JSXIdentifier\");}jsxParseNamespacedName(){const startLoc=this.state.startLoc;const name=this.jsxParseIdentifier();if(!this.eat(14))return name;const node=this.startNodeAt(startLoc);node.namespace=name;node.name=this.jsxParseIdentifier();return this.finishNode(node,\"JSXNamespacedName\");}jsxParseElementName(){const startLoc=this.state.startLoc;let node=this.jsxParseNamespacedName();if(node.type===\"JSXNamespacedName\"){return node;}while(this.eat(16)){const newNode=this.startNodeAt(startLoc);newNode.object=node;newNode.property=this.jsxParseIdentifier();node=this.finishNode(newNode,\"JSXMemberExpression\");}return node;}jsxParseAttributeValue(){let node;switch(this.state.type){case 5:node=this.startNode();this.setContext(types.brace);this.next();node=this.jsxParseExpressionContainer(node,types.j_oTag);if(node.expression.type===\"JSXEmptyExpression\"){this.raise(JsxErrors.AttributeIsEmpty,node);}return node;case 143:case 134:return this.parseExprAtom();default:throw this.raise(JsxErrors.UnsupportedJsxValue,this.state.startLoc);}}jsxParseEmptyExpression(){const node=this.startNodeAt(this.state.lastTokEndLoc);return this.finishNodeAt(node,\"JSXEmptyExpression\",this.state.startLoc);}jsxParseSpreadChild(node){this.next();node.expression=this.parseExpression();this.setContext(types.j_expr);this.state.canStartJSXElement=true;this.expect(8);return this.finishNode(node,\"JSXSpreadChild\");}jsxParseExpressionContainer(node,previousContext){if(this.match(8)){node.expression=this.jsxParseEmptyExpression();}else{const expression=this.parseExpression();node.expression=expression;}this.setContext(previousContext);this.state.canStartJSXElement=true;this.expect(8);return this.finishNode(node,\"JSXExpressionContainer\");}jsxParseAttribute(){const node=this.startNode();if(this.match(5)){this.setContext(types.brace);this.next();this.expect(21);node.argument=this.parseMaybeAssignAllowIn();this.setContext(types.j_oTag);this.state.canStartJSXElement=true;this.expect(8);return this.finishNode(node,\"JSXSpreadAttribute\");}node.name=this.jsxParseNamespacedName();node.value=this.eat(29)?this.jsxParseAttributeValue():null;return this.finishNode(node,\"JSXAttribute\");}jsxParseOpeningElementAt(startLoc){const node=this.startNodeAt(startLoc);if(this.eat(144)){return this.finishNode(node,\"JSXOpeningFragment\");}node.name=this.jsxParseElementName();return this.jsxParseOpeningElementAfterName(node);}jsxParseOpeningElementAfterName(node){const attributes=[];while(!this.match(56)&&!this.match(144)){attributes.push(this.jsxParseAttribute());}node.attributes=attributes;node.selfClosing=this.eat(56);this.expect(144);return this.finishNode(node,\"JSXOpeningElement\");}jsxParseClosingElementAt(startLoc){const node=this.startNodeAt(startLoc);if(this.eat(144)){return this.finishNode(node,\"JSXClosingFragment\");}node.name=this.jsxParseElementName();this.expect(144);return this.finishNode(node,\"JSXClosingElement\");}jsxParseElementAt(startLoc){const node=this.startNodeAt(startLoc);const children=[];const openingElement=this.jsxParseOpeningElementAt(startLoc);let closingElement=null;if(!openingElement.selfClosing){contents:for(;;){switch(this.state.type){case 143:startLoc=this.state.startLoc;this.next();if(this.eat(56)){closingElement=this.jsxParseClosingElementAt(startLoc);break contents;}children.push(this.jsxParseElementAt(startLoc));break;case 142:children.push(this.parseLiteral(this.state.value,\"JSXText\"));break;case 5:{const node=this.startNode();this.setContext(types.brace);this.next();if(this.match(21)){children.push(this.jsxParseSpreadChild(node));}else{children.push(this.jsxParseExpressionContainer(node,types.j_expr));}break;}default:this.unexpected();}}if(isFragment(openingElement)&&!isFragment(closingElement)&&closingElement!==null){this.raise(JsxErrors.MissingClosingTagFragment,closingElement);}else if(!isFragment(openingElement)&&isFragment(closingElement)){this.raise(JsxErrors.MissingClosingTagElement,closingElement,{openingTagName:getQualifiedJSXName(openingElement.name)});}else if(!isFragment(openingElement)&&!isFragment(closingElement)){if(getQualifiedJSXName(closingElement.name)!==getQualifiedJSXName(openingElement.name)){this.raise(JsxErrors.MissingClosingTagElement,closingElement,{openingTagName:getQualifiedJSXName(openingElement.name)});}}}if(isFragment(openingElement)){node.openingFragment=openingElement;node.closingFragment=closingElement;}else{node.openingElement=openingElement;node.closingElement=closingElement;}node.children=children;if(this.match(47)){throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements,this.state.startLoc);}return isFragment(openingElement)?this.finishNode(node,\"JSXFragment\"):this.finishNode(node,\"JSXElement\");}jsxParseElement(){const startLoc=this.state.startLoc;this.next();return this.jsxParseElementAt(startLoc);}setContext(newContext){const{context}=this.state;context[context.length-1]=newContext;}parseExprAtom(refExpressionErrors){if(this.match(143)){return this.jsxParseElement();}else if(this.match(47)&&this.input.charCodeAt(this.state.pos)!==33){this.replaceToken(143);return this.jsxParseElement();}else{return super.parseExprAtom(refExpressionErrors);}}skipSpace(){const curContext=this.curContext();if(!curContext.preserveSpace)super.skipSpace();}getTokenFromCode(code){const context=this.curContext();if(context===types.j_expr){this.jsxReadToken();return;}if(context===types.j_oTag||context===types.j_cTag){if(isIdentifierStart(code)){this.jsxReadWord();return;}if(code===62){++this.state.pos;this.finishToken(144);return;}if((code===34||code===39)&&context===types.j_oTag){this.jsxReadString(code);return;}}if(code===60&&this.state.canStartJSXElement&&this.input.charCodeAt(this.state.pos+1)!==33){++this.state.pos;this.finishToken(143);return;}super.getTokenFromCode(code);}updateContext(prevType){const{context,type}=this.state;if(type===56&&prevType===143){context.splice(-2,2,types.j_cTag);this.state.canStartJSXElement=false;}else if(type===143){context.push(types.j_oTag);}else if(type===144){const out=context[context.length-1];if(out===types.j_oTag&&prevType===56||out===types.j_cTag){context.pop();this.state.canStartJSXElement=context[context.length-1]===types.j_expr;}else{this.setContext(types.j_expr);this.state.canStartJSXElement=true;}}else{this.state.canStartJSXElement=tokenComesBeforeExpression(type);}}};class TypeScriptScope extends Scope{constructor(...args){super(...args);this.tsNames=new Map();}}class TypeScriptScopeHandler extends ScopeHandler{constructor(...args){super(...args);this.importsStack=[];}createScope(flags){this.importsStack.push(new Set());return new TypeScriptScope(flags);}enter(flags){if(flags===256){this.importsStack.push(new Set());}super.enter(flags);}exit(){const flags=super.exit();if(flags===256){this.importsStack.pop();}return flags;}hasImport(name,allowShadow){const len=this.importsStack.length;if(this.importsStack[len-1].has(name)){return true;}if(!allowShadow&&len>1){for(let i=0;i<len-1;i++){if(this.importsStack[i].has(name))return true;}}return false;}declareName(name,bindingType,loc){if(bindingType&4096){if(this.hasImport(name,true)){this.parser.raise(Errors.VarRedeclaration,loc,{identifierName:name});}this.importsStack[this.importsStack.length-1].add(name);return;}const scope=this.currentScope();let type=scope.tsNames.get(name)||0;if(bindingType&1024){this.maybeExportDefined(scope,name);scope.tsNames.set(name,type|16);return;}super.declareName(name,bindingType,loc);if(bindingType&2){if(!(bindingType&1)){this.checkRedeclarationInScope(scope,name,bindingType,loc);this.maybeExportDefined(scope,name);}type=type|1;}if(bindingType&256){type=type|2;}if(bindingType&512){type=type|4;}if(bindingType&128){type=type|8;}if(type)scope.tsNames.set(name,type);}isRedeclaredInScope(scope,name,bindingType){const type=scope.tsNames.get(name);if((type&2)>0){if(bindingType&256){const isConst=!!(bindingType&512);const wasConst=(type&4)>0;return isConst!==wasConst;}return true;}if(bindingType&128&&(type&8)>0){if(scope.names.get(name)&2){return!!(bindingType&1);}else{return false;}}if(bindingType&2&&(type&1)>0){return true;}return super.isRedeclaredInScope(scope,name,bindingType);}checkLocalExport(id){const{name}=id;if(this.hasImport(name))return;const len=this.scopeStack.length;for(let i=len-1;i>=0;i--){const scope=this.scopeStack[i];const type=scope.tsNames.get(name);if((type&1)>0||(type&16)>0){return;}}super.checkLocalExport(id);}}class ProductionParameterHandler{constructor(){this.stacks=[];}enter(flags){this.stacks.push(flags);}exit(){this.stacks.pop();}currentFlags(){return this.stacks[this.stacks.length-1];}get hasAwait(){return(this.currentFlags()&2)>0;}get hasYield(){return(this.currentFlags()&1)>0;}get hasReturn(){return(this.currentFlags()&4)>0;}get hasIn(){return(this.currentFlags()&8)>0;}}function functionFlags(isAsync,isGenerator){return(isAsync?2:0)|(isGenerator?1:0);}class BaseParser{constructor(){this.sawUnambiguousESM=false;this.ambiguousScriptDifferentAst=false;}sourceToOffsetPos(sourcePos){return sourcePos+this.startIndex;}offsetToSourcePos(offsetPos){return offsetPos-this.startIndex;}hasPlugin(pluginConfig){if(typeof pluginConfig===\"string\"){return this.plugins.has(pluginConfig);}else{const[pluginName,pluginOptions]=pluginConfig;if(!this.hasPlugin(pluginName)){return false;}const actualOptions=this.plugins.get(pluginName);for(const key of Object.keys(pluginOptions)){if((actualOptions==null?void 0:actualOptions[key])!==pluginOptions[key]){return false;}}return true;}}getPluginOption(plugin,name){var _this$plugins$get;return(_this$plugins$get=this.plugins.get(plugin))==null?void 0:_this$plugins$get[name];}}function setTrailingComments(node,comments){if(node.trailingComments===undefined){node.trailingComments=comments;}else{node.trailingComments.unshift(...comments);}}function setLeadingComments(node,comments){if(node.leadingComments===undefined){node.leadingComments=comments;}else{node.leadingComments.unshift(...comments);}}function setInnerComments(node,comments){if(node.innerComments===undefined){node.innerComments=comments;}else{node.innerComments.unshift(...comments);}}function adjustInnerComments(node,elements,commentWS){let lastElement=null;let i=elements.length;while(lastElement===null&&i>0){lastElement=elements[--i];}if(lastElement===null||lastElement.start>commentWS.start){setInnerComments(node,commentWS.comments);}else{setTrailingComments(lastElement,commentWS.comments);}}class CommentsParser extends BaseParser{addComment(comment){if(this.filename)comment.loc.filename=this.filename;const{commentsLen}=this.state;if(this.comments.length!==commentsLen){this.comments.length=commentsLen;}this.comments.push(comment);this.state.commentsLen++;}processComment(node){const{commentStack}=this.state;const commentStackLength=commentStack.length;if(commentStackLength===0)return;let i=commentStackLength-1;const lastCommentWS=commentStack[i];if(lastCommentWS.start===node.end){lastCommentWS.leadingNode=node;i--;}const{start:nodeStart}=node;for(;i>=0;i--){const commentWS=commentStack[i];const commentEnd=commentWS.end;if(commentEnd>nodeStart){commentWS.containingNode=node;this.finalizeComment(commentWS);commentStack.splice(i,1);}else{if(commentEnd===nodeStart){commentWS.trailingNode=node;}break;}}}finalizeComment(commentWS){const{comments}=commentWS;if(commentWS.leadingNode!==null||commentWS.trailingNode!==null){if(commentWS.leadingNode!==null){setTrailingComments(commentWS.leadingNode,comments);}if(commentWS.trailingNode!==null){setLeadingComments(commentWS.trailingNode,comments);}}else{const{containingNode:node,start:commentStart}=commentWS;if(this.input.charCodeAt(this.offsetToSourcePos(commentStart)-1)===44){switch(node.type){case\"ObjectExpression\":case\"ObjectPattern\":case\"RecordExpression\":adjustInnerComments(node,node.properties,commentWS);break;case\"CallExpression\":case\"OptionalCallExpression\":adjustInnerComments(node,node.arguments,commentWS);break;case\"FunctionDeclaration\":case\"FunctionExpression\":case\"ArrowFunctionExpression\":case\"ObjectMethod\":case\"ClassMethod\":case\"ClassPrivateMethod\":adjustInnerComments(node,node.params,commentWS);break;case\"ArrayExpression\":case\"ArrayPattern\":case\"TupleExpression\":adjustInnerComments(node,node.elements,commentWS);break;case\"ExportNamedDeclaration\":case\"ImportDeclaration\":adjustInnerComments(node,node.specifiers,commentWS);break;case\"TSEnumDeclaration\":{adjustInnerComments(node,node.members,commentWS);}break;case\"TSEnumBody\":adjustInnerComments(node,node.members,commentWS);break;default:{setInnerComments(node,comments);}}}else{setInnerComments(node,comments);}}}finalizeRemainingComments(){const{commentStack}=this.state;for(let i=commentStack.length-1;i>=0;i--){this.finalizeComment(commentStack[i]);}this.state.commentStack=[];}resetPreviousNodeTrailingComments(node){const{commentStack}=this.state;const{length}=commentStack;if(length===0)return;const commentWS=commentStack[length-1];if(commentWS.leadingNode===node){commentWS.leadingNode=null;}}resetPreviousIdentifierLeadingComments(node){const{commentStack}=this.state;const{length}=commentStack;if(length===0)return;if(commentStack[length-1].trailingNode===node){commentStack[length-1].trailingNode=null;}else if(length>=2&&commentStack[length-2].trailingNode===node){commentStack[length-2].trailingNode=null;}}takeSurroundingComments(node,start,end){const{commentStack}=this.state;const commentStackLength=commentStack.length;if(commentStackLength===0)return;let i=commentStackLength-1;for(;i>=0;i--){const commentWS=commentStack[i];const commentEnd=commentWS.end;const commentStart=commentWS.start;if(commentStart===end){commentWS.leadingNode=node;}else if(commentEnd===start){commentWS.trailingNode=node;}else if(commentEnd<start){break;}}}}class State{constructor(){this.flags=1024;this.startIndex=void 0;this.curLine=void 0;this.lineStart=void 0;this.startLoc=void 0;this.endLoc=void 0;this.errors=[];this.potentialArrowAt=-1;this.noArrowAt=[];this.noArrowParamsConversionAt=[];this.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null};this.labels=[];this.commentsLen=0;this.commentStack=[];this.pos=0;this.type=140;this.value=null;this.start=0;this.end=0;this.lastTokEndLoc=null;this.lastTokStartLoc=null;this.context=[types.brace];this.firstInvalidTemplateEscapePos=null;this.strictErrors=new Map();this.tokensLength=0;}get strict(){return(this.flags&1)>0;}set strict(v){if(v)this.flags|=1;else this.flags&=-2;}init({strictMode,sourceType,startIndex,startLine,startColumn}){this.strict=strictMode===false?false:strictMode===true?true:sourceType===\"module\";this.startIndex=startIndex;this.curLine=startLine;this.lineStart=-startColumn;this.startLoc=this.endLoc=new Position(startLine,startColumn,startIndex);}get maybeInArrowParameters(){return(this.flags&2)>0;}set maybeInArrowParameters(v){if(v)this.flags|=2;else this.flags&=-3;}get inType(){return(this.flags&4)>0;}set inType(v){if(v)this.flags|=4;else this.flags&=-5;}get noAnonFunctionType(){return(this.flags&8)>0;}set noAnonFunctionType(v){if(v)this.flags|=8;else this.flags&=-9;}get hasFlowComment(){return(this.flags&16)>0;}set hasFlowComment(v){if(v)this.flags|=16;else this.flags&=-17;}get isAmbientContext(){return(this.flags&32)>0;}set isAmbientContext(v){if(v)this.flags|=32;else this.flags&=-33;}get inAbstractClass(){return(this.flags&64)>0;}set inAbstractClass(v){if(v)this.flags|=64;else this.flags&=-65;}get inDisallowConditionalTypesContext(){return(this.flags&128)>0;}set inDisallowConditionalTypesContext(v){if(v)this.flags|=128;else this.flags&=-129;}get soloAwait(){return(this.flags&256)>0;}set soloAwait(v){if(v)this.flags|=256;else this.flags&=-257;}get inFSharpPipelineDirectBody(){return(this.flags&512)>0;}set inFSharpPipelineDirectBody(v){if(v)this.flags|=512;else this.flags&=-513;}get canStartJSXElement(){return(this.flags&1024)>0;}set canStartJSXElement(v){if(v)this.flags|=1024;else this.flags&=-1025;}get containsEsc(){return(this.flags&2048)>0;}set containsEsc(v){if(v)this.flags|=2048;else this.flags&=-2049;}get hasTopLevelAwait(){return(this.flags&4096)>0;}set hasTopLevelAwait(v){if(v)this.flags|=4096;else this.flags&=-4097;}curPosition(){return new Position(this.curLine,this.pos-this.lineStart,this.pos+this.startIndex);}clone(){const state=new State();state.flags=this.flags;state.startIndex=this.startIndex;state.curLine=this.curLine;state.lineStart=this.lineStart;state.startLoc=this.startLoc;state.endLoc=this.endLoc;state.errors=this.errors.slice();state.potentialArrowAt=this.potentialArrowAt;state.noArrowAt=this.noArrowAt.slice();state.noArrowParamsConversionAt=this.noArrowParamsConversionAt.slice();state.topicContext=this.topicContext;state.labels=this.labels.slice();state.commentsLen=this.commentsLen;state.commentStack=this.commentStack.slice();state.pos=this.pos;state.type=this.type;state.value=this.value;state.start=this.start;state.end=this.end;state.lastTokEndLoc=this.lastTokEndLoc;state.lastTokStartLoc=this.lastTokStartLoc;state.context=this.context.slice();state.firstInvalidTemplateEscapePos=this.firstInvalidTemplateEscapePos;state.strictErrors=this.strictErrors;state.tokensLength=this.tokensLength;return state;}}var _isDigit=function isDigit(code){return code>=48&&code<=57;};const forbiddenNumericSeparatorSiblings={decBinOct:new Set([46,66,69,79,95,98,101,111]),hex:new Set([46,88,95,120])};const isAllowedNumericSeparatorSibling={bin:ch=>ch===48||ch===49,oct:ch=>ch>=48&&ch<=55,dec:ch=>ch>=48&&ch<=57,hex:ch=>ch>=48&&ch<=57||ch>=65&&ch<=70||ch>=97&&ch<=102};function readStringContents(type,input,pos,lineStart,curLine,errors){const initialPos=pos;const initialLineStart=lineStart;const initialCurLine=curLine;let out=\"\";let firstInvalidLoc=null;let chunkStart=pos;const{length}=input;for(;;){if(pos>=length){errors.unterminated(initialPos,initialLineStart,initialCurLine);out+=input.slice(chunkStart,pos);break;}const ch=input.charCodeAt(pos);if(isStringEnd(type,ch,input,pos)){out+=input.slice(chunkStart,pos);break;}if(ch===92){out+=input.slice(chunkStart,pos);const res=readEscapedChar(input,pos,lineStart,curLine,type===\"template\",errors);if(res.ch===null&&!firstInvalidLoc){firstInvalidLoc={pos,lineStart,curLine};}else{out+=res.ch;}({pos,lineStart,curLine}=res);chunkStart=pos;}else if(ch===8232||ch===8233){++pos;++curLine;lineStart=pos;}else if(ch===10||ch===13){if(type===\"template\"){out+=input.slice(chunkStart,pos)+\"\\n\";++pos;if(ch===13&&input.charCodeAt(pos)===10){++pos;}++curLine;chunkStart=lineStart=pos;}else{errors.unterminated(initialPos,initialLineStart,initialCurLine);}}else{++pos;}}return{pos,str:out,firstInvalidLoc,lineStart,curLine,containsInvalid:!!firstInvalidLoc};}function isStringEnd(type,ch,input,pos){if(type===\"template\"){return ch===96||ch===36&&input.charCodeAt(pos+1)===123;}return ch===(type===\"double\"?34:39);}function readEscapedChar(input,pos,lineStart,curLine,inTemplate,errors){const throwOnInvalid=!inTemplate;pos++;const res=ch=>({pos,ch,lineStart,curLine});const ch=input.charCodeAt(pos++);switch(ch){case 110:return res(\"\\n\");case 114:return res(\"\\r\");case 120:{let code;({code,pos}=readHexChar(input,pos,lineStart,curLine,2,false,throwOnInvalid,errors));return res(code===null?null:String.fromCharCode(code));}case 117:{let code;({code,pos}=readCodePoint(input,pos,lineStart,curLine,throwOnInvalid,errors));return res(code===null?null:String.fromCodePoint(code));}case 116:return res(\"\\t\");case 98:return res(\"\\b\");case 118:return res(\"\\u000b\");case 102:return res(\"\\f\");case 13:if(input.charCodeAt(pos)===10){++pos;}case 10:lineStart=pos;++curLine;case 8232:case 8233:return res(\"\");case 56:case 57:if(inTemplate){return res(null);}else{errors.strictNumericEscape(pos-1,lineStart,curLine);}default:if(ch>=48&&ch<=55){const startPos=pos-1;const match=/^[0-7]+/.exec(input.slice(startPos,pos+2));let octalStr=match[0];let octal=parseInt(octalStr,8);if(octal>255){octalStr=octalStr.slice(0,-1);octal=parseInt(octalStr,8);}pos+=octalStr.length-1;const next=input.charCodeAt(pos);if(octalStr!==\"0\"||next===56||next===57){if(inTemplate){return res(null);}else{errors.strictNumericEscape(startPos,lineStart,curLine);}}return res(String.fromCharCode(octal));}return res(String.fromCharCode(ch));}}function readHexChar(input,pos,lineStart,curLine,len,forceLen,throwOnInvalid,errors){const initialPos=pos;let n;({n,pos}=readInt(input,pos,lineStart,curLine,16,len,forceLen,false,errors,!throwOnInvalid));if(n===null){if(throwOnInvalid){errors.invalidEscapeSequence(initialPos,lineStart,curLine);}else{pos=initialPos-1;}}return{code:n,pos};}function readInt(input,pos,lineStart,curLine,radix,len,forceLen,allowNumSeparator,errors,bailOnError){const start=pos;const forbiddenSiblings=radix===16?forbiddenNumericSeparatorSiblings.hex:forbiddenNumericSeparatorSiblings.decBinOct;const isAllowedSibling=radix===16?isAllowedNumericSeparatorSibling.hex:radix===10?isAllowedNumericSeparatorSibling.dec:radix===8?isAllowedNumericSeparatorSibling.oct:isAllowedNumericSeparatorSibling.bin;let invalid=false;let total=0;for(let i=0,e=len==null?Infinity:len;i<e;++i){const code=input.charCodeAt(pos);let val;if(code===95&&allowNumSeparator!==\"bail\"){const prev=input.charCodeAt(pos-1);const next=input.charCodeAt(pos+1);if(!allowNumSeparator){if(bailOnError)return{n:null,pos};errors.numericSeparatorInEscapeSequence(pos,lineStart,curLine);}else if(Number.isNaN(next)||!isAllowedSibling(next)||forbiddenSiblings.has(prev)||forbiddenSiblings.has(next)){if(bailOnError)return{n:null,pos};errors.unexpectedNumericSeparator(pos,lineStart,curLine);}++pos;continue;}if(code>=97){val=code-97+10;}else if(code>=65){val=code-65+10;}else if(_isDigit(code)){val=code-48;}else{val=Infinity;}if(val>=radix){if(val<=9&&bailOnError){return{n:null,pos};}else if(val<=9&&errors.invalidDigit(pos,lineStart,curLine,radix)){val=0;}else if(forceLen){val=0;invalid=true;}else{break;}}++pos;total=total*radix+val;}if(pos===start||len!=null&&pos-start!==len||invalid){return{n:null,pos};}return{n:total,pos};}function readCodePoint(input,pos,lineStart,curLine,throwOnInvalid,errors){const ch=input.charCodeAt(pos);let code;if(ch===123){++pos;({code,pos}=readHexChar(input,pos,lineStart,curLine,input.indexOf(\"}\",pos)-pos,true,throwOnInvalid,errors));++pos;if(code!==null&&code>0x10ffff){if(throwOnInvalid){errors.invalidCodePoint(pos,lineStart,curLine);}else{return{code:null,pos};}}}else{({code,pos}=readHexChar(input,pos,lineStart,curLine,4,false,throwOnInvalid,errors));}return{code,pos};}function buildPosition(pos,lineStart,curLine){return new Position(curLine,pos-lineStart,pos);}const VALID_REGEX_FLAGS=new Set([103,109,115,105,121,117,100,118]);class Token{constructor(state){const startIndex=state.startIndex||0;this.type=state.type;this.value=state.value;this.start=startIndex+state.start;this.end=startIndex+state.end;this.loc=new SourceLocation(state.startLoc,state.endLoc);}}class Tokenizer extends CommentsParser{constructor(options,input){super();this.isLookahead=void 0;this.tokens=[];this.errorHandlers_readInt={invalidDigit:(pos,lineStart,curLine,radix)=>{if(!(this.optionFlags&2048))return false;this.raise(Errors.InvalidDigit,buildPosition(pos,lineStart,curLine),{radix});return true;},numericSeparatorInEscapeSequence:this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),unexpectedNumericSeparator:this.errorBuilder(Errors.UnexpectedNumericSeparator)};this.errorHandlers_readCodePoint=Object.assign({},this.errorHandlers_readInt,{invalidEscapeSequence:this.errorBuilder(Errors.InvalidEscapeSequence),invalidCodePoint:this.errorBuilder(Errors.InvalidCodePoint)});this.errorHandlers_readStringContents_string=Object.assign({},this.errorHandlers_readCodePoint,{strictNumericEscape:(pos,lineStart,curLine)=>{this.recordStrictModeErrors(Errors.StrictNumericEscape,buildPosition(pos,lineStart,curLine));},unterminated:(pos,lineStart,curLine)=>{throw this.raise(Errors.UnterminatedString,buildPosition(pos-1,lineStart,curLine));}});this.errorHandlers_readStringContents_template=Object.assign({},this.errorHandlers_readCodePoint,{strictNumericEscape:this.errorBuilder(Errors.StrictNumericEscape),unterminated:(pos,lineStart,curLine)=>{throw this.raise(Errors.UnterminatedTemplate,buildPosition(pos,lineStart,curLine));}});this.state=new State();this.state.init(options);this.input=input;this.length=input.length;this.comments=[];this.isLookahead=false;}pushToken(token){this.tokens.length=this.state.tokensLength;this.tokens.push(token);++this.state.tokensLength;}next(){this.checkKeywordEscapes();if(this.optionFlags&256){this.pushToken(new Token(this.state));}this.state.lastTokEndLoc=this.state.endLoc;this.state.lastTokStartLoc=this.state.startLoc;this.nextToken();}eat(type){if(this.match(type)){this.next();return true;}else{return false;}}match(type){return this.state.type===type;}createLookaheadState(state){return{pos:state.pos,value:null,type:state.type,start:state.start,end:state.end,context:[this.curContext()],inType:state.inType,startLoc:state.startLoc,lastTokEndLoc:state.lastTokEndLoc,curLine:state.curLine,lineStart:state.lineStart,curPosition:state.curPosition};}lookahead(){const old=this.state;this.state=this.createLookaheadState(old);this.isLookahead=true;this.nextToken();this.isLookahead=false;const curr=this.state;this.state=old;return curr;}nextTokenStart(){return this.nextTokenStartSince(this.state.pos);}nextTokenStartSince(pos){skipWhiteSpace.lastIndex=pos;return skipWhiteSpace.test(this.input)?skipWhiteSpace.lastIndex:pos;}lookaheadCharCode(){return this.lookaheadCharCodeSince(this.state.pos);}lookaheadCharCodeSince(pos){return this.input.charCodeAt(this.nextTokenStartSince(pos));}nextTokenInLineStart(){return this.nextTokenInLineStartSince(this.state.pos);}nextTokenInLineStartSince(pos){skipWhiteSpaceInLine.lastIndex=pos;return skipWhiteSpaceInLine.test(this.input)?skipWhiteSpaceInLine.lastIndex:pos;}lookaheadInLineCharCode(){return this.input.charCodeAt(this.nextTokenInLineStart());}codePointAtPos(pos){let cp=this.input.charCodeAt(pos);if((cp&0xfc00)===0xd800&&++pos<this.input.length){const trail=this.input.charCodeAt(pos);if((trail&0xfc00)===0xdc00){cp=0x10000+((cp&0x3ff)<<10)+(trail&0x3ff);}}return cp;}setStrict(strict){this.state.strict=strict;if(strict){this.state.strictErrors.forEach(([toParseError,at])=>this.raise(toParseError,at));this.state.strictErrors.clear();}}curContext(){return this.state.context[this.state.context.length-1];}nextToken(){this.skipSpace();this.state.start=this.state.pos;if(!this.isLookahead)this.state.startLoc=this.state.curPosition();if(this.state.pos>=this.length){this.finishToken(140);return;}this.getTokenFromCode(this.codePointAtPos(this.state.pos));}skipBlockComment(commentEnd){let startLoc;if(!this.isLookahead)startLoc=this.state.curPosition();const start=this.state.pos;const end=this.input.indexOf(commentEnd,start+2);if(end===-1){throw this.raise(Errors.UnterminatedComment,this.state.curPosition());}this.state.pos=end+commentEnd.length;lineBreakG.lastIndex=start+2;while(lineBreakG.test(this.input)&&lineBreakG.lastIndex<=end){++this.state.curLine;this.state.lineStart=lineBreakG.lastIndex;}if(this.isLookahead)return;const comment={type:\"CommentBlock\",value:this.input.slice(start+2,end),start:this.sourceToOffsetPos(start),end:this.sourceToOffsetPos(end+commentEnd.length),loc:new SourceLocation(startLoc,this.state.curPosition())};if(this.optionFlags&256)this.pushToken(comment);return comment;}skipLineComment(startSkip){const start=this.state.pos;let startLoc;if(!this.isLookahead)startLoc=this.state.curPosition();let ch=this.input.charCodeAt(this.state.pos+=startSkip);if(this.state.pos<this.length){while(!isNewLine(ch)&&++this.state.pos<this.length){ch=this.input.charCodeAt(this.state.pos);}}if(this.isLookahead)return;const end=this.state.pos;const value=this.input.slice(start+startSkip,end);const comment={type:\"CommentLine\",value,start:this.sourceToOffsetPos(start),end:this.sourceToOffsetPos(end),loc:new SourceLocation(startLoc,this.state.curPosition())};if(this.optionFlags&256)this.pushToken(comment);return comment;}skipSpace(){const spaceStart=this.state.pos;const comments=this.optionFlags&4096?[]:null;loop:while(this.state.pos<this.length){const ch=this.input.charCodeAt(this.state.pos);switch(ch){case 32:case 160:case 9:++this.state.pos;break;case 13:if(this.input.charCodeAt(this.state.pos+1)===10){++this.state.pos;}case 10:case 8232:case 8233:++this.state.pos;++this.state.curLine;this.state.lineStart=this.state.pos;break;case 47:switch(this.input.charCodeAt(this.state.pos+1)){case 42:{const comment=this.skipBlockComment(\"*/\");if(comment!==undefined){this.addComment(comment);comments==null||comments.push(comment);}break;}case 47:{const comment=this.skipLineComment(2);if(comment!==undefined){this.addComment(comment);comments==null||comments.push(comment);}break;}default:break loop;}break;default:if(isWhitespace(ch)){++this.state.pos;}else if(ch===45&&!this.inModule&&this.optionFlags&8192){const pos=this.state.pos;if(this.input.charCodeAt(pos+1)===45&&this.input.charCodeAt(pos+2)===62&&(spaceStart===0||this.state.lineStart>spaceStart)){const comment=this.skipLineComment(3);if(comment!==undefined){this.addComment(comment);comments==null||comments.push(comment);}}else{break loop;}}else if(ch===60&&!this.inModule&&this.optionFlags&8192){const pos=this.state.pos;if(this.input.charCodeAt(pos+1)===33&&this.input.charCodeAt(pos+2)===45&&this.input.charCodeAt(pos+3)===45){const comment=this.skipLineComment(4);if(comment!==undefined){this.addComment(comment);comments==null||comments.push(comment);}}else{break loop;}}else{break loop;}}}if((comments==null?void 0:comments.length)>0){const end=this.state.pos;const commentWhitespace={start:this.sourceToOffsetPos(spaceStart),end:this.sourceToOffsetPos(end),comments,leadingNode:null,trailingNode:null,containingNode:null};this.state.commentStack.push(commentWhitespace);}}finishToken(type,val){this.state.end=this.state.pos;this.state.endLoc=this.state.curPosition();const prevType=this.state.type;this.state.type=type;this.state.value=val;if(!this.isLookahead){this.updateContext(prevType);}}replaceToken(type){this.state.type=type;this.updateContext();}readToken_numberSign(){if(this.state.pos===0&&this.readToken_interpreter()){return;}const nextPos=this.state.pos+1;const next=this.codePointAtPos(nextPos);if(next>=48&&next<=57){throw this.raise(Errors.UnexpectedDigitAfterHash,this.state.curPosition());}if(next===123||next===91&&this.hasPlugin(\"recordAndTuple\")){this.expectPlugin(\"recordAndTuple\");if(this.getPluginOption(\"recordAndTuple\",\"syntaxType\")===\"bar\"){throw this.raise(next===123?Errors.RecordExpressionHashIncorrectStartSyntaxType:Errors.TupleExpressionHashIncorrectStartSyntaxType,this.state.curPosition());}this.state.pos+=2;if(next===123){this.finishToken(7);}else{this.finishToken(1);}}else if(isIdentifierStart(next)){++this.state.pos;this.finishToken(139,this.readWord1(next));}else if(next===92){++this.state.pos;this.finishToken(139,this.readWord1());}else{this.finishOp(27,1);}}readToken_dot(){const next=this.input.charCodeAt(this.state.pos+1);if(next>=48&&next<=57){this.readNumber(true);return;}if(next===46&&this.input.charCodeAt(this.state.pos+2)===46){this.state.pos+=3;this.finishToken(21);}else{++this.state.pos;this.finishToken(16);}}readToken_slash(){const next=this.input.charCodeAt(this.state.pos+1);if(next===61){this.finishOp(31,2);}else{this.finishOp(56,1);}}readToken_interpreter(){if(this.state.pos!==0||this.length<2)return false;let ch=this.input.charCodeAt(this.state.pos+1);if(ch!==33)return false;const start=this.state.pos;this.state.pos+=1;while(!isNewLine(ch)&&++this.state.pos<this.length){ch=this.input.charCodeAt(this.state.pos);}const value=this.input.slice(start+2,this.state.pos);this.finishToken(28,value);return true;}readToken_mult_modulo(code){let type=code===42?55:54;let width=1;let next=this.input.charCodeAt(this.state.pos+1);if(code===42&&next===42){width++;next=this.input.charCodeAt(this.state.pos+2);type=57;}if(next===61&&!this.state.inType){width++;type=code===37?33:30;}this.finishOp(type,width);}readToken_pipe_amp(code){const next=this.input.charCodeAt(this.state.pos+1);if(next===code){if(this.input.charCodeAt(this.state.pos+2)===61){this.finishOp(30,3);}else{this.finishOp(code===124?41:42,2);}return;}if(code===124){if(next===62){this.finishOp(39,2);return;}if(this.hasPlugin(\"recordAndTuple\")&&next===125){if(this.getPluginOption(\"recordAndTuple\",\"syntaxType\")!==\"bar\"){throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType,this.state.curPosition());}this.state.pos+=2;this.finishToken(9);return;}if(this.hasPlugin(\"recordAndTuple\")&&next===93){if(this.getPluginOption(\"recordAndTuple\",\"syntaxType\")!==\"bar\"){throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType,this.state.curPosition());}this.state.pos+=2;this.finishToken(4);return;}}if(next===61){this.finishOp(30,2);return;}this.finishOp(code===124?43:45,1);}readToken_caret(){const next=this.input.charCodeAt(this.state.pos+1);if(next===61&&!this.state.inType){this.finishOp(32,2);}else if(next===94&&this.hasPlugin([\"pipelineOperator\",{proposal:\"hack\",topicToken:\"^^\"}])){this.finishOp(37,2);const lookaheadCh=this.input.codePointAt(this.state.pos);if(lookaheadCh===94){this.unexpected();}}else{this.finishOp(44,1);}}readToken_atSign(){const next=this.input.charCodeAt(this.state.pos+1);if(next===64&&this.hasPlugin([\"pipelineOperator\",{proposal:\"hack\",topicToken:\"@@\"}])){this.finishOp(38,2);}else{this.finishOp(26,1);}}readToken_plus_min(code){const next=this.input.charCodeAt(this.state.pos+1);if(next===code){this.finishOp(34,2);return;}if(next===61){this.finishOp(30,2);}else{this.finishOp(53,1);}}readToken_lt(){const{pos}=this.state;const next=this.input.charCodeAt(pos+1);if(next===60){if(this.input.charCodeAt(pos+2)===61){this.finishOp(30,3);return;}this.finishOp(51,2);return;}if(next===61){this.finishOp(49,2);return;}this.finishOp(47,1);}readToken_gt(){const{pos}=this.state;const next=this.input.charCodeAt(pos+1);if(next===62){const size=this.input.charCodeAt(pos+2)===62?3:2;if(this.input.charCodeAt(pos+size)===61){this.finishOp(30,size+1);return;}this.finishOp(52,size);return;}if(next===61){this.finishOp(49,2);return;}this.finishOp(48,1);}readToken_eq_excl(code){const next=this.input.charCodeAt(this.state.pos+1);if(next===61){this.finishOp(46,this.input.charCodeAt(this.state.pos+2)===61?3:2);return;}if(code===61&&next===62){this.state.pos+=2;this.finishToken(19);return;}this.finishOp(code===61?29:35,1);}readToken_question(){const next=this.input.charCodeAt(this.state.pos+1);const next2=this.input.charCodeAt(this.state.pos+2);if(next===63){if(next2===61){this.finishOp(30,3);}else{this.finishOp(40,2);}}else if(next===46&&!(next2>=48&&next2<=57)){this.state.pos+=2;this.finishToken(18);}else{++this.state.pos;this.finishToken(17);}}getTokenFromCode(code){switch(code){case 46:this.readToken_dot();return;case 40:++this.state.pos;this.finishToken(10);return;case 41:++this.state.pos;this.finishToken(11);return;case 59:++this.state.pos;this.finishToken(13);return;case 44:++this.state.pos;this.finishToken(12);return;case 91:if(this.hasPlugin(\"recordAndTuple\")&&this.input.charCodeAt(this.state.pos+1)===124){if(this.getPluginOption(\"recordAndTuple\",\"syntaxType\")!==\"bar\"){throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType,this.state.curPosition());}this.state.pos+=2;this.finishToken(2);}else{++this.state.pos;this.finishToken(0);}return;case 93:++this.state.pos;this.finishToken(3);return;case 123:if(this.hasPlugin(\"recordAndTuple\")&&this.input.charCodeAt(this.state.pos+1)===124){if(this.getPluginOption(\"recordAndTuple\",\"syntaxType\")!==\"bar\"){throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType,this.state.curPosition());}this.state.pos+=2;this.finishToken(6);}else{++this.state.pos;this.finishToken(5);}return;case 125:++this.state.pos;this.finishToken(8);return;case 58:if(this.hasPlugin(\"functionBind\")&&this.input.charCodeAt(this.state.pos+1)===58){this.finishOp(15,2);}else{++this.state.pos;this.finishToken(14);}return;case 63:this.readToken_question();return;case 96:this.readTemplateToken();return;case 48:{const next=this.input.charCodeAt(this.state.pos+1);if(next===120||next===88){this.readRadixNumber(16);return;}if(next===111||next===79){this.readRadixNumber(8);return;}if(next===98||next===66){this.readRadixNumber(2);return;}}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:this.readNumber(false);return;case 34:case 39:this.readString(code);return;case 47:this.readToken_slash();return;case 37:case 42:this.readToken_mult_modulo(code);return;case 124:case 38:this.readToken_pipe_amp(code);return;case 94:this.readToken_caret();return;case 43:case 45:this.readToken_plus_min(code);return;case 60:this.readToken_lt();return;case 62:this.readToken_gt();return;case 61:case 33:this.readToken_eq_excl(code);return;case 126:this.finishOp(36,1);return;case 64:this.readToken_atSign();return;case 35:this.readToken_numberSign();return;case 92:this.readWord();return;default:if(isIdentifierStart(code)){this.readWord(code);return;}}throw this.raise(Errors.InvalidOrUnexpectedToken,this.state.curPosition(),{unexpected:String.fromCodePoint(code)});}finishOp(type,size){const str=this.input.slice(this.state.pos,this.state.pos+size);this.state.pos+=size;this.finishToken(type,str);}readRegexp(){const startLoc=this.state.startLoc;const start=this.state.start+1;let escaped,inClass;let{pos}=this.state;for(;;++pos){if(pos>=this.length){throw this.raise(Errors.UnterminatedRegExp,createPositionWithColumnOffset(startLoc,1));}const ch=this.input.charCodeAt(pos);if(isNewLine(ch)){throw this.raise(Errors.UnterminatedRegExp,createPositionWithColumnOffset(startLoc,1));}if(escaped){escaped=false;}else{if(ch===91){inClass=true;}else if(ch===93&&inClass){inClass=false;}else if(ch===47&&!inClass){break;}escaped=ch===92;}}const content=this.input.slice(start,pos);++pos;let mods=\"\";const nextPos=()=>createPositionWithColumnOffset(startLoc,pos+2-start);while(pos<this.length){const cp=this.codePointAtPos(pos);const char=String.fromCharCode(cp);if(VALID_REGEX_FLAGS.has(cp)){if(cp===118){if(mods.includes(\"u\")){this.raise(Errors.IncompatibleRegExpUVFlags,nextPos());}}else if(cp===117){if(mods.includes(\"v\")){this.raise(Errors.IncompatibleRegExpUVFlags,nextPos());}}if(mods.includes(char)){this.raise(Errors.DuplicateRegExpFlags,nextPos());}}else if(isIdentifierChar(cp)||cp===92){this.raise(Errors.MalformedRegExpFlags,nextPos());}else{break;}++pos;mods+=char;}this.state.pos=pos;this.finishToken(138,{pattern:content,flags:mods});}readInt(radix,len,forceLen=false,allowNumSeparator=true){const{n,pos}=readInt(this.input,this.state.pos,this.state.lineStart,this.state.curLine,radix,len,forceLen,allowNumSeparator,this.errorHandlers_readInt,false);this.state.pos=pos;return n;}readRadixNumber(radix){const start=this.state.pos;const startLoc=this.state.curPosition();let isBigInt=false;this.state.pos+=2;const val=this.readInt(radix);if(val==null){this.raise(Errors.InvalidDigit,createPositionWithColumnOffset(startLoc,2),{radix});}const next=this.input.charCodeAt(this.state.pos);if(next===110){++this.state.pos;isBigInt=true;}else if(next===109){throw this.raise(Errors.InvalidDecimal,startLoc);}if(isIdentifierStart(this.codePointAtPos(this.state.pos))){throw this.raise(Errors.NumberIdentifier,this.state.curPosition());}if(isBigInt){const str=this.input.slice(start,this.state.pos).replace(/[_n]/g,\"\");this.finishToken(136,str);return;}this.finishToken(135,val);}readNumber(startsWithDot){const start=this.state.pos;const startLoc=this.state.curPosition();let isFloat=false;let isBigInt=false;let hasExponent=false;let isOctal=false;if(!startsWithDot&&this.readInt(10)===null){this.raise(Errors.InvalidNumber,this.state.curPosition());}const hasLeadingZero=this.state.pos-start>=2&&this.input.charCodeAt(start)===48;if(hasLeadingZero){const integer=this.input.slice(start,this.state.pos);this.recordStrictModeErrors(Errors.StrictOctalLiteral,startLoc);if(!this.state.strict){const underscorePos=integer.indexOf(\"_\");if(underscorePos>0){this.raise(Errors.ZeroDigitNumericSeparator,createPositionWithColumnOffset(startLoc,underscorePos));}}isOctal=hasLeadingZero&&!/[89]/.test(integer);}let next=this.input.charCodeAt(this.state.pos);if(next===46&&!isOctal){++this.state.pos;this.readInt(10);isFloat=true;next=this.input.charCodeAt(this.state.pos);}if((next===69||next===101)&&!isOctal){next=this.input.charCodeAt(++this.state.pos);if(next===43||next===45){++this.state.pos;}if(this.readInt(10)===null){this.raise(Errors.InvalidOrMissingExponent,startLoc);}isFloat=true;hasExponent=true;next=this.input.charCodeAt(this.state.pos);}if(next===110){if(isFloat||hasLeadingZero){this.raise(Errors.InvalidBigIntLiteral,startLoc);}++this.state.pos;isBigInt=true;}if(next===109){this.expectPlugin(\"decimal\",this.state.curPosition());if(hasExponent||hasLeadingZero){this.raise(Errors.InvalidDecimal,startLoc);}++this.state.pos;var isDecimal=true;}if(isIdentifierStart(this.codePointAtPos(this.state.pos))){throw this.raise(Errors.NumberIdentifier,this.state.curPosition());}const str=this.input.slice(start,this.state.pos).replace(/[_mn]/g,\"\");if(isBigInt){this.finishToken(136,str);return;}if(isDecimal){this.finishToken(137,str);return;}const val=isOctal?parseInt(str,8):parseFloat(str);this.finishToken(135,val);}readCodePoint(throwOnInvalid){const{code,pos}=readCodePoint(this.input,this.state.pos,this.state.lineStart,this.state.curLine,throwOnInvalid,this.errorHandlers_readCodePoint);this.state.pos=pos;return code;}readString(quote){const{str,pos,curLine,lineStart}=readStringContents(quote===34?\"double\":\"single\",this.input,this.state.pos+1,this.state.lineStart,this.state.curLine,this.errorHandlers_readStringContents_string);this.state.pos=pos+1;this.state.lineStart=lineStart;this.state.curLine=curLine;this.finishToken(134,str);}readTemplateContinuation(){if(!this.match(8)){this.unexpected(null,8);}this.state.pos--;this.readTemplateToken();}readTemplateToken(){const opening=this.input[this.state.pos];const{str,firstInvalidLoc,pos,curLine,lineStart}=readStringContents(\"template\",this.input,this.state.pos+1,this.state.lineStart,this.state.curLine,this.errorHandlers_readStringContents_template);this.state.pos=pos+1;this.state.lineStart=lineStart;this.state.curLine=curLine;if(firstInvalidLoc){this.state.firstInvalidTemplateEscapePos=new Position(firstInvalidLoc.curLine,firstInvalidLoc.pos-firstInvalidLoc.lineStart,this.sourceToOffsetPos(firstInvalidLoc.pos));}if(this.input.codePointAt(pos)===96){this.finishToken(24,firstInvalidLoc?null:opening+str+\"`\");}else{this.state.pos++;this.finishToken(25,firstInvalidLoc?null:opening+str+\"${\");}}recordStrictModeErrors(toParseError,at){const index=at.index;if(this.state.strict&&!this.state.strictErrors.has(index)){this.raise(toParseError,at);}else{this.state.strictErrors.set(index,[toParseError,at]);}}readWord1(firstCode){this.state.containsEsc=false;let word=\"\";const start=this.state.pos;let chunkStart=this.state.pos;if(firstCode!==undefined){this.state.pos+=firstCode<=0xffff?1:2;}while(this.state.pos<this.length){const ch=this.codePointAtPos(this.state.pos);if(isIdentifierChar(ch)){this.state.pos+=ch<=0xffff?1:2;}else if(ch===92){this.state.containsEsc=true;word+=this.input.slice(chunkStart,this.state.pos);const escStart=this.state.curPosition();const identifierCheck=this.state.pos===start?isIdentifierStart:isIdentifierChar;if(this.input.charCodeAt(++this.state.pos)!==117){this.raise(Errors.MissingUnicodeEscape,this.state.curPosition());chunkStart=this.state.pos-1;continue;}++this.state.pos;const esc=this.readCodePoint(true);if(esc!==null){if(!identifierCheck(esc)){this.raise(Errors.EscapedCharNotAnIdentifier,escStart);}word+=String.fromCodePoint(esc);}chunkStart=this.state.pos;}else{break;}}return word+this.input.slice(chunkStart,this.state.pos);}readWord(firstCode){const word=this.readWord1(firstCode);const type=keywords$1.get(word);if(type!==undefined){this.finishToken(type,tokenLabelName(type));}else{this.finishToken(132,word);}}checkKeywordEscapes(){const{type}=this.state;if(tokenIsKeyword(type)&&this.state.containsEsc){this.raise(Errors.InvalidEscapedReservedWord,this.state.startLoc,{reservedWord:tokenLabelName(type)});}}raise(toParseError,at,details={}){const loc=at instanceof Position?at:at.loc.start;const error=toParseError(loc,details);if(!(this.optionFlags&2048))throw error;if(!this.isLookahead)this.state.errors.push(error);return error;}raiseOverwrite(toParseError,at,details={}){const loc=at instanceof Position?at:at.loc.start;const pos=loc.index;const errors=this.state.errors;for(let i=errors.length-1;i>=0;i--){const error=errors[i];if(error.loc.index===pos){return errors[i]=toParseError(loc,details);}if(error.loc.index<pos)break;}return this.raise(toParseError,at,details);}updateContext(prevType){}unexpected(loc,type){throw this.raise(Errors.UnexpectedToken,loc!=null?loc:this.state.startLoc,{expected:type?tokenLabelName(type):null});}expectPlugin(pluginName,loc){if(this.hasPlugin(pluginName)){return true;}throw this.raise(Errors.MissingPlugin,loc!=null?loc:this.state.startLoc,{missingPlugin:[pluginName]});}expectOnePlugin(pluginNames){if(!pluginNames.some(name=>this.hasPlugin(name))){throw this.raise(Errors.MissingOneOfPlugins,this.state.startLoc,{missingPlugin:pluginNames});}}errorBuilder(error){return(pos,lineStart,curLine)=>{this.raise(error,buildPosition(pos,lineStart,curLine));};}}class ClassScope{constructor(){this.privateNames=new Set();this.loneAccessors=new Map();this.undefinedPrivateNames=new Map();}}class ClassScopeHandler{constructor(parser){this.parser=void 0;this.stack=[];this.undefinedPrivateNames=new Map();this.parser=parser;}current(){return this.stack[this.stack.length-1];}enter(){this.stack.push(new ClassScope());}exit(){const oldClassScope=this.stack.pop();const current=this.current();for(const[name,loc]of Array.from(oldClassScope.undefinedPrivateNames)){if(current){if(!current.undefinedPrivateNames.has(name)){current.undefinedPrivateNames.set(name,loc);}}else{this.parser.raise(Errors.InvalidPrivateFieldResolution,loc,{identifierName:name});}}}declarePrivateName(name,elementType,loc){const{privateNames,loneAccessors,undefinedPrivateNames}=this.current();let redefined=privateNames.has(name);if(elementType&3){const accessor=redefined&&loneAccessors.get(name);if(accessor){const oldStatic=accessor&4;const newStatic=elementType&4;const oldKind=accessor&3;const newKind=elementType&3;redefined=oldKind===newKind||oldStatic!==newStatic;if(!redefined)loneAccessors.delete(name);}else if(!redefined){loneAccessors.set(name,elementType);}}if(redefined){this.parser.raise(Errors.PrivateNameRedeclaration,loc,{identifierName:name});}privateNames.add(name);undefinedPrivateNames.delete(name);}usePrivateName(name,loc){let classScope;for(classScope of this.stack){if(classScope.privateNames.has(name))return;}if(classScope){classScope.undefinedPrivateNames.set(name,loc);}else{this.parser.raise(Errors.InvalidPrivateFieldResolution,loc,{identifierName:name});}}}class ExpressionScope{constructor(type=0){this.type=type;}canBeArrowParameterDeclaration(){return this.type===2||this.type===1;}isCertainlyParameterDeclaration(){return this.type===3;}}class ArrowHeadParsingScope extends ExpressionScope{constructor(type){super(type);this.declarationErrors=new Map();}recordDeclarationError(ParsingErrorClass,at){const index=at.index;this.declarationErrors.set(index,[ParsingErrorClass,at]);}clearDeclarationError(index){this.declarationErrors.delete(index);}iterateErrors(iterator){this.declarationErrors.forEach(iterator);}}class ExpressionScopeHandler{constructor(parser){this.parser=void 0;this.stack=[new ExpressionScope()];this.parser=parser;}enter(scope){this.stack.push(scope);}exit(){this.stack.pop();}recordParameterInitializerError(toParseError,node){const origin=node.loc.start;const{stack}=this;let i=stack.length-1;let scope=stack[i];while(!scope.isCertainlyParameterDeclaration()){if(scope.canBeArrowParameterDeclaration()){scope.recordDeclarationError(toParseError,origin);}else{return;}scope=stack[--i];}this.parser.raise(toParseError,origin);}recordArrowParameterBindingError(error,node){const{stack}=this;const scope=stack[stack.length-1];const origin=node.loc.start;if(scope.isCertainlyParameterDeclaration()){this.parser.raise(error,origin);}else if(scope.canBeArrowParameterDeclaration()){scope.recordDeclarationError(error,origin);}else{return;}}recordAsyncArrowParametersError(at){const{stack}=this;let i=stack.length-1;let scope=stack[i];while(scope.canBeArrowParameterDeclaration()){if(scope.type===2){scope.recordDeclarationError(Errors.AwaitBindingIdentifier,at);}scope=stack[--i];}}validateAsPattern(){const{stack}=this;const currentScope=stack[stack.length-1];if(!currentScope.canBeArrowParameterDeclaration())return;currentScope.iterateErrors(([toParseError,loc])=>{this.parser.raise(toParseError,loc);let i=stack.length-2;let scope=stack[i];while(scope.canBeArrowParameterDeclaration()){scope.clearDeclarationError(loc.index);scope=stack[--i];}});}}function newParameterDeclarationScope(){return new ExpressionScope(3);}function newArrowHeadScope(){return new ArrowHeadParsingScope(1);}function newAsyncArrowScope(){return new ArrowHeadParsingScope(2);}function newExpressionScope(){return new ExpressionScope();}class UtilParser extends Tokenizer{addExtra(node,key,value,enumerable=true){if(!node)return;let{extra}=node;if(extra==null){extra={};node.extra=extra;}if(enumerable){extra[key]=value;}else{Object.defineProperty(extra,key,{enumerable,value});}}isContextual(token){return this.state.type===token&&!this.state.containsEsc;}isUnparsedContextual(nameStart,name){const nameEnd=nameStart+name.length;if(this.input.slice(nameStart,nameEnd)===name){const nextCh=this.input.charCodeAt(nameEnd);return!(isIdentifierChar(nextCh)||(nextCh&0xfc00)===0xd800);}return false;}isLookaheadContextual(name){const next=this.nextTokenStart();return this.isUnparsedContextual(next,name);}eatContextual(token){if(this.isContextual(token)){this.next();return true;}return false;}expectContextual(token,toParseError){if(!this.eatContextual(token)){if(toParseError!=null){throw this.raise(toParseError,this.state.startLoc);}this.unexpected(null,token);}}canInsertSemicolon(){return this.match(140)||this.match(8)||this.hasPrecedingLineBreak();}hasPrecedingLineBreak(){return hasNewLine(this.input,this.offsetToSourcePos(this.state.lastTokEndLoc.index),this.state.start);}hasFollowingLineBreak(){return hasNewLine(this.input,this.state.end,this.nextTokenStart());}isLineTerminator(){return this.eat(13)||this.canInsertSemicolon();}semicolon(allowAsi=true){if(allowAsi?this.isLineTerminator():this.eat(13))return;this.raise(Errors.MissingSemicolon,this.state.lastTokEndLoc);}expect(type,loc){if(!this.eat(type)){this.unexpected(loc,type);}}tryParse(fn,oldState=this.state.clone()){const abortSignal={node:null};try{const node=fn((node=null)=>{abortSignal.node=node;throw abortSignal;});if(this.state.errors.length>oldState.errors.length){const failState=this.state;this.state=oldState;this.state.tokensLength=failState.tokensLength;return{node,error:failState.errors[oldState.errors.length],thrown:false,aborted:false,failState};}return{node,error:null,thrown:false,aborted:false,failState:null};}catch(error){const failState=this.state;this.state=oldState;if(error instanceof SyntaxError){return{node:null,error,thrown:true,aborted:false,failState};}if(error===abortSignal){return{node:abortSignal.node,error:null,thrown:false,aborted:true,failState};}throw error;}}checkExpressionErrors(refExpressionErrors,andThrow){if(!refExpressionErrors)return false;const{shorthandAssignLoc,doubleProtoLoc,privateKeyLoc,optionalParametersLoc}=refExpressionErrors;const hasErrors=!!shorthandAssignLoc||!!doubleProtoLoc||!!optionalParametersLoc||!!privateKeyLoc;if(!andThrow){return hasErrors;}if(shorthandAssignLoc!=null){this.raise(Errors.InvalidCoverInitializedName,shorthandAssignLoc);}if(doubleProtoLoc!=null){this.raise(Errors.DuplicateProto,doubleProtoLoc);}if(privateKeyLoc!=null){this.raise(Errors.UnexpectedPrivateField,privateKeyLoc);}if(optionalParametersLoc!=null){this.unexpected(optionalParametersLoc);}}isLiteralPropertyName(){return tokenIsLiteralPropertyName(this.state.type);}isPrivateName(node){return node.type===\"PrivateName\";}getPrivateNameSV(node){return node.id.name;}hasPropertyAsPrivateName(node){return(node.type===\"MemberExpression\"||node.type===\"OptionalMemberExpression\")&&this.isPrivateName(node.property);}isObjectProperty(node){return node.type===\"ObjectProperty\";}isObjectMethod(node){return node.type===\"ObjectMethod\";}initializeScopes(inModule=this.options.sourceType===\"module\"){const oldLabels=this.state.labels;this.state.labels=[];const oldExportedIdentifiers=this.exportedIdentifiers;this.exportedIdentifiers=new Set();const oldInModule=this.inModule;this.inModule=inModule;const oldScope=this.scope;const ScopeHandler=this.getScopeHandler();this.scope=new ScopeHandler(this,inModule);const oldProdParam=this.prodParam;this.prodParam=new ProductionParameterHandler();const oldClassScope=this.classScope;this.classScope=new ClassScopeHandler(this);const oldExpressionScope=this.expressionScope;this.expressionScope=new ExpressionScopeHandler(this);return()=>{this.state.labels=oldLabels;this.exportedIdentifiers=oldExportedIdentifiers;this.inModule=oldInModule;this.scope=oldScope;this.prodParam=oldProdParam;this.classScope=oldClassScope;this.expressionScope=oldExpressionScope;};}enterInitialScopes(){let paramFlags=0;if(this.inModule){paramFlags|=2;}if(this.optionFlags&32){paramFlags|=1;}this.scope.enter(1);this.prodParam.enter(paramFlags);}checkDestructuringPrivate(refExpressionErrors){const{privateKeyLoc}=refExpressionErrors;if(privateKeyLoc!==null){this.expectPlugin(\"destructuringPrivate\",privateKeyLoc);}}}class ExpressionErrors{constructor(){this.shorthandAssignLoc=null;this.doubleProtoLoc=null;this.privateKeyLoc=null;this.optionalParametersLoc=null;}}class Node{constructor(parser,pos,loc){this.type=\"\";this.start=pos;this.end=0;this.loc=new SourceLocation(loc);if((parser==null?void 0:parser.optionFlags)&128)this.range=[pos,0];if(parser!=null&&parser.filename)this.loc.filename=parser.filename;}}const NodePrototype=Node.prototype;{NodePrototype.__clone=function(){const newNode=new Node(undefined,this.start,this.loc.start);const keys=Object.keys(this);for(let i=0,length=keys.length;i<length;i++){const key=keys[i];if(key!==\"leadingComments\"&&key!==\"trailingComments\"&&key!==\"innerComments\"){newNode[key]=this[key];}}return newNode;};}class NodeUtils extends UtilParser{startNode(){const loc=this.state.startLoc;return new Node(this,loc.index,loc);}startNodeAt(loc){return new Node(this,loc.index,loc);}startNodeAtNode(type){return this.startNodeAt(type.loc.start);}finishNode(node,type){return this.finishNodeAt(node,type,this.state.lastTokEndLoc);}finishNodeAt(node,type,endLoc){node.type=type;node.end=endLoc.index;node.loc.end=endLoc;if(this.optionFlags&128)node.range[1]=endLoc.index;if(this.optionFlags&4096){this.processComment(node);}return node;}resetStartLocation(node,startLoc){node.start=startLoc.index;node.loc.start=startLoc;if(this.optionFlags&128)node.range[0]=startLoc.index;}resetEndLocation(node,endLoc=this.state.lastTokEndLoc){node.end=endLoc.index;node.loc.end=endLoc;if(this.optionFlags&128)node.range[1]=endLoc.index;}resetStartLocationFromNode(node,locationNode){this.resetStartLocation(node,locationNode.loc.start);}castNodeTo(node,type){node.type=type;return node;}cloneIdentifier(node){const{type,start,end,loc,range,name}=node;const cloned=Object.create(NodePrototype);cloned.type=type;cloned.start=start;cloned.end=end;cloned.loc=loc;cloned.range=range;cloned.name=name;if(node.extra)cloned.extra=node.extra;return cloned;}cloneStringLiteral(node){const{type,start,end,loc,range,extra}=node;const cloned=Object.create(NodePrototype);cloned.type=type;cloned.start=start;cloned.end=end;cloned.loc=loc;cloned.range=range;cloned.extra=extra;cloned.value=node.value;return cloned;}}const unwrapParenthesizedExpression=node=>{return node.type===\"ParenthesizedExpression\"?unwrapParenthesizedExpression(node.expression):node;};class LValParser extends NodeUtils{toAssignable(node,isLHS=false){var _node$extra,_node$extra3;let parenthesized=undefined;if(node.type===\"ParenthesizedExpression\"||(_node$extra=node.extra)!=null&&_node$extra.parenthesized){parenthesized=unwrapParenthesizedExpression(node);if(isLHS){if(parenthesized.type===\"Identifier\"){this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment,node);}else if(parenthesized.type!==\"MemberExpression\"&&!this.isOptionalMemberExpression(parenthesized)){this.raise(Errors.InvalidParenthesizedAssignment,node);}}else{this.raise(Errors.InvalidParenthesizedAssignment,node);}}switch(node.type){case\"Identifier\":case\"ObjectPattern\":case\"ArrayPattern\":case\"AssignmentPattern\":case\"RestElement\":break;case\"ObjectExpression\":this.castNodeTo(node,\"ObjectPattern\");for(let i=0,length=node.properties.length,last=length-1;i<length;i++){var _node$extra2;const prop=node.properties[i];const isLast=i===last;this.toAssignableObjectExpressionProp(prop,isLast,isLHS);if(isLast&&prop.type===\"RestElement\"&&(_node$extra2=node.extra)!=null&&_node$extra2.trailingCommaLoc){this.raise(Errors.RestTrailingComma,node.extra.trailingCommaLoc);}}break;case\"ObjectProperty\":{const{key,value}=node;if(this.isPrivateName(key)){this.classScope.usePrivateName(this.getPrivateNameSV(key),key.loc.start);}this.toAssignable(value,isLHS);break;}case\"SpreadElement\":{throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\"+\" SpreadElement should be converted by .toAssignable's caller.\");}case\"ArrayExpression\":this.castNodeTo(node,\"ArrayPattern\");this.toAssignableList(node.elements,(_node$extra3=node.extra)==null?void 0:_node$extra3.trailingCommaLoc,isLHS);break;case\"AssignmentExpression\":if(node.operator!==\"=\"){this.raise(Errors.MissingEqInAssignment,node.left.loc.end);}this.castNodeTo(node,\"AssignmentPattern\");delete node.operator;this.toAssignable(node.left,isLHS);break;case\"ParenthesizedExpression\":this.toAssignable(parenthesized,isLHS);break;}}toAssignableObjectExpressionProp(prop,isLast,isLHS){if(prop.type===\"ObjectMethod\"){this.raise(prop.kind===\"get\"||prop.kind===\"set\"?Errors.PatternHasAccessor:Errors.PatternHasMethod,prop.key);}else if(prop.type===\"SpreadElement\"){this.castNodeTo(prop,\"RestElement\");const arg=prop.argument;this.checkToRestConversion(arg,false);this.toAssignable(arg,isLHS);if(!isLast){this.raise(Errors.RestTrailingComma,prop);}}else{this.toAssignable(prop,isLHS);}}toAssignableList(exprList,trailingCommaLoc,isLHS){const end=exprList.length-1;for(let i=0;i<=end;i++){const elt=exprList[i];if(!elt)continue;this.toAssignableListItem(exprList,i,isLHS);if(elt.type===\"RestElement\"){if(i<end){this.raise(Errors.RestTrailingComma,elt);}else if(trailingCommaLoc){this.raise(Errors.RestTrailingComma,trailingCommaLoc);}}}}toAssignableListItem(exprList,index,isLHS){const node=exprList[index];if(node.type===\"SpreadElement\"){this.castNodeTo(node,\"RestElement\");const arg=node.argument;this.checkToRestConversion(arg,true);this.toAssignable(arg,isLHS);}else{this.toAssignable(node,isLHS);}}isAssignable(node,isBinding){switch(node.type){case\"Identifier\":case\"ObjectPattern\":case\"ArrayPattern\":case\"AssignmentPattern\":case\"RestElement\":return true;case\"ObjectExpression\":{const last=node.properties.length-1;return node.properties.every((prop,i)=>{return prop.type!==\"ObjectMethod\"&&(i===last||prop.type!==\"SpreadElement\")&&this.isAssignable(prop);});}case\"ObjectProperty\":return this.isAssignable(node.value);case\"SpreadElement\":return this.isAssignable(node.argument);case\"ArrayExpression\":return node.elements.every(element=>element===null||this.isAssignable(element));case\"AssignmentExpression\":return node.operator===\"=\";case\"ParenthesizedExpression\":return this.isAssignable(node.expression);case\"MemberExpression\":case\"OptionalMemberExpression\":return!isBinding;default:return false;}}toReferencedList(exprList,isParenthesizedExpr){return exprList;}toReferencedListDeep(exprList,isParenthesizedExpr){this.toReferencedList(exprList,isParenthesizedExpr);for(const expr of exprList){if((expr==null?void 0:expr.type)===\"ArrayExpression\"){this.toReferencedListDeep(expr.elements);}}}parseSpread(refExpressionErrors){const node=this.startNode();this.next();node.argument=this.parseMaybeAssignAllowIn(refExpressionErrors,undefined);return this.finishNode(node,\"SpreadElement\");}parseRestBinding(){const node=this.startNode();this.next();node.argument=this.parseBindingAtom();return this.finishNode(node,\"RestElement\");}parseBindingAtom(){switch(this.state.type){case 0:{const node=this.startNode();this.next();node.elements=this.parseBindingList(3,93,1);return this.finishNode(node,\"ArrayPattern\");}case 5:return this.parseObjectLike(8,true);}return this.parseIdentifier();}parseBindingList(close,closeCharCode,flags){const allowEmpty=flags&1;const elts=[];let first=true;while(!this.eat(close)){if(first){first=false;}else{this.expect(12);}if(allowEmpty&&this.match(12)){elts.push(null);}else if(this.eat(close)){break;}else if(this.match(21)){let rest=this.parseRestBinding();if(this.hasPlugin(\"flow\")||flags&2){rest=this.parseFunctionParamType(rest);}elts.push(rest);if(!this.checkCommaAfterRest(closeCharCode)){this.expect(close);break;}}else{const decorators=[];if(flags&2){if(this.match(26)&&this.hasPlugin(\"decorators\")){this.raise(Errors.UnsupportedParameterDecorator,this.state.startLoc);}while(this.match(26)){decorators.push(this.parseDecorator());}}elts.push(this.parseBindingElement(flags,decorators));}}return elts;}parseBindingRestProperty(prop){this.next();prop.argument=this.parseIdentifier();this.checkCommaAfterRest(125);return this.finishNode(prop,\"RestElement\");}parseBindingProperty(){const{type,startLoc}=this.state;if(type===21){return this.parseBindingRestProperty(this.startNode());}const prop=this.startNode();if(type===139){this.expectPlugin(\"destructuringPrivate\",startLoc);this.classScope.usePrivateName(this.state.value,startLoc);prop.key=this.parsePrivateName();}else{this.parsePropertyName(prop);}prop.method=false;return this.parseObjPropValue(prop,startLoc,false,false,true,false);}parseBindingElement(flags,decorators){const left=this.parseMaybeDefault();if(this.hasPlugin(\"flow\")||flags&2){this.parseFunctionParamType(left);}if(decorators.length){left.decorators=decorators;this.resetStartLocationFromNode(left,decorators[0]);}const elt=this.parseMaybeDefault(left.loc.start,left);return elt;}parseFunctionParamType(param){return param;}parseMaybeDefault(startLoc,left){startLoc!=null?startLoc:startLoc=this.state.startLoc;left=left!=null?left:this.parseBindingAtom();if(!this.eat(29))return left;const node=this.startNodeAt(startLoc);node.left=left;node.right=this.parseMaybeAssignAllowIn();return this.finishNode(node,\"AssignmentPattern\");}isValidLVal(type,isUnparenthesizedInAssign,binding){switch(type){case\"AssignmentPattern\":return\"left\";case\"RestElement\":return\"argument\";case\"ObjectProperty\":return\"value\";case\"ParenthesizedExpression\":return\"expression\";case\"ArrayPattern\":return\"elements\";case\"ObjectPattern\":return\"properties\";}return false;}isOptionalMemberExpression(expression){return expression.type===\"OptionalMemberExpression\";}checkLVal(expression,ancestor,binding=64,checkClashes=false,strictModeChanged=false,hasParenthesizedAncestor=false){var _expression$extra;const type=expression.type;if(this.isObjectMethod(expression))return;const isOptionalMemberExpression=this.isOptionalMemberExpression(expression);if(isOptionalMemberExpression||type===\"MemberExpression\"){if(isOptionalMemberExpression){this.expectPlugin(\"optionalChainingAssign\",expression.loc.start);if(ancestor.type!==\"AssignmentExpression\"){this.raise(Errors.InvalidLhsOptionalChaining,expression,{ancestor});}}if(binding!==64){this.raise(Errors.InvalidPropertyBindingPattern,expression);}return;}if(type===\"Identifier\"){this.checkIdentifier(expression,binding,strictModeChanged);const{name}=expression;if(checkClashes){if(checkClashes.has(name)){this.raise(Errors.ParamDupe,expression);}else{checkClashes.add(name);}}return;}const validity=this.isValidLVal(type,!(hasParenthesizedAncestor||(_expression$extra=expression.extra)!=null&&_expression$extra.parenthesized)&&ancestor.type===\"AssignmentExpression\",binding);if(validity===true)return;if(validity===false){const ParseErrorClass=binding===64?Errors.InvalidLhs:Errors.InvalidLhsBinding;this.raise(ParseErrorClass,expression,{ancestor});return;}let key,isParenthesizedExpression;if(typeof validity===\"string\"){key=validity;isParenthesizedExpression=type===\"ParenthesizedExpression\";}else{[key,isParenthesizedExpression]=validity;}const nextAncestor=type===\"ArrayPattern\"||type===\"ObjectPattern\"?{type}:ancestor;const val=expression[key];if(Array.isArray(val)){for(const child of val){if(child){this.checkLVal(child,nextAncestor,binding,checkClashes,strictModeChanged,isParenthesizedExpression);}}}else if(val){this.checkLVal(val,nextAncestor,binding,checkClashes,strictModeChanged,isParenthesizedExpression);}}checkIdentifier(at,bindingType,strictModeChanged=false){if(this.state.strict&&(strictModeChanged?isStrictBindReservedWord(at.name,this.inModule):isStrictBindOnlyReservedWord(at.name))){if(bindingType===64){this.raise(Errors.StrictEvalArguments,at,{referenceName:at.name});}else{this.raise(Errors.StrictEvalArgumentsBinding,at,{bindingName:at.name});}}if(bindingType&8192&&at.name===\"let\"){this.raise(Errors.LetInLexicalBinding,at);}if(!(bindingType&64)){this.declareNameFromIdentifier(at,bindingType);}}declareNameFromIdentifier(identifier,binding){this.scope.declareName(identifier.name,binding,identifier.loc.start);}checkToRestConversion(node,allowPattern){switch(node.type){case\"ParenthesizedExpression\":this.checkToRestConversion(node.expression,allowPattern);break;case\"Identifier\":case\"MemberExpression\":break;case\"ArrayExpression\":case\"ObjectExpression\":if(allowPattern)break;default:this.raise(Errors.InvalidRestAssignmentPattern,node);}}checkCommaAfterRest(close){if(!this.match(12)){return false;}this.raise(this.lookaheadCharCode()===close?Errors.RestTrailingComma:Errors.ElementAfterRest,this.state.startLoc);return true;}}function nonNull(x){if(x==null){throw new Error(`Unexpected ${x} value.`);}return x;}function assert(x){if(!x){throw new Error(\"Assert fail\");}}const TSErrors=ParseErrorEnum`typescript`({AbstractMethodHasImplementation:({methodName})=>`Method '${methodName}' cannot have an implementation because it is marked abstract.`,AbstractPropertyHasInitializer:({propertyName})=>`Property '${propertyName}' cannot have an initializer because it is marked abstract.`,AccessorCannotBeOptional:\"An 'accessor' property cannot be declared optional.\",AccessorCannotDeclareThisParameter:\"'get' and 'set' accessors cannot declare 'this' parameters.\",AccessorCannotHaveTypeParameters:\"An accessor cannot have type parameters.\",ClassMethodHasDeclare:\"Class methods cannot have the 'declare' modifier.\",ClassMethodHasReadonly:\"Class methods cannot have the 'readonly' modifier.\",ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",ConstructorHasTypeParameters:\"Type parameters cannot appear on a constructor declaration.\",DeclareAccessor:({kind})=>`'declare' is not allowed in ${kind}ters.`,DeclareClassFieldHasInitializer:\"Initializers are not allowed in ambient contexts.\",DeclareFunctionHasImplementation:\"An implementation cannot be declared in ambient contexts.\",DuplicateAccessibilityModifier:({modifier})=>`Accessibility modifier already seen.`,DuplicateModifier:({modifier})=>`Duplicate modifier: '${modifier}'.`,EmptyHeritageClauseType:({token})=>`'${token}' list cannot be empty.`,EmptyTypeArguments:\"Type argument list cannot be empty.\",EmptyTypeParameters:\"Type parameter list cannot be empty.\",ExpectedAmbientAfterExportDeclare:\"'export declare' must be followed by an ambient declaration.\",ImportAliasHasImportType:\"An import alias can not use 'import type'.\",ImportReflectionHasImportType:\"An `import module` declaration can not use `type` modifier\",IncompatibleModifiers:({modifiers})=>`'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,IndexSignatureHasAbstract:\"Index signatures cannot have the 'abstract' modifier.\",IndexSignatureHasAccessibility:({modifier})=>`Index signatures cannot have an accessibility modifier ('${modifier}').`,IndexSignatureHasDeclare:\"Index signatures cannot have the 'declare' modifier.\",IndexSignatureHasOverride:\"'override' modifier cannot appear on an index signature.\",IndexSignatureHasStatic:\"Index signatures cannot have the 'static' modifier.\",InitializerNotAllowedInAmbientContext:\"Initializers are not allowed in ambient contexts.\",InvalidHeritageClauseType:({token})=>`'${token}' list can only include identifiers or qualified-names with optional type arguments.`,InvalidModifierOnTypeMember:({modifier})=>`'${modifier}' modifier cannot appear on a type member.`,InvalidModifierOnTypeParameter:({modifier})=>`'${modifier}' modifier cannot appear on a type parameter.`,InvalidModifierOnTypeParameterPositions:({modifier})=>`'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,InvalidModifiersOrder:({orderedModifiers})=>`'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,InvalidPropertyAccessAfterInstantiationExpression:\"Invalid property access after an instantiation expression. \"+\"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",InvalidTupleMemberLabel:\"Tuple members must be labeled with a simple identifier.\",MissingInterfaceName:\"'interface' declarations must be followed by an identifier.\",NonAbstractClassHasAbstractMethod:\"Abstract methods can only appear within an abstract class.\",NonClassMethodPropertyHasAbstractModifer:\"'abstract' modifier can only appear on a class, method, or property declaration.\",OptionalTypeBeforeRequired:\"A required element cannot follow an optional element.\",OverrideNotInSubClass:\"This member cannot have an 'override' modifier because its containing class does not extend another class.\",PatternIsOptional:\"A binding pattern parameter cannot be optional in an implementation signature.\",PrivateElementHasAbstract:\"Private elements cannot have the 'abstract' modifier.\",PrivateElementHasAccessibility:({modifier})=>`Private elements cannot have an accessibility modifier ('${modifier}').`,ReadonlyForMethodSignature:\"'readonly' modifier can only appear on a property declaration or index signature.\",ReservedArrowTypeParam:\"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",ReservedTypeAssertion:\"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",SetAccessorCannotHaveOptionalParameter:\"A 'set' accessor cannot have an optional parameter.\",SetAccessorCannotHaveRestParameter:\"A 'set' accessor cannot have rest parameter.\",SetAccessorCannotHaveReturnType:\"A 'set' accessor cannot have a return type annotation.\",SingleTypeParameterWithoutTrailingComma:({typeParameterName})=>`Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,StaticBlockCannotHaveModifier:\"Static class blocks cannot have any modifier.\",TupleOptionalAfterType:\"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",TypeAnnotationAfterAssign:\"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",TypeImportCannotSpecifyDefaultAndNamed:\"A type-only import can specify a default import or named bindings, but not both.\",TypeModifierIsUsedInTypeExports:\"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",TypeModifierIsUsedInTypeImports:\"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",UnexpectedParameterModifier:\"A parameter property is only allowed in a constructor implementation.\",UnexpectedReadonly:\"'readonly' type modifier is only permitted on array and tuple literal types.\",UnexpectedTypeAnnotation:\"Did not expect a type annotation here.\",UnexpectedTypeCastInParameter:\"Unexpected type cast in parameter position.\",UnsupportedImportTypeArgument:\"Argument in a type import must be a string literal.\",UnsupportedParameterPropertyKind:\"A parameter property may not be declared using a binding pattern.\",UnsupportedSignatureParameterKind:({type})=>`Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`});function keywordTypeFromName(value){switch(value){case\"any\":return\"TSAnyKeyword\";case\"boolean\":return\"TSBooleanKeyword\";case\"bigint\":return\"TSBigIntKeyword\";case\"never\":return\"TSNeverKeyword\";case\"number\":return\"TSNumberKeyword\";case\"object\":return\"TSObjectKeyword\";case\"string\":return\"TSStringKeyword\";case\"symbol\":return\"TSSymbolKeyword\";case\"undefined\":return\"TSUndefinedKeyword\";case\"unknown\":return\"TSUnknownKeyword\";default:return undefined;}}function tsIsAccessModifier(modifier){return modifier===\"private\"||modifier===\"public\"||modifier===\"protected\";}function tsIsVarianceAnnotations(modifier){return modifier===\"in\"||modifier===\"out\";}var typescript=superClass=>class TypeScriptParserMixin extends superClass{constructor(...args){super(...args);this.tsParseInOutModifiers=this.tsParseModifiers.bind(this,{allowedModifiers:[\"in\",\"out\"],disallowedModifiers:[\"const\",\"public\",\"private\",\"protected\",\"readonly\",\"declare\",\"abstract\",\"override\"],errorTemplate:TSErrors.InvalidModifierOnTypeParameter});this.tsParseConstModifier=this.tsParseModifiers.bind(this,{allowedModifiers:[\"const\"],disallowedModifiers:[\"in\",\"out\"],errorTemplate:TSErrors.InvalidModifierOnTypeParameterPositions});this.tsParseInOutConstModifiers=this.tsParseModifiers.bind(this,{allowedModifiers:[\"in\",\"out\",\"const\"],disallowedModifiers:[\"public\",\"private\",\"protected\",\"readonly\",\"declare\",\"abstract\",\"override\"],errorTemplate:TSErrors.InvalidModifierOnTypeParameter});}getScopeHandler(){return TypeScriptScopeHandler;}tsIsIdentifier(){return tokenIsIdentifier(this.state.type);}tsTokenCanFollowModifier(){return this.match(0)||this.match(5)||this.match(55)||this.match(21)||this.match(139)||this.isLiteralPropertyName();}tsNextTokenOnSameLineAndCanFollowModifier(){this.next();if(this.hasPrecedingLineBreak()){return false;}return this.tsTokenCanFollowModifier();}tsNextTokenCanFollowModifier(){if(this.match(106)){this.next();return this.tsTokenCanFollowModifier();}return this.tsNextTokenOnSameLineAndCanFollowModifier();}tsParseModifier(allowedModifiers,stopOnStartOfClassStaticBlock){if(!tokenIsIdentifier(this.state.type)&&this.state.type!==58&&this.state.type!==75){return undefined;}const modifier=this.state.value;if(allowedModifiers.includes(modifier)){if(stopOnStartOfClassStaticBlock&&this.tsIsStartOfStaticBlocks()){return undefined;}if(this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))){return modifier;}}return undefined;}tsParseModifiers({allowedModifiers,disallowedModifiers,stopOnStartOfClassStaticBlock,errorTemplate=TSErrors.InvalidModifierOnTypeMember},modified){const enforceOrder=(loc,modifier,before,after)=>{if(modifier===before&&modified[after]){this.raise(TSErrors.InvalidModifiersOrder,loc,{orderedModifiers:[before,after]});}};const incompatible=(loc,modifier,mod1,mod2)=>{if(modified[mod1]&&modifier===mod2||modified[mod2]&&modifier===mod1){this.raise(TSErrors.IncompatibleModifiers,loc,{modifiers:[mod1,mod2]});}};for(;;){const{startLoc}=this.state;const modifier=this.tsParseModifier(allowedModifiers.concat(disallowedModifiers!=null?disallowedModifiers:[]),stopOnStartOfClassStaticBlock);if(!modifier)break;if(tsIsAccessModifier(modifier)){if(modified.accessibility){this.raise(TSErrors.DuplicateAccessibilityModifier,startLoc,{modifier});}else{enforceOrder(startLoc,modifier,modifier,\"override\");enforceOrder(startLoc,modifier,modifier,\"static\");enforceOrder(startLoc,modifier,modifier,\"readonly\");modified.accessibility=modifier;}}else if(tsIsVarianceAnnotations(modifier)){if(modified[modifier]){this.raise(TSErrors.DuplicateModifier,startLoc,{modifier});}modified[modifier]=true;enforceOrder(startLoc,modifier,\"in\",\"out\");}else{if(hasOwnProperty.call(modified,modifier)){this.raise(TSErrors.DuplicateModifier,startLoc,{modifier});}else{enforceOrder(startLoc,modifier,\"static\",\"readonly\");enforceOrder(startLoc,modifier,\"static\",\"override\");enforceOrder(startLoc,modifier,\"override\",\"readonly\");enforceOrder(startLoc,modifier,\"abstract\",\"override\");incompatible(startLoc,modifier,\"declare\",\"override\");incompatible(startLoc,modifier,\"static\",\"abstract\");}modified[modifier]=true;}if(disallowedModifiers!=null&&disallowedModifiers.includes(modifier)){this.raise(errorTemplate,startLoc,{modifier});}}}tsIsListTerminator(kind){switch(kind){case\"EnumMembers\":case\"TypeMembers\":return this.match(8);case\"HeritageClauseElement\":return this.match(5);case\"TupleElementTypes\":return this.match(3);case\"TypeParametersOrArguments\":return this.match(48);}}tsParseList(kind,parseElement){const result=[];while(!this.tsIsListTerminator(kind)){result.push(parseElement());}return result;}tsParseDelimitedList(kind,parseElement,refTrailingCommaPos){return nonNull(this.tsParseDelimitedListWorker(kind,parseElement,true,refTrailingCommaPos));}tsParseDelimitedListWorker(kind,parseElement,expectSuccess,refTrailingCommaPos){const result=[];let trailingCommaPos=-1;for(;;){if(this.tsIsListTerminator(kind)){break;}trailingCommaPos=-1;const element=parseElement();if(element==null){return undefined;}result.push(element);if(this.eat(12)){trailingCommaPos=this.state.lastTokStartLoc.index;continue;}if(this.tsIsListTerminator(kind)){break;}if(expectSuccess){this.expect(12);}return undefined;}if(refTrailingCommaPos){refTrailingCommaPos.value=trailingCommaPos;}return result;}tsParseBracketedList(kind,parseElement,bracket,skipFirstToken,refTrailingCommaPos){if(!skipFirstToken){if(bracket){this.expect(0);}else{this.expect(47);}}const result=this.tsParseDelimitedList(kind,parseElement,refTrailingCommaPos);if(bracket){this.expect(3);}else{this.expect(48);}return result;}tsParseImportType(){const node=this.startNode();this.expect(83);this.expect(10);if(!this.match(134)){this.raise(TSErrors.UnsupportedImportTypeArgument,this.state.startLoc);{node.argument=super.parseExprAtom();}}else{{node.argument=this.parseStringLiteral(this.state.value);}}if(this.eat(12)){node.options=this.tsParseImportTypeOptions();}else{node.options=null;}this.expect(11);if(this.eat(16)){node.qualifier=this.tsParseEntityName(1|2);}if(this.match(47)){{node.typeParameters=this.tsParseTypeArguments();}}return this.finishNode(node,\"TSImportType\");}tsParseImportTypeOptions(){const node=this.startNode();this.expect(5);const withProperty=this.startNode();if(this.isContextual(76)){withProperty.method=false;withProperty.key=this.parseIdentifier(true);withProperty.computed=false;withProperty.shorthand=false;}else{this.unexpected(null,76);}this.expect(14);withProperty.value=this.tsParseImportTypeWithPropertyValue();node.properties=[this.finishObjectProperty(withProperty)];this.expect(8);return this.finishNode(node,\"ObjectExpression\");}tsParseImportTypeWithPropertyValue(){const node=this.startNode();const properties=[];this.expect(5);while(!this.match(8)){const type=this.state.type;if(tokenIsIdentifier(type)||type===134){properties.push(super.parsePropertyDefinition(null));}else{this.unexpected();}this.eat(12);}node.properties=properties;this.next();return this.finishNode(node,\"ObjectExpression\");}tsParseEntityName(flags){let entity;if(flags&1&&this.match(78)){if(flags&2){entity=this.parseIdentifier(true);}else{const node=this.startNode();this.next();entity=this.finishNode(node,\"ThisExpression\");}}else{entity=this.parseIdentifier(!!(flags&1));}while(this.eat(16)){const node=this.startNodeAtNode(entity);node.left=entity;node.right=this.parseIdentifier(!!(flags&1));entity=this.finishNode(node,\"TSQualifiedName\");}return entity;}tsParseTypeReference(){const node=this.startNode();node.typeName=this.tsParseEntityName(1);if(!this.hasPrecedingLineBreak()&&this.match(47)){{node.typeParameters=this.tsParseTypeArguments();}}return this.finishNode(node,\"TSTypeReference\");}tsParseThisTypePredicate(lhs){this.next();const node=this.startNodeAtNode(lhs);node.parameterName=lhs;node.typeAnnotation=this.tsParseTypeAnnotation(false);node.asserts=false;return this.finishNode(node,\"TSTypePredicate\");}tsParseThisTypeNode(){const node=this.startNode();this.next();return this.finishNode(node,\"TSThisType\");}tsParseTypeQuery(){const node=this.startNode();this.expect(87);if(this.match(83)){node.exprName=this.tsParseImportType();}else{{node.exprName=this.tsParseEntityName(1|2);}}if(!this.hasPrecedingLineBreak()&&this.match(47)){{node.typeParameters=this.tsParseTypeArguments();}}return this.finishNode(node,\"TSTypeQuery\");}tsParseTypeParameter(parseModifiers){const node=this.startNode();parseModifiers(node);node.name=this.tsParseTypeParameterName();node.constraint=this.tsEatThenParseType(81);node.default=this.tsEatThenParseType(29);return this.finishNode(node,\"TSTypeParameter\");}tsTryParseTypeParameters(parseModifiers){if(this.match(47)){return this.tsParseTypeParameters(parseModifiers);}}tsParseTypeParameters(parseModifiers){const node=this.startNode();if(this.match(47)||this.match(143)){this.next();}else{this.unexpected();}const refTrailingCommaPos={value:-1};node.params=this.tsParseBracketedList(\"TypeParametersOrArguments\",this.tsParseTypeParameter.bind(this,parseModifiers),false,true,refTrailingCommaPos);if(node.params.length===0){this.raise(TSErrors.EmptyTypeParameters,node);}if(refTrailingCommaPos.value!==-1){this.addExtra(node,\"trailingComma\",refTrailingCommaPos.value);}return this.finishNode(node,\"TSTypeParameterDeclaration\");}tsFillSignature(returnToken,signature){const returnTokenRequired=returnToken===19;const paramsKey=\"parameters\";const returnTypeKey=\"typeAnnotation\";signature.typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);this.expect(10);signature[paramsKey]=this.tsParseBindingListForSignature();if(returnTokenRequired){signature[returnTypeKey]=this.tsParseTypeOrTypePredicateAnnotation(returnToken);}else if(this.match(returnToken)){signature[returnTypeKey]=this.tsParseTypeOrTypePredicateAnnotation(returnToken);}}tsParseBindingListForSignature(){const list=super.parseBindingList(11,41,2);for(const pattern of list){const{type}=pattern;if(type===\"AssignmentPattern\"||type===\"TSParameterProperty\"){this.raise(TSErrors.UnsupportedSignatureParameterKind,pattern,{type});}}return list;}tsParseTypeMemberSemicolon(){if(!this.eat(12)&&!this.isLineTerminator()){this.expect(13);}}tsParseSignatureMember(kind,node){this.tsFillSignature(14,node);this.tsParseTypeMemberSemicolon();return this.finishNode(node,kind);}tsIsUnambiguouslyIndexSignature(){this.next();if(tokenIsIdentifier(this.state.type)){this.next();return this.match(14);}return false;}tsTryParseIndexSignature(node){if(!(this.match(0)&&this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))){return;}this.expect(0);const id=this.parseIdentifier();id.typeAnnotation=this.tsParseTypeAnnotation();this.resetEndLocation(id);this.expect(3);node.parameters=[id];const type=this.tsTryParseTypeAnnotation();if(type)node.typeAnnotation=type;this.tsParseTypeMemberSemicolon();return this.finishNode(node,\"TSIndexSignature\");}tsParsePropertyOrMethodSignature(node,readonly){if(this.eat(17))node.optional=true;if(this.match(10)||this.match(47)){if(readonly){this.raise(TSErrors.ReadonlyForMethodSignature,node);}const method=node;if(method.kind&&this.match(47)){this.raise(TSErrors.AccessorCannotHaveTypeParameters,this.state.curPosition());}this.tsFillSignature(14,method);this.tsParseTypeMemberSemicolon();const paramsKey=\"parameters\";const returnTypeKey=\"typeAnnotation\";if(method.kind===\"get\"){if(method[paramsKey].length>0){this.raise(Errors.BadGetterArity,this.state.curPosition());if(this.isThisParam(method[paramsKey][0])){this.raise(TSErrors.AccessorCannotDeclareThisParameter,this.state.curPosition());}}}else if(method.kind===\"set\"){if(method[paramsKey].length!==1){this.raise(Errors.BadSetterArity,this.state.curPosition());}else{const firstParameter=method[paramsKey][0];if(this.isThisParam(firstParameter)){this.raise(TSErrors.AccessorCannotDeclareThisParameter,this.state.curPosition());}if(firstParameter.type===\"Identifier\"&&firstParameter.optional){this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter,this.state.curPosition());}if(firstParameter.type===\"RestElement\"){this.raise(TSErrors.SetAccessorCannotHaveRestParameter,this.state.curPosition());}}if(method[returnTypeKey]){this.raise(TSErrors.SetAccessorCannotHaveReturnType,method[returnTypeKey]);}}else{method.kind=\"method\";}return this.finishNode(method,\"TSMethodSignature\");}else{const property=node;if(readonly)property.readonly=true;const type=this.tsTryParseTypeAnnotation();if(type)property.typeAnnotation=type;this.tsParseTypeMemberSemicolon();return this.finishNode(property,\"TSPropertySignature\");}}tsParseTypeMember(){const node=this.startNode();if(this.match(10)||this.match(47)){return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\",node);}if(this.match(77)){const id=this.startNode();this.next();if(this.match(10)||this.match(47)){return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\",node);}else{node.key=this.createIdentifier(id,\"new\");return this.tsParsePropertyOrMethodSignature(node,false);}}this.tsParseModifiers({allowedModifiers:[\"readonly\"],disallowedModifiers:[\"declare\",\"abstract\",\"private\",\"protected\",\"public\",\"static\",\"override\"]},node);const idx=this.tsTryParseIndexSignature(node);if(idx){return idx;}super.parsePropertyName(node);if(!node.computed&&node.key.type===\"Identifier\"&&(node.key.name===\"get\"||node.key.name===\"set\")&&this.tsTokenCanFollowModifier()){node.kind=node.key.name;super.parsePropertyName(node);if(!this.match(10)&&!this.match(47)){this.unexpected(null,10);}}return this.tsParsePropertyOrMethodSignature(node,!!node.readonly);}tsParseTypeLiteral(){const node=this.startNode();node.members=this.tsParseObjectTypeMembers();return this.finishNode(node,\"TSTypeLiteral\");}tsParseObjectTypeMembers(){this.expect(5);const members=this.tsParseList(\"TypeMembers\",this.tsParseTypeMember.bind(this));this.expect(8);return members;}tsIsStartOfMappedType(){this.next();if(this.eat(53)){return this.isContextual(122);}if(this.isContextual(122)){this.next();}if(!this.match(0)){return false;}this.next();if(!this.tsIsIdentifier()){return false;}this.next();return this.match(58);}tsParseMappedType(){const node=this.startNode();this.expect(5);if(this.match(53)){node.readonly=this.state.value;this.next();this.expectContextual(122);}else if(this.eatContextual(122)){node.readonly=true;}this.expect(0);{const typeParameter=this.startNode();typeParameter.name=this.tsParseTypeParameterName();typeParameter.constraint=this.tsExpectThenParseType(58);node.typeParameter=this.finishNode(typeParameter,\"TSTypeParameter\");}node.nameType=this.eatContextual(93)?this.tsParseType():null;this.expect(3);if(this.match(53)){node.optional=this.state.value;this.next();this.expect(17);}else if(this.eat(17)){node.optional=true;}node.typeAnnotation=this.tsTryParseType();this.semicolon();this.expect(8);return this.finishNode(node,\"TSMappedType\");}tsParseTupleType(){const node=this.startNode();node.elementTypes=this.tsParseBracketedList(\"TupleElementTypes\",this.tsParseTupleElementType.bind(this),true,false);let seenOptionalElement=false;node.elementTypes.forEach(elementNode=>{const{type}=elementNode;if(seenOptionalElement&&type!==\"TSRestType\"&&type!==\"TSOptionalType\"&&!(type===\"TSNamedTupleMember\"&&elementNode.optional)){this.raise(TSErrors.OptionalTypeBeforeRequired,elementNode);}seenOptionalElement||(seenOptionalElement=type===\"TSNamedTupleMember\"&&elementNode.optional||type===\"TSOptionalType\");});return this.finishNode(node,\"TSTupleType\");}tsParseTupleElementType(){const restStartLoc=this.state.startLoc;const rest=this.eat(21);const{startLoc}=this.state;let labeled;let label;let optional;let type;const isWord=tokenIsKeywordOrIdentifier(this.state.type);const chAfterWord=isWord?this.lookaheadCharCode():null;if(chAfterWord===58){labeled=true;optional=false;label=this.parseIdentifier(true);this.expect(14);type=this.tsParseType();}else if(chAfterWord===63){optional=true;const wordName=this.state.value;const typeOrLabel=this.tsParseNonArrayType();if(this.lookaheadCharCode()===58){labeled=true;label=this.createIdentifier(this.startNodeAt(startLoc),wordName);this.expect(17);this.expect(14);type=this.tsParseType();}else{labeled=false;type=typeOrLabel;this.expect(17);}}else{type=this.tsParseType();optional=this.eat(17);labeled=this.eat(14);}if(labeled){let labeledNode;if(label){labeledNode=this.startNodeAt(startLoc);labeledNode.optional=optional;labeledNode.label=label;labeledNode.elementType=type;if(this.eat(17)){labeledNode.optional=true;this.raise(TSErrors.TupleOptionalAfterType,this.state.lastTokStartLoc);}}else{labeledNode=this.startNodeAt(startLoc);labeledNode.optional=optional;this.raise(TSErrors.InvalidTupleMemberLabel,type);labeledNode.label=type;labeledNode.elementType=this.tsParseType();}type=this.finishNode(labeledNode,\"TSNamedTupleMember\");}else if(optional){const optionalTypeNode=this.startNodeAt(startLoc);optionalTypeNode.typeAnnotation=type;type=this.finishNode(optionalTypeNode,\"TSOptionalType\");}if(rest){const restNode=this.startNodeAt(restStartLoc);restNode.typeAnnotation=type;type=this.finishNode(restNode,\"TSRestType\");}return type;}tsParseParenthesizedType(){const node=this.startNode();this.expect(10);node.typeAnnotation=this.tsParseType();this.expect(11);return this.finishNode(node,\"TSParenthesizedType\");}tsParseFunctionOrConstructorType(type,abstract){const node=this.startNode();if(type===\"TSConstructorType\"){node.abstract=!!abstract;if(abstract)this.next();this.next();}this.tsInAllowConditionalTypesContext(()=>this.tsFillSignature(19,node));return this.finishNode(node,type);}tsParseLiteralTypeNode(){const node=this.startNode();switch(this.state.type){case 135:case 136:case 134:case 85:case 86:node.literal=super.parseExprAtom();break;default:this.unexpected();}return this.finishNode(node,\"TSLiteralType\");}tsParseTemplateLiteralType(){{const node=this.startNode();node.literal=super.parseTemplate(false);return this.finishNode(node,\"TSLiteralType\");}}parseTemplateSubstitution(){if(this.state.inType)return this.tsParseType();return super.parseTemplateSubstitution();}tsParseThisTypeOrThisTypePredicate(){const thisKeyword=this.tsParseThisTypeNode();if(this.isContextual(116)&&!this.hasPrecedingLineBreak()){return this.tsParseThisTypePredicate(thisKeyword);}else{return thisKeyword;}}tsParseNonArrayType(){switch(this.state.type){case 134:case 135:case 136:case 85:case 86:return this.tsParseLiteralTypeNode();case 53:if(this.state.value===\"-\"){const node=this.startNode();const nextToken=this.lookahead();if(nextToken.type!==135&&nextToken.type!==136){this.unexpected();}node.literal=this.parseMaybeUnary();return this.finishNode(node,\"TSLiteralType\");}break;case 78:return this.tsParseThisTypeOrThisTypePredicate();case 87:return this.tsParseTypeQuery();case 83:return this.tsParseImportType();case 5:return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))?this.tsParseMappedType():this.tsParseTypeLiteral();case 0:return this.tsParseTupleType();case 10:return this.tsParseParenthesizedType();case 25:case 24:return this.tsParseTemplateLiteralType();default:{const{type}=this.state;if(tokenIsIdentifier(type)||type===88||type===84){const nodeType=type===88?\"TSVoidKeyword\":type===84?\"TSNullKeyword\":keywordTypeFromName(this.state.value);if(nodeType!==undefined&&this.lookaheadCharCode()!==46){const node=this.startNode();this.next();return this.finishNode(node,nodeType);}return this.tsParseTypeReference();}}}this.unexpected();}tsParseArrayTypeOrHigher(){const{startLoc}=this.state;let type=this.tsParseNonArrayType();while(!this.hasPrecedingLineBreak()&&this.eat(0)){if(this.match(3)){const node=this.startNodeAt(startLoc);node.elementType=type;this.expect(3);type=this.finishNode(node,\"TSArrayType\");}else{const node=this.startNodeAt(startLoc);node.objectType=type;node.indexType=this.tsParseType();this.expect(3);type=this.finishNode(node,\"TSIndexedAccessType\");}}return type;}tsParseTypeOperator(){const node=this.startNode();const operator=this.state.value;this.next();node.operator=operator;node.typeAnnotation=this.tsParseTypeOperatorOrHigher();if(operator===\"readonly\"){this.tsCheckTypeAnnotationForReadOnly(node);}return this.finishNode(node,\"TSTypeOperator\");}tsCheckTypeAnnotationForReadOnly(node){switch(node.typeAnnotation.type){case\"TSTupleType\":case\"TSArrayType\":return;default:this.raise(TSErrors.UnexpectedReadonly,node);}}tsParseInferType(){const node=this.startNode();this.expectContextual(115);const typeParameter=this.startNode();typeParameter.name=this.tsParseTypeParameterName();typeParameter.constraint=this.tsTryParse(()=>this.tsParseConstraintForInferType());node.typeParameter=this.finishNode(typeParameter,\"TSTypeParameter\");return this.finishNode(node,\"TSInferType\");}tsParseConstraintForInferType(){if(this.eat(81)){const constraint=this.tsInDisallowConditionalTypesContext(()=>this.tsParseType());if(this.state.inDisallowConditionalTypesContext||!this.match(17)){return constraint;}}}tsParseTypeOperatorOrHigher(){const isTypeOperator=tokenIsTSTypeOperator(this.state.type)&&!this.state.containsEsc;return isTypeOperator?this.tsParseTypeOperator():this.isContextual(115)?this.tsParseInferType():this.tsInAllowConditionalTypesContext(()=>this.tsParseArrayTypeOrHigher());}tsParseUnionOrIntersectionType(kind,parseConstituentType,operator){const node=this.startNode();const hasLeadingOperator=this.eat(operator);const types=[];do{types.push(parseConstituentType());}while(this.eat(operator));if(types.length===1&&!hasLeadingOperator){return types[0];}node.types=types;return this.finishNode(node,kind);}tsParseIntersectionTypeOrHigher(){return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\",this.tsParseTypeOperatorOrHigher.bind(this),45);}tsParseUnionTypeOrHigher(){return this.tsParseUnionOrIntersectionType(\"TSUnionType\",this.tsParseIntersectionTypeOrHigher.bind(this),43);}tsIsStartOfFunctionType(){if(this.match(47)){return true;}return this.match(10)&&this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));}tsSkipParameterStart(){if(tokenIsIdentifier(this.state.type)||this.match(78)){this.next();return true;}if(this.match(5)){const{errors}=this.state;const previousErrorCount=errors.length;try{this.parseObjectLike(8,true);return errors.length===previousErrorCount;}catch(_unused){return false;}}if(this.match(0)){this.next();const{errors}=this.state;const previousErrorCount=errors.length;try{super.parseBindingList(3,93,1);return errors.length===previousErrorCount;}catch(_unused2){return false;}}return false;}tsIsUnambiguouslyStartOfFunctionType(){this.next();if(this.match(11)||this.match(21)){return true;}if(this.tsSkipParameterStart()){if(this.match(14)||this.match(12)||this.match(17)||this.match(29)){return true;}if(this.match(11)){this.next();if(this.match(19)){return true;}}}return false;}tsParseTypeOrTypePredicateAnnotation(returnToken){return this.tsInType(()=>{const t=this.startNode();this.expect(returnToken);const node=this.startNode();const asserts=!!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));if(asserts&&this.match(78)){let thisTypePredicate=this.tsParseThisTypeOrThisTypePredicate();if(thisTypePredicate.type===\"TSThisType\"){node.parameterName=thisTypePredicate;node.asserts=true;node.typeAnnotation=null;thisTypePredicate=this.finishNode(node,\"TSTypePredicate\");}else{this.resetStartLocationFromNode(thisTypePredicate,node);thisTypePredicate.asserts=true;}t.typeAnnotation=thisTypePredicate;return this.finishNode(t,\"TSTypeAnnotation\");}const typePredicateVariable=this.tsIsIdentifier()&&this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));if(!typePredicateVariable){if(!asserts){return this.tsParseTypeAnnotation(false,t);}node.parameterName=this.parseIdentifier();node.asserts=asserts;node.typeAnnotation=null;t.typeAnnotation=this.finishNode(node,\"TSTypePredicate\");return this.finishNode(t,\"TSTypeAnnotation\");}const type=this.tsParseTypeAnnotation(false);node.parameterName=typePredicateVariable;node.typeAnnotation=type;node.asserts=asserts;t.typeAnnotation=this.finishNode(node,\"TSTypePredicate\");return this.finishNode(t,\"TSTypeAnnotation\");});}tsTryParseTypeOrTypePredicateAnnotation(){if(this.match(14)){return this.tsParseTypeOrTypePredicateAnnotation(14);}}tsTryParseTypeAnnotation(){if(this.match(14)){return this.tsParseTypeAnnotation();}}tsTryParseType(){return this.tsEatThenParseType(14);}tsParseTypePredicatePrefix(){const id=this.parseIdentifier();if(this.isContextual(116)&&!this.hasPrecedingLineBreak()){this.next();return id;}}tsParseTypePredicateAsserts(){if(this.state.type!==109){return false;}const containsEsc=this.state.containsEsc;this.next();if(!tokenIsIdentifier(this.state.type)&&!this.match(78)){return false;}if(containsEsc){this.raise(Errors.InvalidEscapedReservedWord,this.state.lastTokStartLoc,{reservedWord:\"asserts\"});}return true;}tsParseTypeAnnotation(eatColon=true,t=this.startNode()){this.tsInType(()=>{if(eatColon)this.expect(14);t.typeAnnotation=this.tsParseType();});return this.finishNode(t,\"TSTypeAnnotation\");}tsParseType(){assert(this.state.inType);const type=this.tsParseNonConditionalType();if(this.state.inDisallowConditionalTypesContext||this.hasPrecedingLineBreak()||!this.eat(81)){return type;}const node=this.startNodeAtNode(type);node.checkType=type;node.extendsType=this.tsInDisallowConditionalTypesContext(()=>this.tsParseNonConditionalType());this.expect(17);node.trueType=this.tsInAllowConditionalTypesContext(()=>this.tsParseType());this.expect(14);node.falseType=this.tsInAllowConditionalTypesContext(()=>this.tsParseType());return this.finishNode(node,\"TSConditionalType\");}isAbstractConstructorSignature(){return this.isContextual(124)&&this.lookahead().type===77;}tsParseNonConditionalType(){if(this.tsIsStartOfFunctionType()){return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");}if(this.match(77)){return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");}else if(this.isAbstractConstructorSignature()){return this.tsParseFunctionOrConstructorType(\"TSConstructorType\",true);}return this.tsParseUnionTypeOrHigher();}tsParseTypeAssertion(){if(this.getPluginOption(\"typescript\",\"disallowAmbiguousJSXLike\")){this.raise(TSErrors.ReservedTypeAssertion,this.state.startLoc);}const node=this.startNode();node.typeAnnotation=this.tsInType(()=>{this.next();return this.match(75)?this.tsParseTypeReference():this.tsParseType();});this.expect(48);node.expression=this.parseMaybeUnary();return this.finishNode(node,\"TSTypeAssertion\");}tsParseHeritageClause(token){const originalStartLoc=this.state.startLoc;const delimitedList=this.tsParseDelimitedList(\"HeritageClauseElement\",()=>{{const node=this.startNode();node.expression=this.tsParseEntityName(1|2);if(this.match(47)){node.typeParameters=this.tsParseTypeArguments();}return this.finishNode(node,\"TSExpressionWithTypeArguments\");}});if(!delimitedList.length){this.raise(TSErrors.EmptyHeritageClauseType,originalStartLoc,{token});}return delimitedList;}tsParseInterfaceDeclaration(node,properties={}){if(this.hasFollowingLineBreak())return null;this.expectContextual(129);if(properties.declare)node.declare=true;if(tokenIsIdentifier(this.state.type)){node.id=this.parseIdentifier();this.checkIdentifier(node.id,130);}else{node.id=null;this.raise(TSErrors.MissingInterfaceName,this.state.startLoc);}node.typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);if(this.eat(81)){node.extends=this.tsParseHeritageClause(\"extends\");}const body=this.startNode();body.body=this.tsInType(this.tsParseObjectTypeMembers.bind(this));node.body=this.finishNode(body,\"TSInterfaceBody\");return this.finishNode(node,\"TSInterfaceDeclaration\");}tsParseTypeAliasDeclaration(node){node.id=this.parseIdentifier();this.checkIdentifier(node.id,2);node.typeAnnotation=this.tsInType(()=>{node.typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutModifiers);this.expect(29);if(this.isContextual(114)&&this.lookahead().type!==16){const node=this.startNode();this.next();return this.finishNode(node,\"TSIntrinsicKeyword\");}return this.tsParseType();});this.semicolon();return this.finishNode(node,\"TSTypeAliasDeclaration\");}tsInTopLevelContext(cb){if(this.curContext()!==types.brace){const oldContext=this.state.context;this.state.context=[oldContext[0]];try{return cb();}finally{this.state.context=oldContext;}}else{return cb();}}tsInType(cb){const oldInType=this.state.inType;this.state.inType=true;try{return cb();}finally{this.state.inType=oldInType;}}tsInDisallowConditionalTypesContext(cb){const oldInDisallowConditionalTypesContext=this.state.inDisallowConditionalTypesContext;this.state.inDisallowConditionalTypesContext=true;try{return cb();}finally{this.state.inDisallowConditionalTypesContext=oldInDisallowConditionalTypesContext;}}tsInAllowConditionalTypesContext(cb){const oldInDisallowConditionalTypesContext=this.state.inDisallowConditionalTypesContext;this.state.inDisallowConditionalTypesContext=false;try{return cb();}finally{this.state.inDisallowConditionalTypesContext=oldInDisallowConditionalTypesContext;}}tsEatThenParseType(token){if(this.match(token)){return this.tsNextThenParseType();}}tsExpectThenParseType(token){return this.tsInType(()=>{this.expect(token);return this.tsParseType();});}tsNextThenParseType(){return this.tsInType(()=>{this.next();return this.tsParseType();});}tsParseEnumMember(){const node=this.startNode();node.id=this.match(134)?super.parseStringLiteral(this.state.value):this.parseIdentifier(true);if(this.eat(29)){node.initializer=super.parseMaybeAssignAllowIn();}return this.finishNode(node,\"TSEnumMember\");}tsParseEnumDeclaration(node,properties={}){if(properties.const)node.const=true;if(properties.declare)node.declare=true;this.expectContextual(126);node.id=this.parseIdentifier();this.checkIdentifier(node.id,node.const?8971:8459);{this.expect(5);node.members=this.tsParseDelimitedList(\"EnumMembers\",this.tsParseEnumMember.bind(this));this.expect(8);}return this.finishNode(node,\"TSEnumDeclaration\");}tsParseEnumBody(){const node=this.startNode();this.expect(5);node.members=this.tsParseDelimitedList(\"EnumMembers\",this.tsParseEnumMember.bind(this));this.expect(8);return this.finishNode(node,\"TSEnumBody\");}tsParseModuleBlock(){const node=this.startNode();this.scope.enter(0);this.expect(5);super.parseBlockOrModuleBlockBody(node.body=[],undefined,true,8);this.scope.exit();return this.finishNode(node,\"TSModuleBlock\");}tsParseModuleOrNamespaceDeclaration(node,nested=false){node.id=this.parseIdentifier();if(!nested){this.checkIdentifier(node.id,1024);}if(this.eat(16)){const inner=this.startNode();this.tsParseModuleOrNamespaceDeclaration(inner,true);node.body=inner;}else{this.scope.enter(256);this.prodParam.enter(0);node.body=this.tsParseModuleBlock();this.prodParam.exit();this.scope.exit();}return this.finishNode(node,\"TSModuleDeclaration\");}tsParseAmbientExternalModuleDeclaration(node){if(this.isContextual(112)){node.kind=\"global\";{node.global=true;}node.id=this.parseIdentifier();}else if(this.match(134)){node.kind=\"module\";node.id=super.parseStringLiteral(this.state.value);}else{this.unexpected();}if(this.match(5)){this.scope.enter(256);this.prodParam.enter(0);node.body=this.tsParseModuleBlock();this.prodParam.exit();this.scope.exit();}else{this.semicolon();}return this.finishNode(node,\"TSModuleDeclaration\");}tsParseImportEqualsDeclaration(node,maybeDefaultIdentifier,isExport){{node.isExport=isExport||false;}node.id=maybeDefaultIdentifier||this.parseIdentifier();this.checkIdentifier(node.id,4096);this.expect(29);const moduleReference=this.tsParseModuleReference();if(node.importKind===\"type\"&&moduleReference.type!==\"TSExternalModuleReference\"){this.raise(TSErrors.ImportAliasHasImportType,moduleReference);}node.moduleReference=moduleReference;this.semicolon();return this.finishNode(node,\"TSImportEqualsDeclaration\");}tsIsExternalModuleReference(){return this.isContextual(119)&&this.lookaheadCharCode()===40;}tsParseModuleReference(){return this.tsIsExternalModuleReference()?this.tsParseExternalModuleReference():this.tsParseEntityName(0);}tsParseExternalModuleReference(){const node=this.startNode();this.expectContextual(119);this.expect(10);if(!this.match(134)){this.unexpected();}node.expression=super.parseExprAtom();this.expect(11);this.sawUnambiguousESM=true;return this.finishNode(node,\"TSExternalModuleReference\");}tsLookAhead(f){const state=this.state.clone();const res=f();this.state=state;return res;}tsTryParseAndCatch(f){const result=this.tryParse(abort=>f()||abort());if(result.aborted||!result.node)return;if(result.error)this.state=result.failState;return result.node;}tsTryParse(f){const state=this.state.clone();const result=f();if(result!==undefined&&result!==false){return result;}this.state=state;}tsTryParseDeclare(nany){if(this.isLineTerminator()){return;}let startType=this.state.type;let kind;if(this.isContextual(100)){startType=74;kind=\"let\";}return this.tsInAmbientContext(()=>{switch(startType){case 68:nany.declare=true;return super.parseFunctionStatement(nany,false,false);case 80:nany.declare=true;return this.parseClass(nany,true,false);case 126:return this.tsParseEnumDeclaration(nany,{declare:true});case 112:return this.tsParseAmbientExternalModuleDeclaration(nany);case 75:case 74:if(!this.match(75)||!this.isLookaheadContextual(\"enum\")){nany.declare=true;return this.parseVarStatement(nany,kind||this.state.value,true);}this.expect(75);return this.tsParseEnumDeclaration(nany,{const:true,declare:true});case 129:{const result=this.tsParseInterfaceDeclaration(nany,{declare:true});if(result)return result;}default:if(tokenIsIdentifier(startType)){return this.tsParseDeclaration(nany,this.state.value,true,null);}}});}tsTryParseExportDeclaration(){return this.tsParseDeclaration(this.startNode(),this.state.value,true,null);}tsParseExpressionStatement(node,expr,decorators){switch(expr.name){case\"declare\":{const declaration=this.tsTryParseDeclare(node);if(declaration){declaration.declare=true;}return declaration;}case\"global\":if(this.match(5)){this.scope.enter(256);this.prodParam.enter(0);const mod=node;mod.kind=\"global\";{node.global=true;}mod.id=expr;mod.body=this.tsParseModuleBlock();this.scope.exit();this.prodParam.exit();return this.finishNode(mod,\"TSModuleDeclaration\");}break;default:return this.tsParseDeclaration(node,expr.name,false,decorators);}}tsParseDeclaration(node,value,next,decorators){switch(value){case\"abstract\":if(this.tsCheckLineTerminator(next)&&(this.match(80)||tokenIsIdentifier(this.state.type))){return this.tsParseAbstractDeclaration(node,decorators);}break;case\"module\":if(this.tsCheckLineTerminator(next)){if(this.match(134)){return this.tsParseAmbientExternalModuleDeclaration(node);}else if(tokenIsIdentifier(this.state.type)){node.kind=\"module\";return this.tsParseModuleOrNamespaceDeclaration(node);}}break;case\"namespace\":if(this.tsCheckLineTerminator(next)&&tokenIsIdentifier(this.state.type)){node.kind=\"namespace\";return this.tsParseModuleOrNamespaceDeclaration(node);}break;case\"type\":if(this.tsCheckLineTerminator(next)&&tokenIsIdentifier(this.state.type)){return this.tsParseTypeAliasDeclaration(node);}break;}}tsCheckLineTerminator(next){if(next){if(this.hasFollowingLineBreak())return false;this.next();return true;}return!this.isLineTerminator();}tsTryParseGenericAsyncArrowFunction(startLoc){if(!this.match(47))return;const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;this.state.maybeInArrowParameters=true;const res=this.tsTryParseAndCatch(()=>{const node=this.startNodeAt(startLoc);node.typeParameters=this.tsParseTypeParameters(this.tsParseConstModifier);super.parseFunctionParams(node);node.returnType=this.tsTryParseTypeOrTypePredicateAnnotation();this.expect(19);return node;});this.state.maybeInArrowParameters=oldMaybeInArrowParameters;if(!res)return;return super.parseArrowExpression(res,null,true);}tsParseTypeArgumentsInExpression(){if(this.reScan_lt()!==47)return;return this.tsParseTypeArguments();}tsParseTypeArguments(){const node=this.startNode();node.params=this.tsInType(()=>this.tsInTopLevelContext(()=>{this.expect(47);return this.tsParseDelimitedList(\"TypeParametersOrArguments\",this.tsParseType.bind(this));}));if(node.params.length===0){this.raise(TSErrors.EmptyTypeArguments,node);}else if(!this.state.inType&&this.curContext()===types.brace){this.reScan_lt_gt();}this.expect(48);return this.finishNode(node,\"TSTypeParameterInstantiation\");}tsIsDeclarationStart(){return tokenIsTSDeclarationStart(this.state.type);}isExportDefaultSpecifier(){if(this.tsIsDeclarationStart())return false;return super.isExportDefaultSpecifier();}parseBindingElement(flags,decorators){const startLoc=decorators.length?decorators[0].loc.start:this.state.startLoc;const modified={};this.tsParseModifiers({allowedModifiers:[\"public\",\"private\",\"protected\",\"override\",\"readonly\"]},modified);const accessibility=modified.accessibility;const override=modified.override;const readonly=modified.readonly;if(!(flags&4)&&(accessibility||readonly||override)){this.raise(TSErrors.UnexpectedParameterModifier,startLoc);}const left=this.parseMaybeDefault();if(flags&2){this.parseFunctionParamType(left);}const elt=this.parseMaybeDefault(left.loc.start,left);if(accessibility||readonly||override){const pp=this.startNodeAt(startLoc);if(decorators.length){pp.decorators=decorators;}if(accessibility)pp.accessibility=accessibility;if(readonly)pp.readonly=readonly;if(override)pp.override=override;if(elt.type!==\"Identifier\"&&elt.type!==\"AssignmentPattern\"){this.raise(TSErrors.UnsupportedParameterPropertyKind,pp);}pp.parameter=elt;return this.finishNode(pp,\"TSParameterProperty\");}if(decorators.length){left.decorators=decorators;}return elt;}isSimpleParameter(node){return node.type===\"TSParameterProperty\"&&super.isSimpleParameter(node.parameter)||super.isSimpleParameter(node);}tsDisallowOptionalPattern(node){for(const param of node.params){if(param.type!==\"Identifier\"&&param.optional&&!this.state.isAmbientContext){this.raise(TSErrors.PatternIsOptional,param);}}}setArrowFunctionParameters(node,params,trailingCommaLoc){super.setArrowFunctionParameters(node,params,trailingCommaLoc);this.tsDisallowOptionalPattern(node);}parseFunctionBodyAndFinish(node,type,isMethod=false){if(this.match(14)){node.returnType=this.tsParseTypeOrTypePredicateAnnotation(14);}const bodilessType=type===\"FunctionDeclaration\"?\"TSDeclareFunction\":type===\"ClassMethod\"||type===\"ClassPrivateMethod\"?\"TSDeclareMethod\":undefined;if(bodilessType&&!this.match(5)&&this.isLineTerminator()){return this.finishNode(node,bodilessType);}if(bodilessType===\"TSDeclareFunction\"&&this.state.isAmbientContext){this.raise(TSErrors.DeclareFunctionHasImplementation,node);if(node.declare){return super.parseFunctionBodyAndFinish(node,bodilessType,isMethod);}}this.tsDisallowOptionalPattern(node);return super.parseFunctionBodyAndFinish(node,type,isMethod);}registerFunctionStatementId(node){if(!node.body&&node.id){this.checkIdentifier(node.id,1024);}else{super.registerFunctionStatementId(node);}}tsCheckForInvalidTypeCasts(items){items.forEach(node=>{if((node==null?void 0:node.type)===\"TSTypeCastExpression\"){this.raise(TSErrors.UnexpectedTypeAnnotation,node.typeAnnotation);}});}toReferencedList(exprList,isInParens){this.tsCheckForInvalidTypeCasts(exprList);return exprList;}parseArrayLike(close,canBePattern,isTuple,refExpressionErrors){const node=super.parseArrayLike(close,canBePattern,isTuple,refExpressionErrors);if(node.type===\"ArrayExpression\"){this.tsCheckForInvalidTypeCasts(node.elements);}return node;}parseSubscript(base,startLoc,noCalls,state){if(!this.hasPrecedingLineBreak()&&this.match(35)){this.state.canStartJSXElement=false;this.next();const nonNullExpression=this.startNodeAt(startLoc);nonNullExpression.expression=base;return this.finishNode(nonNullExpression,\"TSNonNullExpression\");}let isOptionalCall=false;if(this.match(18)&&this.lookaheadCharCode()===60){if(noCalls){state.stop=true;return base;}state.optionalChainMember=isOptionalCall=true;this.next();}if(this.match(47)||this.match(51)){let missingParenErrorLoc;const result=this.tsTryParseAndCatch(()=>{if(!noCalls&&this.atPossibleAsyncArrow(base)){const asyncArrowFn=this.tsTryParseGenericAsyncArrowFunction(startLoc);if(asyncArrowFn){return asyncArrowFn;}}const typeArguments=this.tsParseTypeArgumentsInExpression();if(!typeArguments)return;if(isOptionalCall&&!this.match(10)){missingParenErrorLoc=this.state.curPosition();return;}if(tokenIsTemplate(this.state.type)){const result=super.parseTaggedTemplateExpression(base,startLoc,state);{result.typeParameters=typeArguments;}return result;}if(!noCalls&&this.eat(10)){const node=this.startNodeAt(startLoc);node.callee=base;node.arguments=this.parseCallExpressionArguments(11);this.tsCheckForInvalidTypeCasts(node.arguments);{node.typeParameters=typeArguments;}if(state.optionalChainMember){node.optional=isOptionalCall;}return this.finishCallExpression(node,state.optionalChainMember);}const tokenType=this.state.type;if(tokenType===48||tokenType===52||tokenType!==10&&tokenCanStartExpression(tokenType)&&!this.hasPrecedingLineBreak()){return;}const node=this.startNodeAt(startLoc);node.expression=base;{node.typeParameters=typeArguments;}return this.finishNode(node,\"TSInstantiationExpression\");});if(missingParenErrorLoc){this.unexpected(missingParenErrorLoc,10);}if(result){if(result.type===\"TSInstantiationExpression\"){if(this.match(16)||this.match(18)&&this.lookaheadCharCode()!==40){this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression,this.state.startLoc);}if(!this.match(16)&&!this.match(18)){result.expression=super.stopParseSubscript(base,state);}}return result;}}return super.parseSubscript(base,startLoc,noCalls,state);}parseNewCallee(node){var _callee$extra;super.parseNewCallee(node);const{callee}=node;if(callee.type===\"TSInstantiationExpression\"&&!((_callee$extra=callee.extra)!=null&&_callee$extra.parenthesized)){{node.typeParameters=callee.typeParameters;}node.callee=callee.expression;}}parseExprOp(left,leftStartLoc,minPrec){let isSatisfies;if(tokenOperatorPrecedence(58)>minPrec&&!this.hasPrecedingLineBreak()&&(this.isContextual(93)||(isSatisfies=this.isContextual(120)))){const node=this.startNodeAt(leftStartLoc);node.expression=left;node.typeAnnotation=this.tsInType(()=>{this.next();if(this.match(75)){if(isSatisfies){this.raise(Errors.UnexpectedKeyword,this.state.startLoc,{keyword:\"const\"});}return this.tsParseTypeReference();}return this.tsParseType();});this.finishNode(node,isSatisfies?\"TSSatisfiesExpression\":\"TSAsExpression\");this.reScan_lt_gt();return this.parseExprOp(node,leftStartLoc,minPrec);}return super.parseExprOp(left,leftStartLoc,minPrec);}checkReservedWord(word,startLoc,checkKeywords,isBinding){if(!this.state.isAmbientContext){super.checkReservedWord(word,startLoc,checkKeywords,isBinding);}}checkImportReflection(node){super.checkImportReflection(node);if(node.module&&node.importKind!==\"value\"){this.raise(TSErrors.ImportReflectionHasImportType,node.specifiers[0].loc.start);}}checkDuplicateExports(){}isPotentialImportPhase(isExport){if(super.isPotentialImportPhase(isExport))return true;if(this.isContextual(130)){const ch=this.lookaheadCharCode();return isExport?ch===123||ch===42:ch!==61;}return!isExport&&this.isContextual(87);}applyImportPhase(node,isExport,phase,loc){super.applyImportPhase(node,isExport,phase,loc);if(isExport){node.exportKind=phase===\"type\"?\"type\":\"value\";}else{node.importKind=phase===\"type\"||phase===\"typeof\"?phase:\"value\";}}parseImport(node){if(this.match(134)){node.importKind=\"value\";return super.parseImport(node);}let importNode;if(tokenIsIdentifier(this.state.type)&&this.lookaheadCharCode()===61){node.importKind=\"value\";return this.tsParseImportEqualsDeclaration(node);}else if(this.isContextual(130)){const maybeDefaultIdentifier=this.parseMaybeImportPhase(node,false);if(this.lookaheadCharCode()===61){return this.tsParseImportEqualsDeclaration(node,maybeDefaultIdentifier);}else{importNode=super.parseImportSpecifiersAndAfter(node,maybeDefaultIdentifier);}}else{importNode=super.parseImport(node);}if(importNode.importKind===\"type\"&&importNode.specifiers.length>1&&importNode.specifiers[0].type===\"ImportDefaultSpecifier\"){this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed,importNode);}return importNode;}parseExport(node,decorators){if(this.match(83)){const nodeImportEquals=node;this.next();let maybeDefaultIdentifier=null;if(this.isContextual(130)&&this.isPotentialImportPhase(false)){maybeDefaultIdentifier=this.parseMaybeImportPhase(nodeImportEquals,false);}else{nodeImportEquals.importKind=\"value\";}const declaration=this.tsParseImportEqualsDeclaration(nodeImportEquals,maybeDefaultIdentifier,true);{return declaration;}}else if(this.eat(29)){const assign=node;assign.expression=super.parseExpression();this.semicolon();this.sawUnambiguousESM=true;return this.finishNode(assign,\"TSExportAssignment\");}else if(this.eatContextual(93)){const decl=node;this.expectContextual(128);decl.id=this.parseIdentifier();this.semicolon();return this.finishNode(decl,\"TSNamespaceExportDeclaration\");}else{return super.parseExport(node,decorators);}}isAbstractClass(){return this.isContextual(124)&&this.lookahead().type===80;}parseExportDefaultExpression(){if(this.isAbstractClass()){const cls=this.startNode();this.next();cls.abstract=true;return this.parseClass(cls,true,true);}if(this.match(129)){const result=this.tsParseInterfaceDeclaration(this.startNode());if(result)return result;}return super.parseExportDefaultExpression();}parseVarStatement(node,kind,allowMissingInitializer=false){const{isAmbientContext}=this.state;const declaration=super.parseVarStatement(node,kind,allowMissingInitializer||isAmbientContext);if(!isAmbientContext)return declaration;for(const{id,init}of declaration.declarations){if(!init)continue;if(kind!==\"const\"||!!id.typeAnnotation){this.raise(TSErrors.InitializerNotAllowedInAmbientContext,init);}else if(!isValidAmbientConstInitializer(init,this.hasPlugin(\"estree\"))){this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,init);}}return declaration;}parseStatementContent(flags,decorators){if(this.match(75)&&this.isLookaheadContextual(\"enum\")){const node=this.startNode();this.expect(75);return this.tsParseEnumDeclaration(node,{const:true});}if(this.isContextual(126)){return this.tsParseEnumDeclaration(this.startNode());}if(this.isContextual(129)){const result=this.tsParseInterfaceDeclaration(this.startNode());if(result)return result;}return super.parseStatementContent(flags,decorators);}parseAccessModifier(){return this.tsParseModifier([\"public\",\"protected\",\"private\"]);}tsHasSomeModifiers(member,modifiers){return modifiers.some(modifier=>{if(tsIsAccessModifier(modifier)){return member.accessibility===modifier;}return!!member[modifier];});}tsIsStartOfStaticBlocks(){return this.isContextual(106)&&this.lookaheadCharCode()===123;}parseClassMember(classBody,member,state){const modifiers=[\"declare\",\"private\",\"public\",\"protected\",\"override\",\"abstract\",\"readonly\",\"static\"];this.tsParseModifiers({allowedModifiers:modifiers,disallowedModifiers:[\"in\",\"out\"],stopOnStartOfClassStaticBlock:true,errorTemplate:TSErrors.InvalidModifierOnTypeParameterPositions},member);const callParseClassMemberWithIsStatic=()=>{if(this.tsIsStartOfStaticBlocks()){this.next();this.next();if(this.tsHasSomeModifiers(member,modifiers)){this.raise(TSErrors.StaticBlockCannotHaveModifier,this.state.curPosition());}super.parseClassStaticBlock(classBody,member);}else{this.parseClassMemberWithIsStatic(classBody,member,state,!!member.static);}};if(member.declare){this.tsInAmbientContext(callParseClassMemberWithIsStatic);}else{callParseClassMemberWithIsStatic();}}parseClassMemberWithIsStatic(classBody,member,state,isStatic){const idx=this.tsTryParseIndexSignature(member);if(idx){classBody.body.push(idx);if(member.abstract){this.raise(TSErrors.IndexSignatureHasAbstract,member);}if(member.accessibility){this.raise(TSErrors.IndexSignatureHasAccessibility,member,{modifier:member.accessibility});}if(member.declare){this.raise(TSErrors.IndexSignatureHasDeclare,member);}if(member.override){this.raise(TSErrors.IndexSignatureHasOverride,member);}return;}if(!this.state.inAbstractClass&&member.abstract){this.raise(TSErrors.NonAbstractClassHasAbstractMethod,member);}if(member.override){if(!state.hadSuperClass){this.raise(TSErrors.OverrideNotInSubClass,member);}}super.parseClassMemberWithIsStatic(classBody,member,state,isStatic);}parsePostMemberNameModifiers(methodOrProp){const optional=this.eat(17);if(optional)methodOrProp.optional=true;if(methodOrProp.readonly&&this.match(10)){this.raise(TSErrors.ClassMethodHasReadonly,methodOrProp);}if(methodOrProp.declare&&this.match(10)){this.raise(TSErrors.ClassMethodHasDeclare,methodOrProp);}}parseExpressionStatement(node,expr,decorators){const decl=expr.type===\"Identifier\"?this.tsParseExpressionStatement(node,expr,decorators):undefined;return decl||super.parseExpressionStatement(node,expr,decorators);}shouldParseExportDeclaration(){if(this.tsIsDeclarationStart())return true;return super.shouldParseExportDeclaration();}parseConditional(expr,startLoc,refExpressionErrors){if(!this.match(17))return expr;if(this.state.maybeInArrowParameters){const nextCh=this.lookaheadCharCode();if(nextCh===44||nextCh===61||nextCh===58||nextCh===41){this.setOptionalParametersError(refExpressionErrors);return expr;}}return super.parseConditional(expr,startLoc,refExpressionErrors);}parseParenItem(node,startLoc){const newNode=super.parseParenItem(node,startLoc);if(this.eat(17)){newNode.optional=true;this.resetEndLocation(node);}if(this.match(14)){const typeCastNode=this.startNodeAt(startLoc);typeCastNode.expression=node;typeCastNode.typeAnnotation=this.tsParseTypeAnnotation();return this.finishNode(typeCastNode,\"TSTypeCastExpression\");}return node;}parseExportDeclaration(node){if(!this.state.isAmbientContext&&this.isContextual(125)){return this.tsInAmbientContext(()=>this.parseExportDeclaration(node));}const startLoc=this.state.startLoc;const isDeclare=this.eatContextual(125);if(isDeclare&&(this.isContextual(125)||!this.shouldParseExportDeclaration())){throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare,this.state.startLoc);}const isIdentifier=tokenIsIdentifier(this.state.type);const declaration=isIdentifier&&this.tsTryParseExportDeclaration()||super.parseExportDeclaration(node);if(!declaration)return null;if(declaration.type===\"TSInterfaceDeclaration\"||declaration.type===\"TSTypeAliasDeclaration\"||isDeclare){node.exportKind=\"type\";}if(isDeclare&&declaration.type!==\"TSImportEqualsDeclaration\"){this.resetStartLocation(declaration,startLoc);declaration.declare=true;}return declaration;}parseClassId(node,isStatement,optionalId,bindingType){if((!isStatement||optionalId)&&this.isContextual(113)){return;}super.parseClassId(node,isStatement,optionalId,node.declare?1024:8331);const typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);if(typeParameters)node.typeParameters=typeParameters;}parseClassPropertyAnnotation(node){if(!node.optional){if(this.eat(35)){node.definite=true;}else if(this.eat(17)){node.optional=true;}}const type=this.tsTryParseTypeAnnotation();if(type)node.typeAnnotation=type;}parseClassProperty(node){this.parseClassPropertyAnnotation(node);if(this.state.isAmbientContext&&!(node.readonly&&!node.typeAnnotation)&&this.match(29)){this.raise(TSErrors.DeclareClassFieldHasInitializer,this.state.startLoc);}if(node.abstract&&this.match(29)){const{key}=node;this.raise(TSErrors.AbstractPropertyHasInitializer,this.state.startLoc,{propertyName:key.type===\"Identifier\"&&!node.computed?key.name:`[${this.input.slice(this.offsetToSourcePos(key.start),this.offsetToSourcePos(key.end))}]`});}return super.parseClassProperty(node);}parseClassPrivateProperty(node){if(node.abstract){this.raise(TSErrors.PrivateElementHasAbstract,node);}if(node.accessibility){this.raise(TSErrors.PrivateElementHasAccessibility,node,{modifier:node.accessibility});}this.parseClassPropertyAnnotation(node);return super.parseClassPrivateProperty(node);}parseClassAccessorProperty(node){this.parseClassPropertyAnnotation(node);if(node.optional){this.raise(TSErrors.AccessorCannotBeOptional,node);}return super.parseClassAccessorProperty(node);}pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);if(typeParameters&&isConstructor){this.raise(TSErrors.ConstructorHasTypeParameters,typeParameters);}const{declare=false,kind}=method;if(declare&&(kind===\"get\"||kind===\"set\")){this.raise(TSErrors.DeclareAccessor,method,{kind});}if(typeParameters)method.typeParameters=typeParameters;super.pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper);}pushClassPrivateMethod(classBody,method,isGenerator,isAsync){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);if(typeParameters)method.typeParameters=typeParameters;super.pushClassPrivateMethod(classBody,method,isGenerator,isAsync);}declareClassPrivateMethodInScope(node,kind){if(node.type===\"TSDeclareMethod\")return;if(node.type===\"MethodDefinition\"&&node.value.body==null){return;}super.declareClassPrivateMethodInScope(node,kind);}parseClassSuper(node){super.parseClassSuper(node);if(node.superClass&&(this.match(47)||this.match(51))){{node.superTypeParameters=this.tsParseTypeArgumentsInExpression();}}if(this.eatContextual(113)){node.implements=this.tsParseHeritageClause(\"implements\");}}parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);if(typeParameters)prop.typeParameters=typeParameters;return super.parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors);}parseFunctionParams(node,isConstructor){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);if(typeParameters)node.typeParameters=typeParameters;super.parseFunctionParams(node,isConstructor);}parseVarId(decl,kind){super.parseVarId(decl,kind);if(decl.id.type===\"Identifier\"&&!this.hasPrecedingLineBreak()&&this.eat(35)){decl.definite=true;}const type=this.tsTryParseTypeAnnotation();if(type){decl.id.typeAnnotation=type;this.resetEndLocation(decl.id);}}parseAsyncArrowFromCallExpression(node,call){if(this.match(14)){node.returnType=this.tsParseTypeAnnotation();}return super.parseAsyncArrowFromCallExpression(node,call);}parseMaybeAssign(refExpressionErrors,afterLeftParse){var _jsx,_jsx2,_typeCast,_jsx3,_typeCast2;let state;let jsx;let typeCast;if(this.hasPlugin(\"jsx\")&&(this.match(143)||this.match(47))){state=this.state.clone();jsx=this.tryParse(()=>super.parseMaybeAssign(refExpressionErrors,afterLeftParse),state);if(!jsx.error)return jsx.node;const{context}=this.state;const currentContext=context[context.length-1];if(currentContext===types.j_oTag||currentContext===types.j_expr){context.pop();}}if(!((_jsx=jsx)!=null&&_jsx.error)&&!this.match(47)){return super.parseMaybeAssign(refExpressionErrors,afterLeftParse);}if(!state||state===this.state)state=this.state.clone();let typeParameters;const arrow=this.tryParse(abort=>{var _expr$extra,_typeParameters;typeParameters=this.tsParseTypeParameters(this.tsParseConstModifier);const expr=super.parseMaybeAssign(refExpressionErrors,afterLeftParse);if(expr.type!==\"ArrowFunctionExpression\"||(_expr$extra=expr.extra)!=null&&_expr$extra.parenthesized){abort();}if(((_typeParameters=typeParameters)==null?void 0:_typeParameters.params.length)!==0){this.resetStartLocationFromNode(expr,typeParameters);}expr.typeParameters=typeParameters;return expr;},state);if(!arrow.error&&!arrow.aborted){if(typeParameters)this.reportReservedArrowTypeParam(typeParameters);return arrow.node;}if(!jsx){assert(!this.hasPlugin(\"jsx\"));typeCast=this.tryParse(()=>super.parseMaybeAssign(refExpressionErrors,afterLeftParse),state);if(!typeCast.error)return typeCast.node;}if((_jsx2=jsx)!=null&&_jsx2.node){this.state=jsx.failState;return jsx.node;}if(arrow.node){this.state=arrow.failState;if(typeParameters)this.reportReservedArrowTypeParam(typeParameters);return arrow.node;}if((_typeCast=typeCast)!=null&&_typeCast.node){this.state=typeCast.failState;return typeCast.node;}throw((_jsx3=jsx)==null?void 0:_jsx3.error)||arrow.error||((_typeCast2=typeCast)==null?void 0:_typeCast2.error);}reportReservedArrowTypeParam(node){var _node$extra2;if(node.params.length===1&&!node.params[0].constraint&&!((_node$extra2=node.extra)!=null&&_node$extra2.trailingComma)&&this.getPluginOption(\"typescript\",\"disallowAmbiguousJSXLike\")){this.raise(TSErrors.ReservedArrowTypeParam,node);}}parseMaybeUnary(refExpressionErrors,sawUnary){if(!this.hasPlugin(\"jsx\")&&this.match(47)){return this.tsParseTypeAssertion();}return super.parseMaybeUnary(refExpressionErrors,sawUnary);}parseArrow(node){if(this.match(14)){const result=this.tryParse(abort=>{const returnType=this.tsParseTypeOrTypePredicateAnnotation(14);if(this.canInsertSemicolon()||!this.match(19))abort();return returnType;});if(result.aborted)return;if(!result.thrown){if(result.error)this.state=result.failState;node.returnType=result.node;}}return super.parseArrow(node);}parseFunctionParamType(param){if(this.eat(17)){param.optional=true;}const type=this.tsTryParseTypeAnnotation();if(type)param.typeAnnotation=type;this.resetEndLocation(param);return param;}isAssignable(node,isBinding){switch(node.type){case\"TSTypeCastExpression\":return this.isAssignable(node.expression,isBinding);case\"TSParameterProperty\":return true;default:return super.isAssignable(node,isBinding);}}toAssignable(node,isLHS=false){switch(node.type){case\"ParenthesizedExpression\":this.toAssignableParenthesizedExpression(node,isLHS);break;case\"TSAsExpression\":case\"TSSatisfiesExpression\":case\"TSNonNullExpression\":case\"TSTypeAssertion\":if(isLHS){this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter,node);}else{this.raise(TSErrors.UnexpectedTypeCastInParameter,node);}this.toAssignable(node.expression,isLHS);break;case\"AssignmentExpression\":if(!isLHS&&node.left.type===\"TSTypeCastExpression\"){node.left=this.typeCastToParameter(node.left);}default:super.toAssignable(node,isLHS);}}toAssignableParenthesizedExpression(node,isLHS){switch(node.expression.type){case\"TSAsExpression\":case\"TSSatisfiesExpression\":case\"TSNonNullExpression\":case\"TSTypeAssertion\":case\"ParenthesizedExpression\":this.toAssignable(node.expression,isLHS);break;default:super.toAssignable(node,isLHS);}}checkToRestConversion(node,allowPattern){switch(node.type){case\"TSAsExpression\":case\"TSSatisfiesExpression\":case\"TSTypeAssertion\":case\"TSNonNullExpression\":this.checkToRestConversion(node.expression,false);break;default:super.checkToRestConversion(node,allowPattern);}}isValidLVal(type,isUnparenthesizedInAssign,binding){switch(type){case\"TSTypeCastExpression\":return true;case\"TSParameterProperty\":return\"parameter\";case\"TSNonNullExpression\":return\"expression\";case\"TSAsExpression\":case\"TSSatisfiesExpression\":case\"TSTypeAssertion\":return(binding!==64||!isUnparenthesizedInAssign)&&[\"expression\",true];default:return super.isValidLVal(type,isUnparenthesizedInAssign,binding);}}parseBindingAtom(){if(this.state.type===78){return this.parseIdentifier(true);}return super.parseBindingAtom();}parseMaybeDecoratorArguments(expr,startLoc){if(this.match(47)||this.match(51)){const typeArguments=this.tsParseTypeArgumentsInExpression();if(this.match(10)){const call=super.parseMaybeDecoratorArguments(expr,startLoc);{call.typeParameters=typeArguments;}return call;}this.unexpected(null,10);}return super.parseMaybeDecoratorArguments(expr,startLoc);}checkCommaAfterRest(close){if(this.state.isAmbientContext&&this.match(12)&&this.lookaheadCharCode()===close){this.next();return false;}return super.checkCommaAfterRest(close);}isClassMethod(){return this.match(47)||super.isClassMethod();}isClassProperty(){return this.match(35)||this.match(14)||super.isClassProperty();}parseMaybeDefault(startLoc,left){const node=super.parseMaybeDefault(startLoc,left);if(node.type===\"AssignmentPattern\"&&node.typeAnnotation&&node.right.start<node.typeAnnotation.start){this.raise(TSErrors.TypeAnnotationAfterAssign,node.typeAnnotation);}return node;}getTokenFromCode(code){if(this.state.inType){if(code===62){this.finishOp(48,1);return;}if(code===60){this.finishOp(47,1);return;}}super.getTokenFromCode(code);}reScan_lt_gt(){const{type}=this.state;if(type===47){this.state.pos-=1;this.readToken_lt();}else if(type===48){this.state.pos-=1;this.readToken_gt();}}reScan_lt(){const{type}=this.state;if(type===51){this.state.pos-=2;this.finishOp(47,1);return 47;}return type;}toAssignableListItem(exprList,index,isLHS){const node=exprList[index];if(node.type===\"TSTypeCastExpression\"){exprList[index]=this.typeCastToParameter(node);}super.toAssignableListItem(exprList,index,isLHS);}typeCastToParameter(node){node.expression.typeAnnotation=node.typeAnnotation;this.resetEndLocation(node.expression,node.typeAnnotation.loc.end);return node.expression;}shouldParseArrow(params){if(this.match(14)){return params.every(expr=>this.isAssignable(expr,true));}return super.shouldParseArrow(params);}shouldParseAsyncArrow(){return this.match(14)||super.shouldParseAsyncArrow();}canHaveLeadingDecorator(){return super.canHaveLeadingDecorator()||this.isAbstractClass();}jsxParseOpeningElementAfterName(node){if(this.match(47)||this.match(51)){const typeArguments=this.tsTryParseAndCatch(()=>this.tsParseTypeArgumentsInExpression());if(typeArguments){{node.typeParameters=typeArguments;}}}return super.jsxParseOpeningElementAfterName(node);}getGetterSetterExpectedParamCount(method){const baseCount=super.getGetterSetterExpectedParamCount(method);const params=this.getObjectOrClassMethodParams(method);const firstParam=params[0];const hasContextParam=firstParam&&this.isThisParam(firstParam);return hasContextParam?baseCount+1:baseCount;}parseCatchClauseParam(){const param=super.parseCatchClauseParam();const type=this.tsTryParseTypeAnnotation();if(type){param.typeAnnotation=type;this.resetEndLocation(param);}return param;}tsInAmbientContext(cb){const{isAmbientContext:oldIsAmbientContext,strict:oldStrict}=this.state;this.state.isAmbientContext=true;this.state.strict=false;try{return cb();}finally{this.state.isAmbientContext=oldIsAmbientContext;this.state.strict=oldStrict;}}parseClass(node,isStatement,optionalId){const oldInAbstractClass=this.state.inAbstractClass;this.state.inAbstractClass=!!node.abstract;try{return super.parseClass(node,isStatement,optionalId);}finally{this.state.inAbstractClass=oldInAbstractClass;}}tsParseAbstractDeclaration(node,decorators){if(this.match(80)){node.abstract=true;return this.maybeTakeDecorators(decorators,this.parseClass(node,true,false));}else if(this.isContextual(129)){if(!this.hasFollowingLineBreak()){node.abstract=true;this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer,node);return this.tsParseInterfaceDeclaration(node);}}else{this.unexpected(null,80);}}parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope){const method=super.parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope);if(method.abstract||method.type===\"TSAbstractMethodDefinition\"){const hasEstreePlugin=this.hasPlugin(\"estree\");const methodFn=hasEstreePlugin?method.value:method;if(methodFn.body){const{key}=method;this.raise(TSErrors.AbstractMethodHasImplementation,method,{methodName:key.type===\"Identifier\"&&!method.computed?key.name:`[${this.input.slice(this.offsetToSourcePos(key.start),this.offsetToSourcePos(key.end))}]`});}}return method;}tsParseTypeParameterName(){const typeName=this.parseIdentifier();return typeName.name;}shouldParseAsAmbientContext(){return!!this.getPluginOption(\"typescript\",\"dts\");}parse(){if(this.shouldParseAsAmbientContext()){this.state.isAmbientContext=true;}return super.parse();}getExpression(){if(this.shouldParseAsAmbientContext()){this.state.isAmbientContext=true;}return super.getExpression();}parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly){if(!isString&&isMaybeTypeOnly){this.parseTypeOnlyImportExportSpecifier(node,false,isInTypeExport);return this.finishNode(node,\"ExportSpecifier\");}node.exportKind=\"value\";return super.parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly);}parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,bindingType){if(!importedIsString&&isMaybeTypeOnly){this.parseTypeOnlyImportExportSpecifier(specifier,true,isInTypeOnlyImport);return this.finishNode(specifier,\"ImportSpecifier\");}specifier.importKind=\"value\";return super.parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,isInTypeOnlyImport?4098:4096);}parseTypeOnlyImportExportSpecifier(node,isImport,isInTypeOnlyImportExport){const leftOfAsKey=isImport?\"imported\":\"local\";const rightOfAsKey=isImport?\"local\":\"exported\";let leftOfAs=node[leftOfAsKey];let rightOfAs;let hasTypeSpecifier=false;let canParseAsKeyword=true;const loc=leftOfAs.loc.start;if(this.isContextual(93)){const firstAs=this.parseIdentifier();if(this.isContextual(93)){const secondAs=this.parseIdentifier();if(tokenIsKeywordOrIdentifier(this.state.type)){hasTypeSpecifier=true;leftOfAs=firstAs;rightOfAs=isImport?this.parseIdentifier():this.parseModuleExportName();canParseAsKeyword=false;}else{rightOfAs=secondAs;canParseAsKeyword=false;}}else if(tokenIsKeywordOrIdentifier(this.state.type)){canParseAsKeyword=false;rightOfAs=isImport?this.parseIdentifier():this.parseModuleExportName();}else{hasTypeSpecifier=true;leftOfAs=firstAs;}}else if(tokenIsKeywordOrIdentifier(this.state.type)){hasTypeSpecifier=true;if(isImport){leftOfAs=this.parseIdentifier(true);if(!this.isContextual(93)){this.checkReservedWord(leftOfAs.name,leftOfAs.loc.start,true,true);}}else{leftOfAs=this.parseModuleExportName();}}if(hasTypeSpecifier&&isInTypeOnlyImportExport){this.raise(isImport?TSErrors.TypeModifierIsUsedInTypeImports:TSErrors.TypeModifierIsUsedInTypeExports,loc);}node[leftOfAsKey]=leftOfAs;node[rightOfAsKey]=rightOfAs;const kindKey=isImport?\"importKind\":\"exportKind\";node[kindKey]=hasTypeSpecifier?\"type\":\"value\";if(canParseAsKeyword&&this.eatContextual(93)){node[rightOfAsKey]=isImport?this.parseIdentifier():this.parseModuleExportName();}if(!node[rightOfAsKey]){node[rightOfAsKey]=this.cloneIdentifier(node[leftOfAsKey]);}if(isImport){this.checkIdentifier(node[rightOfAsKey],hasTypeSpecifier?4098:4096);}}fillOptionalPropertiesForTSESLint(node){var _node$directive,_node$decorators,_node$optional,_node$typeAnnotation,_node$accessibility,_node$decorators2,_node$override,_node$readonly,_node$static,_node$declare,_node$returnType,_node$typeParameters,_node$optional2,_node$optional3,_node$accessibility2,_node$readonly2,_node$static2,_node$declare2,_node$definite,_node$readonly3,_node$typeAnnotation2,_node$accessibility3,_node$decorators3,_node$override2,_node$optional4,_node$id,_node$abstract,_node$declare3,_node$decorators4,_node$implements,_node$superTypeArgume,_node$typeParameters2,_node$declare4,_node$definite2,_node$const,_node$declare5,_node$computed,_node$qualifier,_node$options,_node$declare6,_node$extends,_node$declare7,_node$global,_node$const2,_node$in,_node$out;switch(node.type){case\"ExpressionStatement\":(_node$directive=node.directive)!=null?_node$directive:node.directive=undefined;return;case\"RestElement\":node.value=undefined;case\"Identifier\":case\"ArrayPattern\":case\"AssignmentPattern\":case\"ObjectPattern\":(_node$decorators=node.decorators)!=null?_node$decorators:node.decorators=[];(_node$optional=node.optional)!=null?_node$optional:node.optional=false;(_node$typeAnnotation=node.typeAnnotation)!=null?_node$typeAnnotation:node.typeAnnotation=undefined;return;case\"TSParameterProperty\":(_node$accessibility=node.accessibility)!=null?_node$accessibility:node.accessibility=undefined;(_node$decorators2=node.decorators)!=null?_node$decorators2:node.decorators=[];(_node$override=node.override)!=null?_node$override:node.override=false;(_node$readonly=node.readonly)!=null?_node$readonly:node.readonly=false;(_node$static=node.static)!=null?_node$static:node.static=false;return;case\"TSEmptyBodyFunctionExpression\":node.body=null;case\"TSDeclareFunction\":case\"FunctionDeclaration\":case\"FunctionExpression\":case\"ClassMethod\":case\"ClassPrivateMethod\":(_node$declare=node.declare)!=null?_node$declare:node.declare=false;(_node$returnType=node.returnType)!=null?_node$returnType:node.returnType=undefined;(_node$typeParameters=node.typeParameters)!=null?_node$typeParameters:node.typeParameters=undefined;return;case\"Property\":(_node$optional2=node.optional)!=null?_node$optional2:node.optional=false;return;case\"TSMethodSignature\":case\"TSPropertySignature\":(_node$optional3=node.optional)!=null?_node$optional3:node.optional=false;case\"TSIndexSignature\":(_node$accessibility2=node.accessibility)!=null?_node$accessibility2:node.accessibility=undefined;(_node$readonly2=node.readonly)!=null?_node$readonly2:node.readonly=false;(_node$static2=node.static)!=null?_node$static2:node.static=false;return;case\"TSAbstractPropertyDefinition\":case\"PropertyDefinition\":case\"TSAbstractAccessorProperty\":case\"AccessorProperty\":(_node$declare2=node.declare)!=null?_node$declare2:node.declare=false;(_node$definite=node.definite)!=null?_node$definite:node.definite=false;(_node$readonly3=node.readonly)!=null?_node$readonly3:node.readonly=false;(_node$typeAnnotation2=node.typeAnnotation)!=null?_node$typeAnnotation2:node.typeAnnotation=undefined;case\"TSAbstractMethodDefinition\":case\"MethodDefinition\":(_node$accessibility3=node.accessibility)!=null?_node$accessibility3:node.accessibility=undefined;(_node$decorators3=node.decorators)!=null?_node$decorators3:node.decorators=[];(_node$override2=node.override)!=null?_node$override2:node.override=false;(_node$optional4=node.optional)!=null?_node$optional4:node.optional=false;return;case\"ClassExpression\":(_node$id=node.id)!=null?_node$id:node.id=null;case\"ClassDeclaration\":(_node$abstract=node.abstract)!=null?_node$abstract:node.abstract=false;(_node$declare3=node.declare)!=null?_node$declare3:node.declare=false;(_node$decorators4=node.decorators)!=null?_node$decorators4:node.decorators=[];(_node$implements=node.implements)!=null?_node$implements:node.implements=[];(_node$superTypeArgume=node.superTypeArguments)!=null?_node$superTypeArgume:node.superTypeArguments=undefined;(_node$typeParameters2=node.typeParameters)!=null?_node$typeParameters2:node.typeParameters=undefined;return;case\"TSTypeAliasDeclaration\":case\"VariableDeclaration\":(_node$declare4=node.declare)!=null?_node$declare4:node.declare=false;return;case\"VariableDeclarator\":(_node$definite2=node.definite)!=null?_node$definite2:node.definite=false;return;case\"TSEnumDeclaration\":(_node$const=node.const)!=null?_node$const:node.const=false;(_node$declare5=node.declare)!=null?_node$declare5:node.declare=false;return;case\"TSEnumMember\":(_node$computed=node.computed)!=null?_node$computed:node.computed=false;return;case\"TSImportType\":(_node$qualifier=node.qualifier)!=null?_node$qualifier:node.qualifier=null;(_node$options=node.options)!=null?_node$options:node.options=null;return;case\"TSInterfaceDeclaration\":(_node$declare6=node.declare)!=null?_node$declare6:node.declare=false;(_node$extends=node.extends)!=null?_node$extends:node.extends=[];return;case\"TSModuleDeclaration\":(_node$declare7=node.declare)!=null?_node$declare7:node.declare=false;(_node$global=node.global)!=null?_node$global:node.global=node.kind===\"global\";return;case\"TSTypeParameter\":(_node$const2=node.const)!=null?_node$const2:node.const=false;(_node$in=node.in)!=null?_node$in:node.in=false;(_node$out=node.out)!=null?_node$out:node.out=false;return;}}};function isPossiblyLiteralEnum(expression){if(expression.type!==\"MemberExpression\")return false;const{computed,property}=expression;if(computed&&property.type!==\"StringLiteral\"&&(property.type!==\"TemplateLiteral\"||property.expressions.length>0)){return false;}return isUncomputedMemberExpressionChain(expression.object);}function isValidAmbientConstInitializer(expression,estree){var _expression$extra;const{type}=expression;if((_expression$extra=expression.extra)!=null&&_expression$extra.parenthesized){return false;}if(estree){if(type===\"Literal\"){const{value}=expression;if(typeof value===\"string\"||typeof value===\"boolean\"){return true;}}}else{if(type===\"StringLiteral\"||type===\"BooleanLiteral\"){return true;}}if(isNumber(expression,estree)||isNegativeNumber(expression,estree)){return true;}if(type===\"TemplateLiteral\"&&expression.expressions.length===0){return true;}if(isPossiblyLiteralEnum(expression)){return true;}return false;}function isNumber(expression,estree){if(estree){return expression.type===\"Literal\"&&(typeof expression.value===\"number\"||\"bigint\"in expression);}return expression.type===\"NumericLiteral\"||expression.type===\"BigIntLiteral\";}function isNegativeNumber(expression,estree){if(expression.type===\"UnaryExpression\"){const{operator,argument}=expression;if(operator===\"-\"&&isNumber(argument,estree)){return true;}}return false;}function isUncomputedMemberExpressionChain(expression){if(expression.type===\"Identifier\")return true;if(expression.type!==\"MemberExpression\"||expression.computed){return false;}return isUncomputedMemberExpressionChain(expression.object);}const PlaceholderErrors=ParseErrorEnum`placeholders`({ClassNameIsRequired:\"A class name is required.\",UnexpectedSpace:\"Unexpected space in placeholder.\"});var placeholders=superClass=>class PlaceholdersParserMixin extends superClass{parsePlaceholder(expectedNode){if(this.match(133)){const node=this.startNode();this.next();this.assertNoSpace();node.name=super.parseIdentifier(true);this.assertNoSpace();this.expect(133);return this.finishPlaceholder(node,expectedNode);}}finishPlaceholder(node,expectedNode){let placeholder=node;if(!placeholder.expectedNode||!placeholder.type){placeholder=this.finishNode(placeholder,\"Placeholder\");}placeholder.expectedNode=expectedNode;return placeholder;}getTokenFromCode(code){if(code===37&&this.input.charCodeAt(this.state.pos+1)===37){this.finishOp(133,2);}else{super.getTokenFromCode(code);}}parseExprAtom(refExpressionErrors){return this.parsePlaceholder(\"Expression\")||super.parseExprAtom(refExpressionErrors);}parseIdentifier(liberal){return this.parsePlaceholder(\"Identifier\")||super.parseIdentifier(liberal);}checkReservedWord(word,startLoc,checkKeywords,isBinding){if(word!==undefined){super.checkReservedWord(word,startLoc,checkKeywords,isBinding);}}cloneIdentifier(node){const cloned=super.cloneIdentifier(node);if(cloned.type===\"Placeholder\"){cloned.expectedNode=node.expectedNode;}return cloned;}cloneStringLiteral(node){if(node.type===\"Placeholder\"){return this.cloneIdentifier(node);}return super.cloneStringLiteral(node);}parseBindingAtom(){return this.parsePlaceholder(\"Pattern\")||super.parseBindingAtom();}isValidLVal(type,isParenthesized,binding){return type===\"Placeholder\"||super.isValidLVal(type,isParenthesized,binding);}toAssignable(node,isLHS){if(node&&node.type===\"Placeholder\"&&node.expectedNode===\"Expression\"){node.expectedNode=\"Pattern\";}else{super.toAssignable(node,isLHS);}}chStartsBindingIdentifier(ch,pos){if(super.chStartsBindingIdentifier(ch,pos)){return true;}const nextToken=this.lookahead();if(nextToken.type===133){return true;}return false;}verifyBreakContinue(node,isBreak){if(node.label&&node.label.type===\"Placeholder\")return;super.verifyBreakContinue(node,isBreak);}parseExpressionStatement(node,expr){var _expr$extra;if(expr.type!==\"Placeholder\"||(_expr$extra=expr.extra)!=null&&_expr$extra.parenthesized){return super.parseExpressionStatement(node,expr);}if(this.match(14)){const stmt=node;stmt.label=this.finishPlaceholder(expr,\"Identifier\");this.next();stmt.body=super.parseStatementOrSloppyAnnexBFunctionDeclaration();return this.finishNode(stmt,\"LabeledStatement\");}this.semicolon();const stmtPlaceholder=node;stmtPlaceholder.name=expr.name;return this.finishPlaceholder(stmtPlaceholder,\"Statement\");}parseBlock(allowDirectives,createNewLexicalScope,afterBlockParse){return this.parsePlaceholder(\"BlockStatement\")||super.parseBlock(allowDirectives,createNewLexicalScope,afterBlockParse);}parseFunctionId(requireId){return this.parsePlaceholder(\"Identifier\")||super.parseFunctionId(requireId);}parseClass(node,isStatement,optionalId){const type=isStatement?\"ClassDeclaration\":\"ClassExpression\";this.next();const oldStrict=this.state.strict;const placeholder=this.parsePlaceholder(\"Identifier\");if(placeholder){if(this.match(81)||this.match(133)||this.match(5)){node.id=placeholder;}else if(optionalId||!isStatement){node.id=null;node.body=this.finishPlaceholder(placeholder,\"ClassBody\");return this.finishNode(node,type);}else{throw this.raise(PlaceholderErrors.ClassNameIsRequired,this.state.startLoc);}}else{this.parseClassId(node,isStatement,optionalId);}super.parseClassSuper(node);node.body=this.parsePlaceholder(\"ClassBody\")||super.parseClassBody(!!node.superClass,oldStrict);return this.finishNode(node,type);}parseExport(node,decorators){const placeholder=this.parsePlaceholder(\"Identifier\");if(!placeholder)return super.parseExport(node,decorators);const node2=node;if(!this.isContextual(98)&&!this.match(12)){node2.specifiers=[];node2.source=null;node2.declaration=this.finishPlaceholder(placeholder,\"Declaration\");return this.finishNode(node2,\"ExportNamedDeclaration\");}this.expectPlugin(\"exportDefaultFrom\");const specifier=this.startNode();specifier.exported=placeholder;node2.specifiers=[this.finishNode(specifier,\"ExportDefaultSpecifier\")];return super.parseExport(node2,decorators);}isExportDefaultSpecifier(){if(this.match(65)){const next=this.nextTokenStart();if(this.isUnparsedContextual(next,\"from\")){if(this.input.startsWith(tokenLabelName(133),this.nextTokenStartSince(next+4))){return true;}}}return super.isExportDefaultSpecifier();}maybeParseExportDefaultSpecifier(node,maybeDefaultIdentifier){var _specifiers;if((_specifiers=node.specifiers)!=null&&_specifiers.length){return true;}return super.maybeParseExportDefaultSpecifier(node,maybeDefaultIdentifier);}checkExport(node){const{specifiers}=node;if(specifiers!=null&&specifiers.length){node.specifiers=specifiers.filter(node=>node.exported.type===\"Placeholder\");}super.checkExport(node);node.specifiers=specifiers;}parseImport(node){const placeholder=this.parsePlaceholder(\"Identifier\");if(!placeholder)return super.parseImport(node);node.specifiers=[];if(!this.isContextual(98)&&!this.match(12)){node.source=this.finishPlaceholder(placeholder,\"StringLiteral\");this.semicolon();return this.finishNode(node,\"ImportDeclaration\");}const specifier=this.startNodeAtNode(placeholder);specifier.local=placeholder;node.specifiers.push(this.finishNode(specifier,\"ImportDefaultSpecifier\"));if(this.eat(12)){const hasStarImport=this.maybeParseStarImportSpecifier(node);if(!hasStarImport)this.parseNamedImportSpecifiers(node);}this.expectContextual(98);node.source=this.parseImportSource();this.semicolon();return this.finishNode(node,\"ImportDeclaration\");}parseImportSource(){return this.parsePlaceholder(\"StringLiteral\")||super.parseImportSource();}assertNoSpace(){if(this.state.start>this.offsetToSourcePos(this.state.lastTokEndLoc.index)){this.raise(PlaceholderErrors.UnexpectedSpace,this.state.lastTokEndLoc);}}};var v8intrinsic=superClass=>class V8IntrinsicMixin extends superClass{parseV8Intrinsic(){if(this.match(54)){const v8IntrinsicStartLoc=this.state.startLoc;const node=this.startNode();this.next();if(tokenIsIdentifier(this.state.type)){const name=this.parseIdentifierName();const identifier=this.createIdentifier(node,name);this.castNodeTo(identifier,\"V8IntrinsicIdentifier\");if(this.match(10)){return identifier;}}this.unexpected(v8IntrinsicStartLoc);}}parseExprAtom(refExpressionErrors){return this.parseV8Intrinsic()||super.parseExprAtom(refExpressionErrors);}};const PIPELINE_PROPOSALS=[\"minimal\",\"fsharp\",\"hack\",\"smart\"];const TOPIC_TOKENS=[\"^^\",\"@@\",\"^\",\"%\",\"#\"];function validatePlugins(pluginsMap){if(pluginsMap.has(\"decorators\")){if(pluginsMap.has(\"decorators-legacy\")){throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");}const decoratorsBeforeExport=pluginsMap.get(\"decorators\").decoratorsBeforeExport;if(decoratorsBeforeExport!=null&&typeof decoratorsBeforeExport!==\"boolean\"){throw new Error(\"'decoratorsBeforeExport' must be a boolean, if specified.\");}const allowCallParenthesized=pluginsMap.get(\"decorators\").allowCallParenthesized;if(allowCallParenthesized!=null&&typeof allowCallParenthesized!==\"boolean\"){throw new Error(\"'allowCallParenthesized' must be a boolean.\");}}if(pluginsMap.has(\"flow\")&&pluginsMap.has(\"typescript\")){throw new Error(\"Cannot combine flow and typescript plugins.\");}if(pluginsMap.has(\"placeholders\")&&pluginsMap.has(\"v8intrinsic\")){throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");}if(pluginsMap.has(\"pipelineOperator\")){var _pluginsMap$get2;const proposal=pluginsMap.get(\"pipelineOperator\").proposal;if(!PIPELINE_PROPOSALS.includes(proposal)){const proposalList=PIPELINE_PROPOSALS.map(p=>`\"${p}\"`).join(\", \");throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);}if(proposal===\"hack\"){if(pluginsMap.has(\"placeholders\")){throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");}if(pluginsMap.has(\"v8intrinsic\")){throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");}const topicToken=pluginsMap.get(\"pipelineOperator\").topicToken;if(!TOPIC_TOKENS.includes(topicToken)){const tokenList=TOPIC_TOKENS.map(t=>`\"${t}\"`).join(\", \");throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);}{var _pluginsMap$get;if(topicToken===\"#\"&&((_pluginsMap$get=pluginsMap.get(\"recordAndTuple\"))==null?void 0:_pluginsMap$get.syntaxType)===\"hash\"){throw new Error(`Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\",pluginsMap.get(\"recordAndTuple\")])}\\`.`);}}}else if(proposal===\"smart\"&&((_pluginsMap$get2=pluginsMap.get(\"recordAndTuple\"))==null?void 0:_pluginsMap$get2.syntaxType)===\"hash\"){throw new Error(`Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\",pluginsMap.get(\"recordAndTuple\")])}\\`.`);}}if(pluginsMap.has(\"moduleAttributes\")){{if(pluginsMap.has(\"deprecatedImportAssert\")||pluginsMap.has(\"importAssertions\")){throw new Error(\"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\");}const moduleAttributesVersionPluginOption=pluginsMap.get(\"moduleAttributes\").version;if(moduleAttributesVersionPluginOption!==\"may-2020\"){throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\"+\" representing the last proposal update. Currently, the\"+\" only supported value is 'may-2020'.\");}}}if(pluginsMap.has(\"importAssertions\")){if(pluginsMap.has(\"deprecatedImportAssert\")){throw new Error(\"Cannot combine importAssertions and deprecatedImportAssert plugins.\");}}if(!pluginsMap.has(\"deprecatedImportAssert\")&&pluginsMap.has(\"importAttributes\")&&pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax){{pluginsMap.set(\"deprecatedImportAssert\",{});}}if(pluginsMap.has(\"recordAndTuple\")){{const syntaxType=pluginsMap.get(\"recordAndTuple\").syntaxType;if(syntaxType!=null){const RECORD_AND_TUPLE_SYNTAX_TYPES=[\"hash\",\"bar\"];if(!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)){throw new Error(\"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \"+RECORD_AND_TUPLE_SYNTAX_TYPES.map(p=>`'${p}'`).join(\", \"));}}}}if(pluginsMap.has(\"asyncDoExpressions\")&&!pluginsMap.has(\"doExpressions\")){const error=new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");error.missingPlugins=\"doExpressions\";throw error;}if(pluginsMap.has(\"optionalChainingAssign\")&&pluginsMap.get(\"optionalChainingAssign\").version!==\"2023-07\"){throw new Error(\"The 'optionalChainingAssign' plugin requires a 'version' option,\"+\" representing the last proposal update. Currently, the\"+\" only supported value is '2023-07'.\");}}const mixinPlugins={estree,jsx,flow,typescript,v8intrinsic,placeholders};const mixinPluginNames=Object.keys(mixinPlugins);class ExpressionParser extends LValParser{checkProto(prop,isRecord,sawProto,refExpressionErrors){if(prop.type===\"SpreadElement\"||this.isObjectMethod(prop)||prop.computed||prop.shorthand){return sawProto;}const key=prop.key;const name=key.type===\"Identifier\"?key.name:key.value;if(name===\"__proto__\"){if(isRecord){this.raise(Errors.RecordNoProto,key);return true;}if(sawProto){if(refExpressionErrors){if(refExpressionErrors.doubleProtoLoc===null){refExpressionErrors.doubleProtoLoc=key.loc.start;}}else{this.raise(Errors.DuplicateProto,key);}}return true;}return sawProto;}shouldExitDescending(expr,potentialArrowAt){return expr.type===\"ArrowFunctionExpression\"&&this.offsetToSourcePos(expr.start)===potentialArrowAt;}getExpression(){this.enterInitialScopes();this.nextToken();const expr=this.parseExpression();if(!this.match(140)){this.unexpected();}this.finalizeRemainingComments();expr.comments=this.comments;expr.errors=this.state.errors;if(this.optionFlags&256){expr.tokens=this.tokens;}return expr;}parseExpression(disallowIn,refExpressionErrors){if(disallowIn){return this.disallowInAnd(()=>this.parseExpressionBase(refExpressionErrors));}return this.allowInAnd(()=>this.parseExpressionBase(refExpressionErrors));}parseExpressionBase(refExpressionErrors){const startLoc=this.state.startLoc;const expr=this.parseMaybeAssign(refExpressionErrors);if(this.match(12)){const node=this.startNodeAt(startLoc);node.expressions=[expr];while(this.eat(12)){node.expressions.push(this.parseMaybeAssign(refExpressionErrors));}this.toReferencedList(node.expressions);return this.finishNode(node,\"SequenceExpression\");}return expr;}parseMaybeAssignDisallowIn(refExpressionErrors,afterLeftParse){return this.disallowInAnd(()=>this.parseMaybeAssign(refExpressionErrors,afterLeftParse));}parseMaybeAssignAllowIn(refExpressionErrors,afterLeftParse){return this.allowInAnd(()=>this.parseMaybeAssign(refExpressionErrors,afterLeftParse));}setOptionalParametersError(refExpressionErrors){refExpressionErrors.optionalParametersLoc=this.state.startLoc;}parseMaybeAssign(refExpressionErrors,afterLeftParse){const startLoc=this.state.startLoc;const isYield=this.isContextual(108);if(isYield){if(this.prodParam.hasYield){this.next();let left=this.parseYield(startLoc);if(afterLeftParse){left=afterLeftParse.call(this,left,startLoc);}return left;}}let ownExpressionErrors;if(refExpressionErrors){ownExpressionErrors=false;}else{refExpressionErrors=new ExpressionErrors();ownExpressionErrors=true;}const{type}=this.state;if(type===10||tokenIsIdentifier(type)){this.state.potentialArrowAt=this.state.start;}let left=this.parseMaybeConditional(refExpressionErrors);if(afterLeftParse){left=afterLeftParse.call(this,left,startLoc);}if(tokenIsAssignment(this.state.type)){const node=this.startNodeAt(startLoc);const operator=this.state.value;node.operator=operator;if(this.match(29)){this.toAssignable(left,true);node.left=left;const startIndex=startLoc.index;if(refExpressionErrors.doubleProtoLoc!=null&&refExpressionErrors.doubleProtoLoc.index>=startIndex){refExpressionErrors.doubleProtoLoc=null;}if(refExpressionErrors.shorthandAssignLoc!=null&&refExpressionErrors.shorthandAssignLoc.index>=startIndex){refExpressionErrors.shorthandAssignLoc=null;}if(refExpressionErrors.privateKeyLoc!=null&&refExpressionErrors.privateKeyLoc.index>=startIndex){this.checkDestructuringPrivate(refExpressionErrors);refExpressionErrors.privateKeyLoc=null;}}else{node.left=left;}this.next();node.right=this.parseMaybeAssign();this.checkLVal(left,this.finishNode(node,\"AssignmentExpression\"));return node;}else if(ownExpressionErrors){this.checkExpressionErrors(refExpressionErrors,true);}if(isYield){const{type}=this.state;const startsExpr=this.hasPlugin(\"v8intrinsic\")?tokenCanStartExpression(type):tokenCanStartExpression(type)&&!this.match(54);if(startsExpr&&!this.isAmbiguousPrefixOrIdentifier()){this.raiseOverwrite(Errors.YieldNotInGeneratorFunction,startLoc);return this.parseYield(startLoc);}}return left;}parseMaybeConditional(refExpressionErrors){const startLoc=this.state.startLoc;const potentialArrowAt=this.state.potentialArrowAt;const expr=this.parseExprOps(refExpressionErrors);if(this.shouldExitDescending(expr,potentialArrowAt)){return expr;}return this.parseConditional(expr,startLoc,refExpressionErrors);}parseConditional(expr,startLoc,refExpressionErrors){if(this.eat(17)){const node=this.startNodeAt(startLoc);node.test=expr;node.consequent=this.parseMaybeAssignAllowIn();this.expect(14);node.alternate=this.parseMaybeAssign();return this.finishNode(node,\"ConditionalExpression\");}return expr;}parseMaybeUnaryOrPrivate(refExpressionErrors){return this.match(139)?this.parsePrivateName():this.parseMaybeUnary(refExpressionErrors);}parseExprOps(refExpressionErrors){const startLoc=this.state.startLoc;const potentialArrowAt=this.state.potentialArrowAt;const expr=this.parseMaybeUnaryOrPrivate(refExpressionErrors);if(this.shouldExitDescending(expr,potentialArrowAt)){return expr;}return this.parseExprOp(expr,startLoc,-1);}parseExprOp(left,leftStartLoc,minPrec){if(this.isPrivateName(left)){const value=this.getPrivateNameSV(left);if(minPrec>=tokenOperatorPrecedence(58)||!this.prodParam.hasIn||!this.match(58)){this.raise(Errors.PrivateInExpectedIn,left,{identifierName:value});}this.classScope.usePrivateName(value,left.loc.start);}const op=this.state.type;if(tokenIsOperator(op)&&(this.prodParam.hasIn||!this.match(58))){let prec=tokenOperatorPrecedence(op);if(prec>minPrec){if(op===39){this.expectPlugin(\"pipelineOperator\");if(this.state.inFSharpPipelineDirectBody){return left;}this.checkPipelineAtInfixOperator(left,leftStartLoc);}const node=this.startNodeAt(leftStartLoc);node.left=left;node.operator=this.state.value;const logical=op===41||op===42;const coalesce=op===40;if(coalesce){prec=tokenOperatorPrecedence(42);}this.next();if(op===39&&this.hasPlugin([\"pipelineOperator\",{proposal:\"minimal\"}])){if(this.state.type===96&&this.prodParam.hasAwait){throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody,this.state.startLoc);}}node.right=this.parseExprOpRightExpr(op,prec);const finishedNode=this.finishNode(node,logical||coalesce?\"LogicalExpression\":\"BinaryExpression\");const nextOp=this.state.type;if(coalesce&&(nextOp===41||nextOp===42)||logical&&nextOp===40){throw this.raise(Errors.MixingCoalesceWithLogical,this.state.startLoc);}return this.parseExprOp(finishedNode,leftStartLoc,minPrec);}}return left;}parseExprOpRightExpr(op,prec){const startLoc=this.state.startLoc;switch(op){case 39:switch(this.getPluginOption(\"pipelineOperator\",\"proposal\")){case\"hack\":return this.withTopicBindingContext(()=>{return this.parseHackPipeBody();});case\"fsharp\":return this.withSoloAwaitPermittingContext(()=>{return this.parseFSharpPipelineBody(prec);});}if(this.getPluginOption(\"pipelineOperator\",\"proposal\")===\"smart\"){return this.withTopicBindingContext(()=>{if(this.prodParam.hasYield&&this.isContextual(108)){throw this.raise(Errors.PipeBodyIsTighter,this.state.startLoc);}return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op,prec),startLoc);});}default:return this.parseExprOpBaseRightExpr(op,prec);}}parseExprOpBaseRightExpr(op,prec){const startLoc=this.state.startLoc;return this.parseExprOp(this.parseMaybeUnaryOrPrivate(),startLoc,tokenIsRightAssociative(op)?prec-1:prec);}parseHackPipeBody(){var _body$extra;const{startLoc}=this.state;const body=this.parseMaybeAssign();const requiredParentheses=UnparenthesizedPipeBodyDescriptions.has(body.type);if(requiredParentheses&&!((_body$extra=body.extra)!=null&&_body$extra.parenthesized)){this.raise(Errors.PipeUnparenthesizedBody,startLoc,{type:body.type});}if(!this.topicReferenceWasUsedInCurrentContext()){this.raise(Errors.PipeTopicUnused,startLoc);}return body;}checkExponentialAfterUnary(node){if(this.match(57)){this.raise(Errors.UnexpectedTokenUnaryExponentiation,node.argument);}}parseMaybeUnary(refExpressionErrors,sawUnary){const startLoc=this.state.startLoc;const isAwait=this.isContextual(96);if(isAwait&&this.recordAwaitIfAllowed()){this.next();const expr=this.parseAwait(startLoc);if(!sawUnary)this.checkExponentialAfterUnary(expr);return expr;}const update=this.match(34);const node=this.startNode();if(tokenIsPrefix(this.state.type)){node.operator=this.state.value;node.prefix=true;if(this.match(72)){this.expectPlugin(\"throwExpressions\");}const isDelete=this.match(89);this.next();node.argument=this.parseMaybeUnary(null,true);this.checkExpressionErrors(refExpressionErrors,true);if(this.state.strict&&isDelete){const arg=node.argument;if(arg.type===\"Identifier\"){this.raise(Errors.StrictDelete,node);}else if(this.hasPropertyAsPrivateName(arg)){this.raise(Errors.DeletePrivateField,node);}}if(!update){if(!sawUnary){this.checkExponentialAfterUnary(node);}return this.finishNode(node,\"UnaryExpression\");}}const expr=this.parseUpdate(node,update,refExpressionErrors);if(isAwait){const{type}=this.state;const startsExpr=this.hasPlugin(\"v8intrinsic\")?tokenCanStartExpression(type):tokenCanStartExpression(type)&&!this.match(54);if(startsExpr&&!this.isAmbiguousPrefixOrIdentifier()){this.raiseOverwrite(Errors.AwaitNotInAsyncContext,startLoc);return this.parseAwait(startLoc);}}return expr;}parseUpdate(node,update,refExpressionErrors){if(update){const updateExpressionNode=node;this.checkLVal(updateExpressionNode.argument,this.finishNode(updateExpressionNode,\"UpdateExpression\"));return node;}const startLoc=this.state.startLoc;let expr=this.parseExprSubscripts(refExpressionErrors);if(this.checkExpressionErrors(refExpressionErrors,false))return expr;while(tokenIsPostfix(this.state.type)&&!this.canInsertSemicolon()){const node=this.startNodeAt(startLoc);node.operator=this.state.value;node.prefix=false;node.argument=expr;this.next();this.checkLVal(expr,expr=this.finishNode(node,\"UpdateExpression\"));}return expr;}parseExprSubscripts(refExpressionErrors){const startLoc=this.state.startLoc;const potentialArrowAt=this.state.potentialArrowAt;const expr=this.parseExprAtom(refExpressionErrors);if(this.shouldExitDescending(expr,potentialArrowAt)){return expr;}return this.parseSubscripts(expr,startLoc);}parseSubscripts(base,startLoc,noCalls){const state={optionalChainMember:false,maybeAsyncArrow:this.atPossibleAsyncArrow(base),stop:false};do{base=this.parseSubscript(base,startLoc,noCalls,state);state.maybeAsyncArrow=false;}while(!state.stop);return base;}parseSubscript(base,startLoc,noCalls,state){const{type}=this.state;if(!noCalls&&type===15){return this.parseBind(base,startLoc,noCalls,state);}else if(tokenIsTemplate(type)){return this.parseTaggedTemplateExpression(base,startLoc,state);}let optional=false;if(type===18){if(noCalls){this.raise(Errors.OptionalChainingNoNew,this.state.startLoc);if(this.lookaheadCharCode()===40){return this.stopParseSubscript(base,state);}}state.optionalChainMember=optional=true;this.next();}if(!noCalls&&this.match(10)){return this.parseCoverCallAndAsyncArrowHead(base,startLoc,state,optional);}else{const computed=this.eat(0);if(computed||optional||this.eat(16)){return this.parseMember(base,startLoc,state,computed,optional);}else{return this.stopParseSubscript(base,state);}}}stopParseSubscript(base,state){state.stop=true;return base;}parseMember(base,startLoc,state,computed,optional){const node=this.startNodeAt(startLoc);node.object=base;node.computed=computed;if(computed){node.property=this.parseExpression();this.expect(3);}else if(this.match(139)){if(base.type===\"Super\"){this.raise(Errors.SuperPrivateField,startLoc);}this.classScope.usePrivateName(this.state.value,this.state.startLoc);node.property=this.parsePrivateName();}else{node.property=this.parseIdentifier(true);}if(state.optionalChainMember){node.optional=optional;return this.finishNode(node,\"OptionalMemberExpression\");}else{return this.finishNode(node,\"MemberExpression\");}}parseBind(base,startLoc,noCalls,state){const node=this.startNodeAt(startLoc);node.object=base;this.next();node.callee=this.parseNoCallExpr();state.stop=true;return this.parseSubscripts(this.finishNode(node,\"BindExpression\"),startLoc,noCalls);}parseCoverCallAndAsyncArrowHead(base,startLoc,state,optional){const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;let refExpressionErrors=null;this.state.maybeInArrowParameters=true;this.next();const node=this.startNodeAt(startLoc);node.callee=base;const{maybeAsyncArrow,optionalChainMember}=state;if(maybeAsyncArrow){this.expressionScope.enter(newAsyncArrowScope());refExpressionErrors=new ExpressionErrors();}if(optionalChainMember){node.optional=optional;}if(optional){node.arguments=this.parseCallExpressionArguments(11);}else{node.arguments=this.parseCallExpressionArguments(11,base.type!==\"Super\",node,refExpressionErrors);}let finishedNode=this.finishCallExpression(node,optionalChainMember);if(maybeAsyncArrow&&this.shouldParseAsyncArrow()&&!optional){state.stop=true;this.checkDestructuringPrivate(refExpressionErrors);this.expressionScope.validateAsPattern();this.expressionScope.exit();finishedNode=this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc),finishedNode);}else{if(maybeAsyncArrow){this.checkExpressionErrors(refExpressionErrors,true);this.expressionScope.exit();}this.toReferencedArguments(finishedNode);}this.state.maybeInArrowParameters=oldMaybeInArrowParameters;return finishedNode;}toReferencedArguments(node,isParenthesizedExpr){this.toReferencedListDeep(node.arguments,isParenthesizedExpr);}parseTaggedTemplateExpression(base,startLoc,state){const node=this.startNodeAt(startLoc);node.tag=base;node.quasi=this.parseTemplate(true);if(state.optionalChainMember){this.raise(Errors.OptionalChainingNoTemplate,startLoc);}return this.finishNode(node,\"TaggedTemplateExpression\");}atPossibleAsyncArrow(base){return base.type===\"Identifier\"&&base.name===\"async\"&&this.state.lastTokEndLoc.index===base.end&&!this.canInsertSemicolon()&&base.end-base.start===5&&this.offsetToSourcePos(base.start)===this.state.potentialArrowAt;}finishCallExpression(node,optional){if(node.callee.type===\"Import\"){if(node.arguments.length===0||node.arguments.length>2){this.raise(Errors.ImportCallArity,node);}else{for(const arg of node.arguments){if(arg.type===\"SpreadElement\"){this.raise(Errors.ImportCallSpreadArgument,arg);}}}}return this.finishNode(node,optional?\"OptionalCallExpression\":\"CallExpression\");}parseCallExpressionArguments(close,allowPlaceholder,nodeForExtra,refExpressionErrors){const elts=[];let first=true;const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=false;while(!this.eat(close)){if(first){first=false;}else{this.expect(12);if(this.match(close)){if(nodeForExtra){this.addTrailingCommaExtraToNode(nodeForExtra);}this.next();break;}}elts.push(this.parseExprListItem(false,refExpressionErrors,allowPlaceholder));}this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody;return elts;}shouldParseAsyncArrow(){return this.match(19)&&!this.canInsertSemicolon();}parseAsyncArrowFromCallExpression(node,call){var _call$extra;this.resetPreviousNodeTrailingComments(call);this.expect(19);this.parseArrowExpression(node,call.arguments,true,(_call$extra=call.extra)==null?void 0:_call$extra.trailingCommaLoc);if(call.innerComments){setInnerComments(node,call.innerComments);}if(call.callee.trailingComments){setInnerComments(node,call.callee.trailingComments);}return node;}parseNoCallExpr(){const startLoc=this.state.startLoc;return this.parseSubscripts(this.parseExprAtom(),startLoc,true);}parseExprAtom(refExpressionErrors){let node;let decorators=null;const{type}=this.state;switch(type){case 79:return this.parseSuper();case 83:node=this.startNode();this.next();if(this.match(16)){return this.parseImportMetaProperty(node);}if(this.match(10)){if(this.optionFlags&512){return this.parseImportCall(node);}else{return this.finishNode(node,\"Import\");}}else{this.raise(Errors.UnsupportedImport,this.state.lastTokStartLoc);return this.finishNode(node,\"Import\");}case 78:node=this.startNode();this.next();return this.finishNode(node,\"ThisExpression\");case 90:{return this.parseDo(this.startNode(),false);}case 56:case 31:{this.readRegexp();return this.parseRegExpLiteral(this.state.value);}case 135:return this.parseNumericLiteral(this.state.value);case 136:return this.parseBigIntLiteral(this.state.value);case 134:return this.parseStringLiteral(this.state.value);case 84:return this.parseNullLiteral();case 85:return this.parseBooleanLiteral(true);case 86:return this.parseBooleanLiteral(false);case 10:{const canBeArrow=this.state.potentialArrowAt===this.state.start;return this.parseParenAndDistinguishExpression(canBeArrow);}case 0:{return this.parseArrayLike(3,true,false,refExpressionErrors);}case 5:{return this.parseObjectLike(8,false,false,refExpressionErrors);}case 68:return this.parseFunctionOrFunctionSent();case 26:decorators=this.parseDecorators();case 80:return this.parseClass(this.maybeTakeDecorators(decorators,this.startNode()),false);case 77:return this.parseNewOrNewTarget();case 25:case 24:return this.parseTemplate(false);case 15:{node=this.startNode();this.next();node.object=null;const callee=node.callee=this.parseNoCallExpr();if(callee.type===\"MemberExpression\"){return this.finishNode(node,\"BindExpression\");}else{throw this.raise(Errors.UnsupportedBind,callee);}}case 139:{this.raise(Errors.PrivateInExpectedIn,this.state.startLoc,{identifierName:this.state.value});return this.parsePrivateName();}case 33:{return this.parseTopicReferenceThenEqualsSign(54,\"%\");}case 32:{return this.parseTopicReferenceThenEqualsSign(44,\"^\");}case 37:case 38:{return this.parseTopicReference(\"hack\");}case 44:case 54:case 27:{const pipeProposal=this.getPluginOption(\"pipelineOperator\",\"proposal\");if(pipeProposal){return this.parseTopicReference(pipeProposal);}this.unexpected();break;}case 47:{const lookaheadCh=this.input.codePointAt(this.nextTokenStart());if(isIdentifierStart(lookaheadCh)||lookaheadCh===62){this.expectOnePlugin([\"jsx\",\"flow\",\"typescript\"]);}else{this.unexpected();}break;}default:{if(type===137){return this.parseDecimalLiteral(this.state.value);}else if(type===2||type===1){return this.parseArrayLike(this.state.type===2?4:3,false,true);}else if(type===6||type===7){return this.parseObjectLike(this.state.type===6?9:8,false,true);}}if(tokenIsIdentifier(type)){if(this.isContextual(127)&&this.lookaheadInLineCharCode()===123){return this.parseModuleExpression();}const canBeArrow=this.state.potentialArrowAt===this.state.start;const containsEsc=this.state.containsEsc;const id=this.parseIdentifier();if(!containsEsc&&id.name===\"async\"&&!this.canInsertSemicolon()){const{type}=this.state;if(type===68){this.resetPreviousNodeTrailingComments(id);this.next();return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));}else if(tokenIsIdentifier(type)){if(this.lookaheadCharCode()===61){return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));}else{return id;}}else if(type===90){this.resetPreviousNodeTrailingComments(id);return this.parseDo(this.startNodeAtNode(id),true);}}if(canBeArrow&&this.match(19)&&!this.canInsertSemicolon()){this.next();return this.parseArrowExpression(this.startNodeAtNode(id),[id],false);}return id;}else{this.unexpected();}}}parseTopicReferenceThenEqualsSign(topicTokenType,topicTokenValue){const pipeProposal=this.getPluginOption(\"pipelineOperator\",\"proposal\");if(pipeProposal){this.state.type=topicTokenType;this.state.value=topicTokenValue;this.state.pos--;this.state.end--;this.state.endLoc=createPositionWithColumnOffset(this.state.endLoc,-1);return this.parseTopicReference(pipeProposal);}else{this.unexpected();}}parseTopicReference(pipeProposal){const node=this.startNode();const startLoc=this.state.startLoc;const tokenType=this.state.type;this.next();return this.finishTopicReference(node,startLoc,pipeProposal,tokenType);}finishTopicReference(node,startLoc,pipeProposal,tokenType){if(this.testTopicReferenceConfiguration(pipeProposal,startLoc,tokenType)){if(pipeProposal===\"hack\"){if(!this.topicReferenceIsAllowedInCurrentContext()){this.raise(Errors.PipeTopicUnbound,startLoc);}this.registerTopicReference();return this.finishNode(node,\"TopicReference\");}else{if(!this.topicReferenceIsAllowedInCurrentContext()){this.raise(Errors.PrimaryTopicNotAllowed,startLoc);}this.registerTopicReference();return this.finishNode(node,\"PipelinePrimaryTopicReference\");}}else{throw this.raise(Errors.PipeTopicUnconfiguredToken,startLoc,{token:tokenLabelName(tokenType)});}}testTopicReferenceConfiguration(pipeProposal,startLoc,tokenType){switch(pipeProposal){case\"hack\":{return this.hasPlugin([\"pipelineOperator\",{topicToken:tokenLabelName(tokenType)}]);}case\"smart\":return tokenType===27;default:throw this.raise(Errors.PipeTopicRequiresHackPipes,startLoc);}}parseAsyncArrowUnaryFunction(node){this.prodParam.enter(functionFlags(true,this.prodParam.hasYield));const params=[this.parseIdentifier()];this.prodParam.exit();if(this.hasPrecedingLineBreak()){this.raise(Errors.LineTerminatorBeforeArrow,this.state.curPosition());}this.expect(19);return this.parseArrowExpression(node,params,true);}parseDo(node,isAsync){this.expectPlugin(\"doExpressions\");if(isAsync){this.expectPlugin(\"asyncDoExpressions\");}node.async=isAsync;this.next();const oldLabels=this.state.labels;this.state.labels=[];if(isAsync){this.prodParam.enter(2);node.body=this.parseBlock();this.prodParam.exit();}else{node.body=this.parseBlock();}this.state.labels=oldLabels;return this.finishNode(node,\"DoExpression\");}parseSuper(){const node=this.startNode();this.next();if(this.match(10)&&!this.scope.allowDirectSuper&&!(this.optionFlags&16)){this.raise(Errors.SuperNotAllowed,node);}else if(!this.scope.allowSuper&&!(this.optionFlags&16)){this.raise(Errors.UnexpectedSuper,node);}if(!this.match(10)&&!this.match(0)&&!this.match(16)){this.raise(Errors.UnsupportedSuper,node);}return this.finishNode(node,\"Super\");}parsePrivateName(){const node=this.startNode();const id=this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc,1));const name=this.state.value;this.next();node.id=this.createIdentifier(id,name);return this.finishNode(node,\"PrivateName\");}parseFunctionOrFunctionSent(){const node=this.startNode();this.next();if(this.prodParam.hasYield&&this.match(16)){const meta=this.createIdentifier(this.startNodeAtNode(node),\"function\");this.next();if(this.match(103)){this.expectPlugin(\"functionSent\");}else if(!this.hasPlugin(\"functionSent\")){this.unexpected();}return this.parseMetaProperty(node,meta,\"sent\");}return this.parseFunction(node);}parseMetaProperty(node,meta,propertyName){node.meta=meta;const containsEsc=this.state.containsEsc;node.property=this.parseIdentifier(true);if(node.property.name!==propertyName||containsEsc){this.raise(Errors.UnsupportedMetaProperty,node.property,{target:meta.name,onlyValidPropertyName:propertyName});}return this.finishNode(node,\"MetaProperty\");}parseImportMetaProperty(node){const id=this.createIdentifier(this.startNodeAtNode(node),\"import\");this.next();if(this.isContextual(101)){if(!this.inModule){this.raise(Errors.ImportMetaOutsideModule,id);}this.sawUnambiguousESM=true;}else if(this.isContextual(105)||this.isContextual(97)){const isSource=this.isContextual(105);this.expectPlugin(isSource?\"sourcePhaseImports\":\"deferredImportEvaluation\");if(!(this.optionFlags&512)){throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions,this.state.startLoc,{phase:this.state.value});}this.next();node.phase=isSource?\"source\":\"defer\";return this.parseImportCall(node);}return this.parseMetaProperty(node,id,\"meta\");}parseLiteralAtNode(value,type,node){this.addExtra(node,\"rawValue\",value);this.addExtra(node,\"raw\",this.input.slice(this.offsetToSourcePos(node.start),this.state.end));node.value=value;this.next();return this.finishNode(node,type);}parseLiteral(value,type){const node=this.startNode();return this.parseLiteralAtNode(value,type,node);}parseStringLiteral(value){return this.parseLiteral(value,\"StringLiteral\");}parseNumericLiteral(value){return this.parseLiteral(value,\"NumericLiteral\");}parseBigIntLiteral(value){return this.parseLiteral(value,\"BigIntLiteral\");}parseDecimalLiteral(value){return this.parseLiteral(value,\"DecimalLiteral\");}parseRegExpLiteral(value){const node=this.startNode();this.addExtra(node,\"raw\",this.input.slice(this.offsetToSourcePos(node.start),this.state.end));node.pattern=value.pattern;node.flags=value.flags;this.next();return this.finishNode(node,\"RegExpLiteral\");}parseBooleanLiteral(value){const node=this.startNode();node.value=value;this.next();return this.finishNode(node,\"BooleanLiteral\");}parseNullLiteral(){const node=this.startNode();this.next();return this.finishNode(node,\"NullLiteral\");}parseParenAndDistinguishExpression(canBeArrow){const startLoc=this.state.startLoc;let val;this.next();this.expressionScope.enter(newArrowHeadScope());const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.maybeInArrowParameters=true;this.state.inFSharpPipelineDirectBody=false;const innerStartLoc=this.state.startLoc;const exprList=[];const refExpressionErrors=new ExpressionErrors();let first=true;let spreadStartLoc;let optionalCommaStartLoc;while(!this.match(11)){if(first){first=false;}else{this.expect(12,refExpressionErrors.optionalParametersLoc===null?null:refExpressionErrors.optionalParametersLoc);if(this.match(11)){optionalCommaStartLoc=this.state.startLoc;break;}}if(this.match(21)){const spreadNodeStartLoc=this.state.startLoc;spreadStartLoc=this.state.startLoc;exprList.push(this.parseParenItem(this.parseRestBinding(),spreadNodeStartLoc));if(!this.checkCommaAfterRest(41)){break;}}else{exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors,this.parseParenItem));}}const innerEndLoc=this.state.lastTokEndLoc;this.expect(11);this.state.maybeInArrowParameters=oldMaybeInArrowParameters;this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody;let arrowNode=this.startNodeAt(startLoc);if(canBeArrow&&this.shouldParseArrow(exprList)&&(arrowNode=this.parseArrow(arrowNode))){this.checkDestructuringPrivate(refExpressionErrors);this.expressionScope.validateAsPattern();this.expressionScope.exit();this.parseArrowExpression(arrowNode,exprList,false);return arrowNode;}this.expressionScope.exit();if(!exprList.length){this.unexpected(this.state.lastTokStartLoc);}if(optionalCommaStartLoc)this.unexpected(optionalCommaStartLoc);if(spreadStartLoc)this.unexpected(spreadStartLoc);this.checkExpressionErrors(refExpressionErrors,true);this.toReferencedListDeep(exprList,true);if(exprList.length>1){val=this.startNodeAt(innerStartLoc);val.expressions=exprList;this.finishNode(val,\"SequenceExpression\");this.resetEndLocation(val,innerEndLoc);}else{val=exprList[0];}return this.wrapParenthesis(startLoc,val);}wrapParenthesis(startLoc,expression){if(!(this.optionFlags&1024)){this.addExtra(expression,\"parenthesized\",true);this.addExtra(expression,\"parenStart\",startLoc.index);this.takeSurroundingComments(expression,startLoc.index,this.state.lastTokEndLoc.index);return expression;}const parenExpression=this.startNodeAt(startLoc);parenExpression.expression=expression;return this.finishNode(parenExpression,\"ParenthesizedExpression\");}shouldParseArrow(params){return!this.canInsertSemicolon();}parseArrow(node){if(this.eat(19)){return node;}}parseParenItem(node,startLoc){return node;}parseNewOrNewTarget(){const node=this.startNode();this.next();if(this.match(16)){const meta=this.createIdentifier(this.startNodeAtNode(node),\"new\");this.next();const metaProp=this.parseMetaProperty(node,meta,\"target\");if(!this.scope.inNonArrowFunction&&!this.scope.inClass&&!(this.optionFlags&4)){this.raise(Errors.UnexpectedNewTarget,metaProp);}return metaProp;}return this.parseNew(node);}parseNew(node){this.parseNewCallee(node);if(this.eat(10)){const args=this.parseExprList(11);this.toReferencedList(args);node.arguments=args;}else{node.arguments=[];}return this.finishNode(node,\"NewExpression\");}parseNewCallee(node){const isImport=this.match(83);const callee=this.parseNoCallExpr();node.callee=callee;if(isImport&&(callee.type===\"Import\"||callee.type===\"ImportExpression\")){this.raise(Errors.ImportCallNotNewExpression,callee);}}parseTemplateElement(isTagged){const{start,startLoc,end,value}=this.state;const elemStart=start+1;const elem=this.startNodeAt(createPositionWithColumnOffset(startLoc,1));if(value===null){if(!isTagged){this.raise(Errors.InvalidEscapeSequenceTemplate,createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos,1));}}const isTail=this.match(24);const endOffset=isTail?-1:-2;const elemEnd=end+endOffset;elem.value={raw:this.input.slice(elemStart,elemEnd).replace(/\\r\\n?/g,\"\\n\"),cooked:value===null?null:value.slice(1,endOffset)};elem.tail=isTail;this.next();const finishedNode=this.finishNode(elem,\"TemplateElement\");this.resetEndLocation(finishedNode,createPositionWithColumnOffset(this.state.lastTokEndLoc,endOffset));return finishedNode;}parseTemplate(isTagged){const node=this.startNode();let curElt=this.parseTemplateElement(isTagged);const quasis=[curElt];const substitutions=[];while(!curElt.tail){substitutions.push(this.parseTemplateSubstitution());this.readTemplateContinuation();quasis.push(curElt=this.parseTemplateElement(isTagged));}node.expressions=substitutions;node.quasis=quasis;return this.finishNode(node,\"TemplateLiteral\");}parseTemplateSubstitution(){return this.parseExpression();}parseObjectLike(close,isPattern,isRecord,refExpressionErrors){if(isRecord){this.expectPlugin(\"recordAndTuple\");}const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=false;let sawProto=false;let first=true;const node=this.startNode();node.properties=[];this.next();while(!this.match(close)){if(first){first=false;}else{this.expect(12);if(this.match(close)){this.addTrailingCommaExtraToNode(node);break;}}let prop;if(isPattern){prop=this.parseBindingProperty();}else{prop=this.parsePropertyDefinition(refExpressionErrors);sawProto=this.checkProto(prop,isRecord,sawProto,refExpressionErrors);}if(isRecord&&!this.isObjectProperty(prop)&&prop.type!==\"SpreadElement\"){this.raise(Errors.InvalidRecordProperty,prop);}{if(prop.shorthand){this.addExtra(prop,\"shorthand\",true);}}node.properties.push(prop);}this.next();this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody;let type=\"ObjectExpression\";if(isPattern){type=\"ObjectPattern\";}else if(isRecord){type=\"RecordExpression\";}return this.finishNode(node,type);}addTrailingCommaExtraToNode(node){this.addExtra(node,\"trailingComma\",this.state.lastTokStartLoc.index);this.addExtra(node,\"trailingCommaLoc\",this.state.lastTokStartLoc,false);}maybeAsyncOrAccessorProp(prop){return!prop.computed&&prop.key.type===\"Identifier\"&&(this.isLiteralPropertyName()||this.match(0)||this.match(55));}parsePropertyDefinition(refExpressionErrors){let decorators=[];if(this.match(26)){if(this.hasPlugin(\"decorators\")){this.raise(Errors.UnsupportedPropertyDecorator,this.state.startLoc);}while(this.match(26)){decorators.push(this.parseDecorator());}}const prop=this.startNode();let isAsync=false;let isAccessor=false;let startLoc;if(this.match(21)){if(decorators.length)this.unexpected();return this.parseSpread();}if(decorators.length){prop.decorators=decorators;decorators=[];}prop.method=false;if(refExpressionErrors){startLoc=this.state.startLoc;}let isGenerator=this.eat(55);this.parsePropertyNamePrefixOperator(prop);const containsEsc=this.state.containsEsc;this.parsePropertyName(prop,refExpressionErrors);if(!isGenerator&&!containsEsc&&this.maybeAsyncOrAccessorProp(prop)){const{key}=prop;const keyName=key.name;if(keyName===\"async\"&&!this.hasPrecedingLineBreak()){isAsync=true;this.resetPreviousNodeTrailingComments(key);isGenerator=this.eat(55);this.parsePropertyName(prop);}if(keyName===\"get\"||keyName===\"set\"){isAccessor=true;this.resetPreviousNodeTrailingComments(key);prop.kind=keyName;if(this.match(55)){isGenerator=true;this.raise(Errors.AccessorIsGenerator,this.state.curPosition(),{kind:keyName});this.next();}this.parsePropertyName(prop);}}return this.parseObjPropValue(prop,startLoc,isGenerator,isAsync,false,isAccessor,refExpressionErrors);}getGetterSetterExpectedParamCount(method){return method.kind===\"get\"?0:1;}getObjectOrClassMethodParams(method){return method.params;}checkGetterSetterParams(method){var _params;const paramCount=this.getGetterSetterExpectedParamCount(method);const params=this.getObjectOrClassMethodParams(method);if(params.length!==paramCount){this.raise(method.kind===\"get\"?Errors.BadGetterArity:Errors.BadSetterArity,method);}if(method.kind===\"set\"&&((_params=params[params.length-1])==null?void 0:_params.type)===\"RestElement\"){this.raise(Errors.BadSetterRestParameter,method);}}parseObjectMethod(prop,isGenerator,isAsync,isPattern,isAccessor){if(isAccessor){const finishedProp=this.parseMethod(prop,isGenerator,false,false,false,\"ObjectMethod\");this.checkGetterSetterParams(finishedProp);return finishedProp;}if(isAsync||isGenerator||this.match(10)){if(isPattern)this.unexpected();prop.kind=\"method\";prop.method=true;return this.parseMethod(prop,isGenerator,isAsync,false,false,\"ObjectMethod\");}}parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors){prop.shorthand=false;if(this.eat(14)){prop.value=isPattern?this.parseMaybeDefault(this.state.startLoc):this.parseMaybeAssignAllowIn(refExpressionErrors);return this.finishObjectProperty(prop);}if(!prop.computed&&prop.key.type===\"Identifier\"){this.checkReservedWord(prop.key.name,prop.key.loc.start,true,false);if(isPattern){prop.value=this.parseMaybeDefault(startLoc,this.cloneIdentifier(prop.key));}else if(this.match(29)){const shorthandAssignLoc=this.state.startLoc;if(refExpressionErrors!=null){if(refExpressionErrors.shorthandAssignLoc===null){refExpressionErrors.shorthandAssignLoc=shorthandAssignLoc;}}else{this.raise(Errors.InvalidCoverInitializedName,shorthandAssignLoc);}prop.value=this.parseMaybeDefault(startLoc,this.cloneIdentifier(prop.key));}else{prop.value=this.cloneIdentifier(prop.key);}prop.shorthand=true;return this.finishObjectProperty(prop);}}finishObjectProperty(node){return this.finishNode(node,\"ObjectProperty\");}parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors){const node=this.parseObjectMethod(prop,isGenerator,isAsync,isPattern,isAccessor)||this.parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors);if(!node)this.unexpected();return node;}parsePropertyName(prop,refExpressionErrors){if(this.eat(0)){prop.computed=true;prop.key=this.parseMaybeAssignAllowIn();this.expect(3);}else{const{type,value}=this.state;let key;if(tokenIsKeywordOrIdentifier(type)){key=this.parseIdentifier(true);}else{switch(type){case 135:key=this.parseNumericLiteral(value);break;case 134:key=this.parseStringLiteral(value);break;case 136:key=this.parseBigIntLiteral(value);break;case 139:{const privateKeyLoc=this.state.startLoc;if(refExpressionErrors!=null){if(refExpressionErrors.privateKeyLoc===null){refExpressionErrors.privateKeyLoc=privateKeyLoc;}}else{this.raise(Errors.UnexpectedPrivateField,privateKeyLoc);}key=this.parsePrivateName();break;}default:if(type===137){key=this.parseDecimalLiteral(value);break;}this.unexpected();}}prop.key=key;if(type!==139){prop.computed=false;}}}initFunction(node,isAsync){node.id=null;node.generator=false;node.async=isAsync;}parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope=false){this.initFunction(node,isAsync);node.generator=isGenerator;this.scope.enter(2|16|(inClassScope?64:0)|(allowDirectSuper?32:0));this.prodParam.enter(functionFlags(isAsync,node.generator));this.parseFunctionParams(node,isConstructor);const finishedNode=this.parseFunctionBodyAndFinish(node,type,true);this.prodParam.exit();this.scope.exit();return finishedNode;}parseArrayLike(close,canBePattern,isTuple,refExpressionErrors){if(isTuple){this.expectPlugin(\"recordAndTuple\");}const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=false;const node=this.startNode();this.next();node.elements=this.parseExprList(close,!isTuple,refExpressionErrors,node);this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody;return this.finishNode(node,isTuple?\"TupleExpression\":\"ArrayExpression\");}parseArrowExpression(node,params,isAsync,trailingCommaLoc){this.scope.enter(2|4);let flags=functionFlags(isAsync,false);if(!this.match(5)&&this.prodParam.hasIn){flags|=8;}this.prodParam.enter(flags);this.initFunction(node,isAsync);const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;if(params){this.state.maybeInArrowParameters=true;this.setArrowFunctionParameters(node,params,trailingCommaLoc);}this.state.maybeInArrowParameters=false;this.parseFunctionBody(node,true);this.prodParam.exit();this.scope.exit();this.state.maybeInArrowParameters=oldMaybeInArrowParameters;return this.finishNode(node,\"ArrowFunctionExpression\");}setArrowFunctionParameters(node,params,trailingCommaLoc){this.toAssignableList(params,trailingCommaLoc,false);node.params=params;}parseFunctionBodyAndFinish(node,type,isMethod=false){this.parseFunctionBody(node,false,isMethod);return this.finishNode(node,type);}parseFunctionBody(node,allowExpression,isMethod=false){const isExpression=allowExpression&&!this.match(5);this.expressionScope.enter(newExpressionScope());if(isExpression){node.body=this.parseMaybeAssign();this.checkParams(node,false,allowExpression,false);}else{const oldStrict=this.state.strict;const oldLabels=this.state.labels;this.state.labels=[];this.prodParam.enter(this.prodParam.currentFlags()|4);node.body=this.parseBlock(true,false,hasStrictModeDirective=>{const nonSimple=!this.isSimpleParamList(node.params);if(hasStrictModeDirective&&nonSimple){this.raise(Errors.IllegalLanguageModeDirective,(node.kind===\"method\"||node.kind===\"constructor\")&&!!node.key?node.key.loc.end:node);}const strictModeChanged=!oldStrict&&this.state.strict;this.checkParams(node,!this.state.strict&&!allowExpression&&!isMethod&&!nonSimple,allowExpression,strictModeChanged);if(this.state.strict&&node.id){this.checkIdentifier(node.id,65,strictModeChanged);}});this.prodParam.exit();this.state.labels=oldLabels;}this.expressionScope.exit();}isSimpleParameter(node){return node.type===\"Identifier\";}isSimpleParamList(params){for(let i=0,len=params.length;i<len;i++){if(!this.isSimpleParameter(params[i]))return false;}return true;}checkParams(node,allowDuplicates,isArrowFunction,strictModeChanged=true){const checkClashes=!allowDuplicates&&new Set();const formalParameters={type:\"FormalParameters\"};for(const param of node.params){this.checkLVal(param,formalParameters,5,checkClashes,strictModeChanged);}}parseExprList(close,allowEmpty,refExpressionErrors,nodeForExtra){const elts=[];let first=true;while(!this.eat(close)){if(first){first=false;}else{this.expect(12);if(this.match(close)){if(nodeForExtra){this.addTrailingCommaExtraToNode(nodeForExtra);}this.next();break;}}elts.push(this.parseExprListItem(allowEmpty,refExpressionErrors));}return elts;}parseExprListItem(allowEmpty,refExpressionErrors,allowPlaceholder){let elt;if(this.match(12)){if(!allowEmpty){this.raise(Errors.UnexpectedToken,this.state.curPosition(),{unexpected:\",\"});}elt=null;}else if(this.match(21)){const spreadNodeStartLoc=this.state.startLoc;elt=this.parseParenItem(this.parseSpread(refExpressionErrors),spreadNodeStartLoc);}else if(this.match(17)){this.expectPlugin(\"partialApplication\");if(!allowPlaceholder){this.raise(Errors.UnexpectedArgumentPlaceholder,this.state.startLoc);}const node=this.startNode();this.next();elt=this.finishNode(node,\"ArgumentPlaceholder\");}else{elt=this.parseMaybeAssignAllowIn(refExpressionErrors,this.parseParenItem);}return elt;}parseIdentifier(liberal){const node=this.startNode();const name=this.parseIdentifierName(liberal);return this.createIdentifier(node,name);}createIdentifier(node,name){node.name=name;node.loc.identifierName=name;return this.finishNode(node,\"Identifier\");}parseIdentifierName(liberal){let name;const{startLoc,type}=this.state;if(tokenIsKeywordOrIdentifier(type)){name=this.state.value;}else{this.unexpected();}const tokenIsKeyword=tokenKeywordOrIdentifierIsKeyword(type);if(liberal){if(tokenIsKeyword){this.replaceToken(132);}}else{this.checkReservedWord(name,startLoc,tokenIsKeyword,false);}this.next();return name;}checkReservedWord(word,startLoc,checkKeywords,isBinding){if(word.length>10){return;}if(!canBeReservedWord(word)){return;}if(checkKeywords&&isKeyword(word)){this.raise(Errors.UnexpectedKeyword,startLoc,{keyword:word});return;}const reservedTest=!this.state.strict?isReservedWord:isBinding?isStrictBindReservedWord:isStrictReservedWord;if(reservedTest(word,this.inModule)){this.raise(Errors.UnexpectedReservedWord,startLoc,{reservedWord:word});return;}else if(word===\"yield\"){if(this.prodParam.hasYield){this.raise(Errors.YieldBindingIdentifier,startLoc);return;}}else if(word===\"await\"){if(this.prodParam.hasAwait){this.raise(Errors.AwaitBindingIdentifier,startLoc);return;}if(this.scope.inStaticBlock){this.raise(Errors.AwaitBindingIdentifierInStaticBlock,startLoc);return;}this.expressionScope.recordAsyncArrowParametersError(startLoc);}else if(word===\"arguments\"){if(this.scope.inClassAndNotInNonArrowFunction){this.raise(Errors.ArgumentsInClass,startLoc);return;}}}recordAwaitIfAllowed(){const isAwaitAllowed=this.prodParam.hasAwait||this.optionFlags&1&&!this.scope.inFunction;if(isAwaitAllowed&&!this.scope.inFunction){this.state.hasTopLevelAwait=true;}return isAwaitAllowed;}parseAwait(startLoc){const node=this.startNodeAt(startLoc);this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter,node);if(this.eat(55)){this.raise(Errors.ObsoleteAwaitStar,node);}if(!this.scope.inFunction&&!(this.optionFlags&1)){if(this.isAmbiguousPrefixOrIdentifier()){this.ambiguousScriptDifferentAst=true;}else{this.sawUnambiguousESM=true;}}if(!this.state.soloAwait){node.argument=this.parseMaybeUnary(null,true);}return this.finishNode(node,\"AwaitExpression\");}isAmbiguousPrefixOrIdentifier(){if(this.hasPrecedingLineBreak())return true;const{type}=this.state;return type===53||type===10||type===0||tokenIsTemplate(type)||type===102&&!this.state.containsEsc||type===138||type===56||this.hasPlugin(\"v8intrinsic\")&&type===54;}parseYield(startLoc){const node=this.startNodeAt(startLoc);this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter,node);let delegating=false;let argument=null;if(!this.hasPrecedingLineBreak()){delegating=this.eat(55);switch(this.state.type){case 13:case 140:case 8:case 11:case 3:case 9:case 14:case 12:if(!delegating)break;default:argument=this.parseMaybeAssign();}}node.delegate=delegating;node.argument=argument;return this.finishNode(node,\"YieldExpression\");}parseImportCall(node){this.next();node.source=this.parseMaybeAssignAllowIn();node.options=null;if(this.eat(12)){if(!this.match(11)){node.options=this.parseMaybeAssignAllowIn();if(this.eat(12)&&!this.match(11)){do{this.parseMaybeAssignAllowIn();}while(this.eat(12)&&!this.match(11));this.raise(Errors.ImportCallArity,node);}}}this.expect(11);return this.finishNode(node,\"ImportExpression\");}checkPipelineAtInfixOperator(left,leftStartLoc){if(this.hasPlugin([\"pipelineOperator\",{proposal:\"smart\"}])){if(left.type===\"SequenceExpression\"){this.raise(Errors.PipelineHeadSequenceExpression,leftStartLoc);}}}parseSmartPipelineBodyInStyle(childExpr,startLoc){if(this.isSimpleReference(childExpr)){const bodyNode=this.startNodeAt(startLoc);bodyNode.callee=childExpr;return this.finishNode(bodyNode,\"PipelineBareFunction\");}else{const bodyNode=this.startNodeAt(startLoc);this.checkSmartPipeTopicBodyEarlyErrors(startLoc);bodyNode.expression=childExpr;return this.finishNode(bodyNode,\"PipelineTopicExpression\");}}isSimpleReference(expression){switch(expression.type){case\"MemberExpression\":return!expression.computed&&this.isSimpleReference(expression.object);case\"Identifier\":return true;default:return false;}}checkSmartPipeTopicBodyEarlyErrors(startLoc){if(this.match(19)){throw this.raise(Errors.PipelineBodyNoArrow,this.state.startLoc);}if(!this.topicReferenceWasUsedInCurrentContext()){this.raise(Errors.PipelineTopicUnused,startLoc);}}withTopicBindingContext(callback){const outerContextTopicState=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:1,maxTopicIndex:null};try{return callback();}finally{this.state.topicContext=outerContextTopicState;}}withSmartMixTopicForbiddingContext(callback){if(this.hasPlugin([\"pipelineOperator\",{proposal:\"smart\"}])){const outerContextTopicState=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null};try{return callback();}finally{this.state.topicContext=outerContextTopicState;}}else{return callback();}}withSoloAwaitPermittingContext(callback){const outerContextSoloAwaitState=this.state.soloAwait;this.state.soloAwait=true;try{return callback();}finally{this.state.soloAwait=outerContextSoloAwaitState;}}allowInAnd(callback){const flags=this.prodParam.currentFlags();const prodParamToSet=8&~flags;if(prodParamToSet){this.prodParam.enter(flags|8);try{return callback();}finally{this.prodParam.exit();}}return callback();}disallowInAnd(callback){const flags=this.prodParam.currentFlags();const prodParamToClear=8&flags;if(prodParamToClear){this.prodParam.enter(flags&~8);try{return callback();}finally{this.prodParam.exit();}}return callback();}registerTopicReference(){this.state.topicContext.maxTopicIndex=0;}topicReferenceIsAllowedInCurrentContext(){return this.state.topicContext.maxNumOfResolvableTopics>=1;}topicReferenceWasUsedInCurrentContext(){return this.state.topicContext.maxTopicIndex!=null&&this.state.topicContext.maxTopicIndex>=0;}parseFSharpPipelineBody(prec){const startLoc=this.state.startLoc;this.state.potentialArrowAt=this.state.start;const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=true;const ret=this.parseExprOp(this.parseMaybeUnaryOrPrivate(),startLoc,prec);this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody;return ret;}parseModuleExpression(){this.expectPlugin(\"moduleBlocks\");const node=this.startNode();this.next();if(!this.match(5)){this.unexpected(null,5);}const program=this.startNodeAt(this.state.endLoc);this.next();const revertScopes=this.initializeScopes(true);this.enterInitialScopes();try{node.body=this.parseProgram(program,8,\"module\");}finally{revertScopes();}return this.finishNode(node,\"ModuleExpression\");}parsePropertyNamePrefixOperator(prop){}}const loopLabel={kind:1},switchLabel={kind:2};const loneSurrogate=/[\\uD800-\\uDFFF]/u;const keywordRelationalOperator=/in(?:stanceof)?/y;function babel7CompatTokens(tokens,input,startIndex){for(let i=0;i<tokens.length;i++){const token=tokens[i];const{type}=token;if(typeof type===\"number\"){{if(type===139){const{loc,start,value,end}=token;const hashEndPos=start+1;const hashEndLoc=createPositionWithColumnOffset(loc.start,1);tokens.splice(i,1,new Token({type:getExportedToken(27),value:\"#\",start:start,end:hashEndPos,startLoc:loc.start,endLoc:hashEndLoc}),new Token({type:getExportedToken(132),value:value,start:hashEndPos,end:end,startLoc:hashEndLoc,endLoc:loc.end}));i++;continue;}if(tokenIsTemplate(type)){const{loc,start,value,end}=token;const backquoteEnd=start+1;const backquoteEndLoc=createPositionWithColumnOffset(loc.start,1);let startToken;if(input.charCodeAt(start-startIndex)===96){startToken=new Token({type:getExportedToken(22),value:\"`\",start:start,end:backquoteEnd,startLoc:loc.start,endLoc:backquoteEndLoc});}else{startToken=new Token({type:getExportedToken(8),value:\"}\",start:start,end:backquoteEnd,startLoc:loc.start,endLoc:backquoteEndLoc});}let templateValue,templateElementEnd,templateElementEndLoc,endToken;if(type===24){templateElementEnd=end-1;templateElementEndLoc=createPositionWithColumnOffset(loc.end,-1);templateValue=value===null?null:value.slice(1,-1);endToken=new Token({type:getExportedToken(22),value:\"`\",start:templateElementEnd,end:end,startLoc:templateElementEndLoc,endLoc:loc.end});}else{templateElementEnd=end-2;templateElementEndLoc=createPositionWithColumnOffset(loc.end,-2);templateValue=value===null?null:value.slice(1,-2);endToken=new Token({type:getExportedToken(23),value:\"${\",start:templateElementEnd,end:end,startLoc:templateElementEndLoc,endLoc:loc.end});}tokens.splice(i,1,startToken,new Token({type:getExportedToken(20),value:templateValue,start:backquoteEnd,end:templateElementEnd,startLoc:backquoteEndLoc,endLoc:templateElementEndLoc}),endToken);i+=2;continue;}}token.type=getExportedToken(type);}}return tokens;}class StatementParser extends ExpressionParser{parseTopLevel(file,program){file.program=this.parseProgram(program);file.comments=this.comments;if(this.optionFlags&256){file.tokens=babel7CompatTokens(this.tokens,this.input,this.startIndex);}return this.finishNode(file,\"File\");}parseProgram(program,end=140,sourceType=this.options.sourceType){program.sourceType=sourceType;program.interpreter=this.parseInterpreterDirective();this.parseBlockBody(program,true,true,end);if(this.inModule){if(!(this.optionFlags&64)&&this.scope.undefinedExports.size>0){for(const[localName,at]of Array.from(this.scope.undefinedExports)){this.raise(Errors.ModuleExportUndefined,at,{localName});}}this.addExtra(program,\"topLevelAwait\",this.state.hasTopLevelAwait);}let finishedProgram;if(end===140){finishedProgram=this.finishNode(program,\"Program\");}else{finishedProgram=this.finishNodeAt(program,\"Program\",createPositionWithColumnOffset(this.state.startLoc,-1));}return finishedProgram;}stmtToDirective(stmt){const directive=this.castNodeTo(stmt,\"Directive\");const directiveLiteral=this.castNodeTo(stmt.expression,\"DirectiveLiteral\");const expressionValue=directiveLiteral.value;const raw=this.input.slice(this.offsetToSourcePos(directiveLiteral.start),this.offsetToSourcePos(directiveLiteral.end));const val=directiveLiteral.value=raw.slice(1,-1);this.addExtra(directiveLiteral,\"raw\",raw);this.addExtra(directiveLiteral,\"rawValue\",val);this.addExtra(directiveLiteral,\"expressionValue\",expressionValue);directive.value=directiveLiteral;delete stmt.expression;return directive;}parseInterpreterDirective(){if(!this.match(28)){return null;}const node=this.startNode();node.value=this.state.value;this.next();return this.finishNode(node,\"InterpreterDirective\");}isLet(){if(!this.isContextual(100)){return false;}return this.hasFollowingBindingAtom();}chStartsBindingIdentifier(ch,pos){if(isIdentifierStart(ch)){keywordRelationalOperator.lastIndex=pos;if(keywordRelationalOperator.test(this.input)){const endCh=this.codePointAtPos(keywordRelationalOperator.lastIndex);if(!isIdentifierChar(endCh)&&endCh!==92){return false;}}return true;}else if(ch===92){return true;}else{return false;}}chStartsBindingPattern(ch){return ch===91||ch===123;}hasFollowingBindingAtom(){const next=this.nextTokenStart();const nextCh=this.codePointAtPos(next);return this.chStartsBindingPattern(nextCh)||this.chStartsBindingIdentifier(nextCh,next);}hasInLineFollowingBindingIdentifierOrBrace(){const next=this.nextTokenInLineStart();const nextCh=this.codePointAtPos(next);return nextCh===123||this.chStartsBindingIdentifier(nextCh,next);}allowsForUsing(){const{type,containsEsc,end}=this.lookahead();if(type===102&&!containsEsc){const nextCharAfterOf=this.lookaheadCharCodeSince(end);if(nextCharAfterOf!==61&&nextCharAfterOf!==58&&nextCharAfterOf!==59){return false;}}if(tokenIsIdentifier(type)&&!this.hasFollowingLineBreak()){this.expectPlugin(\"explicitResourceManagement\");return true;}return false;}startsAwaitUsing(){let next=this.nextTokenInLineStart();if(this.isUnparsedContextual(next,\"using\")){next=this.nextTokenInLineStartSince(next+5);const nextCh=this.codePointAtPos(next);if(this.chStartsBindingIdentifier(nextCh,next)){this.expectPlugin(\"explicitResourceManagement\");return true;}}return false;}parseModuleItem(){return this.parseStatementLike(1|2|4|8);}parseStatementListItem(){return this.parseStatementLike(2|4|(!this.options.annexB||this.state.strict?0:8));}parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction=false){let flags=0;if(this.options.annexB&&!this.state.strict){flags|=4;if(allowLabeledFunction){flags|=8;}}return this.parseStatementLike(flags);}parseStatement(){return this.parseStatementLike(0);}parseStatementLike(flags){let decorators=null;if(this.match(26)){decorators=this.parseDecorators(true);}return this.parseStatementContent(flags,decorators);}parseStatementContent(flags,decorators){const startType=this.state.type;const node=this.startNode();const allowDeclaration=!!(flags&2);const allowFunctionDeclaration=!!(flags&4);const topLevel=flags&1;switch(startType){case 60:return this.parseBreakContinueStatement(node,true);case 63:return this.parseBreakContinueStatement(node,false);case 64:return this.parseDebuggerStatement(node);case 90:return this.parseDoWhileStatement(node);case 91:return this.parseForStatement(node);case 68:if(this.lookaheadCharCode()===46)break;if(!allowFunctionDeclaration){this.raise(this.state.strict?Errors.StrictFunction:this.options.annexB?Errors.SloppyFunctionAnnexB:Errors.SloppyFunction,this.state.startLoc);}return this.parseFunctionStatement(node,false,!allowDeclaration&&allowFunctionDeclaration);case 80:if(!allowDeclaration)this.unexpected();return this.parseClass(this.maybeTakeDecorators(decorators,node),true);case 69:return this.parseIfStatement(node);case 70:return this.parseReturnStatement(node);case 71:return this.parseSwitchStatement(node);case 72:return this.parseThrowStatement(node);case 73:return this.parseTryStatement(node);case 96:if(!this.state.containsEsc&&this.startsAwaitUsing()){if(!this.recordAwaitIfAllowed()){this.raise(Errors.AwaitUsingNotInAsyncContext,node);}else if(!allowDeclaration){this.raise(Errors.UnexpectedLexicalDeclaration,node);}this.next();return this.parseVarStatement(node,\"await using\");}break;case 107:if(this.state.containsEsc||!this.hasInLineFollowingBindingIdentifierOrBrace()){break;}this.expectPlugin(\"explicitResourceManagement\");if(!this.scope.inModule&&this.scope.inTopLevel){this.raise(Errors.UnexpectedUsingDeclaration,this.state.startLoc);}else if(!allowDeclaration){this.raise(Errors.UnexpectedLexicalDeclaration,this.state.startLoc);}return this.parseVarStatement(node,\"using\");case 100:{if(this.state.containsEsc){break;}const next=this.nextTokenStart();const nextCh=this.codePointAtPos(next);if(nextCh!==91){if(!allowDeclaration&&this.hasFollowingLineBreak())break;if(!this.chStartsBindingIdentifier(nextCh,next)&&nextCh!==123){break;}}}case 75:{if(!allowDeclaration){this.raise(Errors.UnexpectedLexicalDeclaration,this.state.startLoc);}}case 74:{const kind=this.state.value;return this.parseVarStatement(node,kind);}case 92:return this.parseWhileStatement(node);case 76:return this.parseWithStatement(node);case 5:return this.parseBlock();case 13:return this.parseEmptyStatement(node);case 83:{const nextTokenCharCode=this.lookaheadCharCode();if(nextTokenCharCode===40||nextTokenCharCode===46){break;}}case 82:{if(!(this.optionFlags&8)&&!topLevel){this.raise(Errors.UnexpectedImportExport,this.state.startLoc);}this.next();let result;if(startType===83){result=this.parseImport(node);}else{result=this.parseExport(node,decorators);}this.assertModuleNodeAllowed(result);return result;}default:{if(this.isAsyncFunction()){if(!allowDeclaration){this.raise(Errors.AsyncFunctionInSingleStatementContext,this.state.startLoc);}this.next();return this.parseFunctionStatement(node,true,!allowDeclaration&&allowFunctionDeclaration);}}}const maybeName=this.state.value;const expr=this.parseExpression();if(tokenIsIdentifier(startType)&&expr.type===\"Identifier\"&&this.eat(14)){return this.parseLabeledStatement(node,maybeName,expr,flags);}else{return this.parseExpressionStatement(node,expr,decorators);}}assertModuleNodeAllowed(node){if(!(this.optionFlags&8)&&!this.inModule){this.raise(Errors.ImportOutsideModule,node);}}decoratorsEnabledBeforeExport(){if(this.hasPlugin(\"decorators-legacy\"))return true;return this.hasPlugin(\"decorators\")&&this.getPluginOption(\"decorators\",\"decoratorsBeforeExport\")!==false;}maybeTakeDecorators(maybeDecorators,classNode,exportNode){if(maybeDecorators){var _classNode$decorators;if((_classNode$decorators=classNode.decorators)!=null&&_classNode$decorators.length){if(typeof this.getPluginOption(\"decorators\",\"decoratorsBeforeExport\")!==\"boolean\"){this.raise(Errors.DecoratorsBeforeAfterExport,classNode.decorators[0]);}classNode.decorators.unshift(...maybeDecorators);}else{classNode.decorators=maybeDecorators;}this.resetStartLocationFromNode(classNode,maybeDecorators[0]);if(exportNode)this.resetStartLocationFromNode(exportNode,classNode);}return classNode;}canHaveLeadingDecorator(){return this.match(80);}parseDecorators(allowExport){const decorators=[];do{decorators.push(this.parseDecorator());}while(this.match(26));if(this.match(82)){if(!allowExport){this.unexpected();}if(!this.decoratorsEnabledBeforeExport()){this.raise(Errors.DecoratorExportClass,this.state.startLoc);}}else if(!this.canHaveLeadingDecorator()){throw this.raise(Errors.UnexpectedLeadingDecorator,this.state.startLoc);}return decorators;}parseDecorator(){this.expectOnePlugin([\"decorators\",\"decorators-legacy\"]);const node=this.startNode();this.next();if(this.hasPlugin(\"decorators\")){const startLoc=this.state.startLoc;let expr;if(this.match(10)){const startLoc=this.state.startLoc;this.next();expr=this.parseExpression();this.expect(11);expr=this.wrapParenthesis(startLoc,expr);const paramsStartLoc=this.state.startLoc;node.expression=this.parseMaybeDecoratorArguments(expr,startLoc);if(this.getPluginOption(\"decorators\",\"allowCallParenthesized\")===false&&node.expression!==expr){this.raise(Errors.DecoratorArgumentsOutsideParentheses,paramsStartLoc);}}else{expr=this.parseIdentifier(false);while(this.eat(16)){const node=this.startNodeAt(startLoc);node.object=expr;if(this.match(139)){this.classScope.usePrivateName(this.state.value,this.state.startLoc);node.property=this.parsePrivateName();}else{node.property=this.parseIdentifier(true);}node.computed=false;expr=this.finishNode(node,\"MemberExpression\");}node.expression=this.parseMaybeDecoratorArguments(expr,startLoc);}}else{node.expression=this.parseExprSubscripts();}return this.finishNode(node,\"Decorator\");}parseMaybeDecoratorArguments(expr,startLoc){if(this.eat(10)){const node=this.startNodeAt(startLoc);node.callee=expr;node.arguments=this.parseCallExpressionArguments(11);this.toReferencedList(node.arguments);return this.finishNode(node,\"CallExpression\");}return expr;}parseBreakContinueStatement(node,isBreak){this.next();if(this.isLineTerminator()){node.label=null;}else{node.label=this.parseIdentifier();this.semicolon();}this.verifyBreakContinue(node,isBreak);return this.finishNode(node,isBreak?\"BreakStatement\":\"ContinueStatement\");}verifyBreakContinue(node,isBreak){let i;for(i=0;i<this.state.labels.length;++i){const lab=this.state.labels[i];if(node.label==null||lab.name===node.label.name){if(lab.kind!=null&&(isBreak||lab.kind===1)){break;}if(node.label&&isBreak)break;}}if(i===this.state.labels.length){const type=isBreak?\"BreakStatement\":\"ContinueStatement\";this.raise(Errors.IllegalBreakContinue,node,{type});}}parseDebuggerStatement(node){this.next();this.semicolon();return this.finishNode(node,\"DebuggerStatement\");}parseHeaderExpression(){this.expect(10);const val=this.parseExpression();this.expect(11);return val;}parseDoWhileStatement(node){this.next();this.state.labels.push(loopLabel);node.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement());this.state.labels.pop();this.expect(92);node.test=this.parseHeaderExpression();this.eat(13);return this.finishNode(node,\"DoWhileStatement\");}parseForStatement(node){this.next();this.state.labels.push(loopLabel);let awaitAt=null;if(this.isContextual(96)&&this.recordAwaitIfAllowed()){awaitAt=this.state.startLoc;this.next();}this.scope.enter(0);this.expect(10);if(this.match(13)){if(awaitAt!==null){this.unexpected(awaitAt);}return this.parseFor(node,null);}const startsWithLet=this.isContextual(100);{const startsWithAwaitUsing=this.isContextual(96)&&this.startsAwaitUsing();const starsWithUsingDeclaration=startsWithAwaitUsing||this.isContextual(107)&&this.allowsForUsing();const isLetOrUsing=startsWithLet&&this.hasFollowingBindingAtom()||starsWithUsingDeclaration;if(this.match(74)||this.match(75)||isLetOrUsing){const initNode=this.startNode();let kind;if(startsWithAwaitUsing){kind=\"await using\";if(!this.recordAwaitIfAllowed()){this.raise(Errors.AwaitUsingNotInAsyncContext,this.state.startLoc);}this.next();}else{kind=this.state.value;}this.next();this.parseVar(initNode,true,kind);const init=this.finishNode(initNode,\"VariableDeclaration\");const isForIn=this.match(58);if(isForIn&&starsWithUsingDeclaration){this.raise(Errors.ForInUsing,init);}if((isForIn||this.isContextual(102))&&init.declarations.length===1){return this.parseForIn(node,init,awaitAt);}if(awaitAt!==null){this.unexpected(awaitAt);}return this.parseFor(node,init);}}const startsWithAsync=this.isContextual(95);const refExpressionErrors=new ExpressionErrors();const init=this.parseExpression(true,refExpressionErrors);const isForOf=this.isContextual(102);if(isForOf){if(startsWithLet){this.raise(Errors.ForOfLet,init);}if(awaitAt===null&&startsWithAsync&&init.type===\"Identifier\"){this.raise(Errors.ForOfAsync,init);}}if(isForOf||this.match(58)){this.checkDestructuringPrivate(refExpressionErrors);this.toAssignable(init,true);const type=isForOf?\"ForOfStatement\":\"ForInStatement\";this.checkLVal(init,{type});return this.parseForIn(node,init,awaitAt);}else{this.checkExpressionErrors(refExpressionErrors,true);}if(awaitAt!==null){this.unexpected(awaitAt);}return this.parseFor(node,init);}parseFunctionStatement(node,isAsync,isHangingDeclaration){this.next();return this.parseFunction(node,1|(isHangingDeclaration?2:0)|(isAsync?8:0));}parseIfStatement(node){this.next();node.test=this.parseHeaderExpression();node.consequent=this.parseStatementOrSloppyAnnexBFunctionDeclaration();node.alternate=this.eat(66)?this.parseStatementOrSloppyAnnexBFunctionDeclaration():null;return this.finishNode(node,\"IfStatement\");}parseReturnStatement(node){if(!this.prodParam.hasReturn&&!(this.optionFlags&2)){this.raise(Errors.IllegalReturn,this.state.startLoc);}this.next();if(this.isLineTerminator()){node.argument=null;}else{node.argument=this.parseExpression();this.semicolon();}return this.finishNode(node,\"ReturnStatement\");}parseSwitchStatement(node){this.next();node.discriminant=this.parseHeaderExpression();const cases=node.cases=[];this.expect(5);this.state.labels.push(switchLabel);this.scope.enter(0);let cur;for(let sawDefault;!this.match(8);){if(this.match(61)||this.match(65)){const isCase=this.match(61);if(cur)this.finishNode(cur,\"SwitchCase\");cases.push(cur=this.startNode());cur.consequent=[];this.next();if(isCase){cur.test=this.parseExpression();}else{if(sawDefault){this.raise(Errors.MultipleDefaultsInSwitch,this.state.lastTokStartLoc);}sawDefault=true;cur.test=null;}this.expect(14);}else{if(cur){cur.consequent.push(this.parseStatementListItem());}else{this.unexpected();}}}this.scope.exit();if(cur)this.finishNode(cur,\"SwitchCase\");this.next();this.state.labels.pop();return this.finishNode(node,\"SwitchStatement\");}parseThrowStatement(node){this.next();if(this.hasPrecedingLineBreak()){this.raise(Errors.NewlineAfterThrow,this.state.lastTokEndLoc);}node.argument=this.parseExpression();this.semicolon();return this.finishNode(node,\"ThrowStatement\");}parseCatchClauseParam(){const param=this.parseBindingAtom();this.scope.enter(this.options.annexB&&param.type===\"Identifier\"?8:0);this.checkLVal(param,{type:\"CatchClause\"},9);return param;}parseTryStatement(node){this.next();node.block=this.parseBlock();node.handler=null;if(this.match(62)){const clause=this.startNode();this.next();if(this.match(10)){this.expect(10);clause.param=this.parseCatchClauseParam();this.expect(11);}else{clause.param=null;this.scope.enter(0);}clause.body=this.withSmartMixTopicForbiddingContext(()=>this.parseBlock(false,false));this.scope.exit();node.handler=this.finishNode(clause,\"CatchClause\");}node.finalizer=this.eat(67)?this.parseBlock():null;if(!node.handler&&!node.finalizer){this.raise(Errors.NoCatchOrFinally,node);}return this.finishNode(node,\"TryStatement\");}parseVarStatement(node,kind,allowMissingInitializer=false){this.next();this.parseVar(node,false,kind,allowMissingInitializer);this.semicolon();return this.finishNode(node,\"VariableDeclaration\");}parseWhileStatement(node){this.next();node.test=this.parseHeaderExpression();this.state.labels.push(loopLabel);node.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement());this.state.labels.pop();return this.finishNode(node,\"WhileStatement\");}parseWithStatement(node){if(this.state.strict){this.raise(Errors.StrictWith,this.state.startLoc);}this.next();node.object=this.parseHeaderExpression();node.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement());return this.finishNode(node,\"WithStatement\");}parseEmptyStatement(node){this.next();return this.finishNode(node,\"EmptyStatement\");}parseLabeledStatement(node,maybeName,expr,flags){for(const label of this.state.labels){if(label.name===maybeName){this.raise(Errors.LabelRedeclaration,expr,{labelName:maybeName});}}const kind=tokenIsLoop(this.state.type)?1:this.match(71)?2:null;for(let i=this.state.labels.length-1;i>=0;i--){const label=this.state.labels[i];if(label.statementStart===node.start){label.statementStart=this.sourceToOffsetPos(this.state.start);label.kind=kind;}else{break;}}this.state.labels.push({name:maybeName,kind:kind,statementStart:this.sourceToOffsetPos(this.state.start)});node.body=flags&8?this.parseStatementOrSloppyAnnexBFunctionDeclaration(true):this.parseStatement();this.state.labels.pop();node.label=expr;return this.finishNode(node,\"LabeledStatement\");}parseExpressionStatement(node,expr,decorators){node.expression=expr;this.semicolon();return this.finishNode(node,\"ExpressionStatement\");}parseBlock(allowDirectives=false,createNewLexicalScope=true,afterBlockParse){const node=this.startNode();if(allowDirectives){this.state.strictErrors.clear();}this.expect(5);if(createNewLexicalScope){this.scope.enter(0);}this.parseBlockBody(node,allowDirectives,false,8,afterBlockParse);if(createNewLexicalScope){this.scope.exit();}return this.finishNode(node,\"BlockStatement\");}isValidDirective(stmt){return stmt.type===\"ExpressionStatement\"&&stmt.expression.type===\"StringLiteral\"&&!stmt.expression.extra.parenthesized;}parseBlockBody(node,allowDirectives,topLevel,end,afterBlockParse){const body=node.body=[];const directives=node.directives=[];this.parseBlockOrModuleBlockBody(body,allowDirectives?directives:undefined,topLevel,end,afterBlockParse);}parseBlockOrModuleBlockBody(body,directives,topLevel,end,afterBlockParse){const oldStrict=this.state.strict;let hasStrictModeDirective=false;let parsedNonDirective=false;while(!this.match(end)){const stmt=topLevel?this.parseModuleItem():this.parseStatementListItem();if(directives&&!parsedNonDirective){if(this.isValidDirective(stmt)){const directive=this.stmtToDirective(stmt);directives.push(directive);if(!hasStrictModeDirective&&directive.value.value===\"use strict\"){hasStrictModeDirective=true;this.setStrict(true);}continue;}parsedNonDirective=true;this.state.strictErrors.clear();}body.push(stmt);}afterBlockParse==null||afterBlockParse.call(this,hasStrictModeDirective);if(!oldStrict){this.setStrict(false);}this.next();}parseFor(node,init){node.init=init;this.semicolon(false);node.test=this.match(13)?null:this.parseExpression();this.semicolon(false);node.update=this.match(11)?null:this.parseExpression();this.expect(11);node.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement());this.scope.exit();this.state.labels.pop();return this.finishNode(node,\"ForStatement\");}parseForIn(node,init,awaitAt){const isForIn=this.match(58);this.next();if(isForIn){if(awaitAt!==null)this.unexpected(awaitAt);}else{node.await=awaitAt!==null;}if(init.type===\"VariableDeclaration\"&&init.declarations[0].init!=null&&(!isForIn||!this.options.annexB||this.state.strict||init.kind!==\"var\"||init.declarations[0].id.type!==\"Identifier\")){this.raise(Errors.ForInOfLoopInitializer,init,{type:isForIn?\"ForInStatement\":\"ForOfStatement\"});}if(init.type===\"AssignmentPattern\"){this.raise(Errors.InvalidLhs,init,{ancestor:{type:\"ForStatement\"}});}node.left=init;node.right=isForIn?this.parseExpression():this.parseMaybeAssignAllowIn();this.expect(11);node.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement());this.scope.exit();this.state.labels.pop();return this.finishNode(node,isForIn?\"ForInStatement\":\"ForOfStatement\");}parseVar(node,isFor,kind,allowMissingInitializer=false){const declarations=node.declarations=[];node.kind=kind;for(;;){const decl=this.startNode();this.parseVarId(decl,kind);decl.init=!this.eat(29)?null:isFor?this.parseMaybeAssignDisallowIn():this.parseMaybeAssignAllowIn();if(decl.init===null&&!allowMissingInitializer){if(decl.id.type!==\"Identifier\"&&!(isFor&&(this.match(58)||this.isContextual(102)))){this.raise(Errors.DeclarationMissingInitializer,this.state.lastTokEndLoc,{kind:\"destructuring\"});}else if((kind===\"const\"||kind===\"using\"||kind===\"await using\")&&!(this.match(58)||this.isContextual(102))){this.raise(Errors.DeclarationMissingInitializer,this.state.lastTokEndLoc,{kind});}}declarations.push(this.finishNode(decl,\"VariableDeclarator\"));if(!this.eat(12))break;}return node;}parseVarId(decl,kind){const id=this.parseBindingAtom();if(kind===\"using\"||kind===\"await using\"){if(id.type===\"ArrayPattern\"||id.type===\"ObjectPattern\"){this.raise(Errors.UsingDeclarationHasBindingPattern,id.loc.start);}}this.checkLVal(id,{type:\"VariableDeclarator\"},kind===\"var\"?5:8201);decl.id=id;}parseAsyncFunctionExpression(node){return this.parseFunction(node,8);}parseFunction(node,flags=0){const hangingDeclaration=flags&2;const isDeclaration=!!(flags&1);const requireId=isDeclaration&&!(flags&4);const isAsync=!!(flags&8);this.initFunction(node,isAsync);if(this.match(55)){if(hangingDeclaration){this.raise(Errors.GeneratorInSingleStatementContext,this.state.startLoc);}this.next();node.generator=true;}if(isDeclaration){node.id=this.parseFunctionId(requireId);}const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;this.state.maybeInArrowParameters=false;this.scope.enter(2);this.prodParam.enter(functionFlags(isAsync,node.generator));if(!isDeclaration){node.id=this.parseFunctionId();}this.parseFunctionParams(node,false);this.withSmartMixTopicForbiddingContext(()=>{this.parseFunctionBodyAndFinish(node,isDeclaration?\"FunctionDeclaration\":\"FunctionExpression\");});this.prodParam.exit();this.scope.exit();if(isDeclaration&&!hangingDeclaration){this.registerFunctionStatementId(node);}this.state.maybeInArrowParameters=oldMaybeInArrowParameters;return node;}parseFunctionId(requireId){return requireId||tokenIsIdentifier(this.state.type)?this.parseIdentifier():null;}parseFunctionParams(node,isConstructor){this.expect(10);this.expressionScope.enter(newParameterDeclarationScope());node.params=this.parseBindingList(11,41,2|(isConstructor?4:0));this.expressionScope.exit();}registerFunctionStatementId(node){if(!node.id)return;this.scope.declareName(node.id.name,!this.options.annexB||this.state.strict||node.generator||node.async?this.scope.treatFunctionsAsVar?5:8201:17,node.id.loc.start);}parseClass(node,isStatement,optionalId){this.next();const oldStrict=this.state.strict;this.state.strict=true;this.parseClassId(node,isStatement,optionalId);this.parseClassSuper(node);node.body=this.parseClassBody(!!node.superClass,oldStrict);return this.finishNode(node,isStatement?\"ClassDeclaration\":\"ClassExpression\");}isClassProperty(){return this.match(29)||this.match(13)||this.match(8);}isClassMethod(){return this.match(10);}nameIsConstructor(key){return key.type===\"Identifier\"&&key.name===\"constructor\"||key.type===\"StringLiteral\"&&key.value===\"constructor\";}isNonstaticConstructor(method){return!method.computed&&!method.static&&this.nameIsConstructor(method.key);}parseClassBody(hadSuperClass,oldStrict){this.classScope.enter();const state={hadConstructor:false,hadSuperClass};let decorators=[];const classBody=this.startNode();classBody.body=[];this.expect(5);this.withSmartMixTopicForbiddingContext(()=>{while(!this.match(8)){if(this.eat(13)){if(decorators.length>0){throw this.raise(Errors.DecoratorSemicolon,this.state.lastTokEndLoc);}continue;}if(this.match(26)){decorators.push(this.parseDecorator());continue;}const member=this.startNode();if(decorators.length){member.decorators=decorators;this.resetStartLocationFromNode(member,decorators[0]);decorators=[];}this.parseClassMember(classBody,member,state);if(member.kind===\"constructor\"&&member.decorators&&member.decorators.length>0){this.raise(Errors.DecoratorConstructor,member);}}});this.state.strict=oldStrict;this.next();if(decorators.length){throw this.raise(Errors.TrailingDecorator,this.state.startLoc);}this.classScope.exit();return this.finishNode(classBody,\"ClassBody\");}parseClassMemberFromModifier(classBody,member){const key=this.parseIdentifier(true);if(this.isClassMethod()){const method=member;method.kind=\"method\";method.computed=false;method.key=key;method.static=false;this.pushClassMethod(classBody,method,false,false,false,false);return true;}else if(this.isClassProperty()){const prop=member;prop.computed=false;prop.key=key;prop.static=false;classBody.body.push(this.parseClassProperty(prop));return true;}this.resetPreviousNodeTrailingComments(key);return false;}parseClassMember(classBody,member,state){const isStatic=this.isContextual(106);if(isStatic){if(this.parseClassMemberFromModifier(classBody,member)){return;}if(this.eat(5)){this.parseClassStaticBlock(classBody,member);return;}}this.parseClassMemberWithIsStatic(classBody,member,state,isStatic);}parseClassMemberWithIsStatic(classBody,member,state,isStatic){const publicMethod=member;const privateMethod=member;const publicProp=member;const privateProp=member;const accessorProp=member;const method=publicMethod;const publicMember=publicMethod;member.static=isStatic;this.parsePropertyNamePrefixOperator(member);if(this.eat(55)){method.kind=\"method\";const isPrivateName=this.match(139);this.parseClassElementName(method);if(isPrivateName){this.pushClassPrivateMethod(classBody,privateMethod,true,false);return;}if(this.isNonstaticConstructor(publicMethod)){this.raise(Errors.ConstructorIsGenerator,publicMethod.key);}this.pushClassMethod(classBody,publicMethod,true,false,false,false);return;}const isContextual=!this.state.containsEsc&&tokenIsIdentifier(this.state.type);const key=this.parseClassElementName(member);const maybeContextualKw=isContextual?key.name:null;const isPrivate=this.isPrivateName(key);const maybeQuestionTokenStartLoc=this.state.startLoc;this.parsePostMemberNameModifiers(publicMember);if(this.isClassMethod()){method.kind=\"method\";if(isPrivate){this.pushClassPrivateMethod(classBody,privateMethod,false,false);return;}const isConstructor=this.isNonstaticConstructor(publicMethod);let allowsDirectSuper=false;if(isConstructor){publicMethod.kind=\"constructor\";if(state.hadConstructor&&!this.hasPlugin(\"typescript\")){this.raise(Errors.DuplicateConstructor,key);}if(isConstructor&&this.hasPlugin(\"typescript\")&&member.override){this.raise(Errors.OverrideOnConstructor,key);}state.hadConstructor=true;allowsDirectSuper=state.hadSuperClass;}this.pushClassMethod(classBody,publicMethod,false,false,isConstructor,allowsDirectSuper);}else if(this.isClassProperty()){if(isPrivate){this.pushClassPrivateProperty(classBody,privateProp);}else{this.pushClassProperty(classBody,publicProp);}}else if(maybeContextualKw===\"async\"&&!this.isLineTerminator()){this.resetPreviousNodeTrailingComments(key);const isGenerator=this.eat(55);if(publicMember.optional){this.unexpected(maybeQuestionTokenStartLoc);}method.kind=\"method\";const isPrivate=this.match(139);this.parseClassElementName(method);this.parsePostMemberNameModifiers(publicMember);if(isPrivate){this.pushClassPrivateMethod(classBody,privateMethod,isGenerator,true);}else{if(this.isNonstaticConstructor(publicMethod)){this.raise(Errors.ConstructorIsAsync,publicMethod.key);}this.pushClassMethod(classBody,publicMethod,isGenerator,true,false,false);}}else if((maybeContextualKw===\"get\"||maybeContextualKw===\"set\")&&!(this.match(55)&&this.isLineTerminator())){this.resetPreviousNodeTrailingComments(key);method.kind=maybeContextualKw;const isPrivate=this.match(139);this.parseClassElementName(publicMethod);if(isPrivate){this.pushClassPrivateMethod(classBody,privateMethod,false,false);}else{if(this.isNonstaticConstructor(publicMethod)){this.raise(Errors.ConstructorIsAccessor,publicMethod.key);}this.pushClassMethod(classBody,publicMethod,false,false,false,false);}this.checkGetterSetterParams(publicMethod);}else if(maybeContextualKw===\"accessor\"&&!this.isLineTerminator()){this.expectPlugin(\"decoratorAutoAccessors\");this.resetPreviousNodeTrailingComments(key);const isPrivate=this.match(139);this.parseClassElementName(publicProp);this.pushClassAccessorProperty(classBody,accessorProp,isPrivate);}else if(this.isLineTerminator()){if(isPrivate){this.pushClassPrivateProperty(classBody,privateProp);}else{this.pushClassProperty(classBody,publicProp);}}else{this.unexpected();}}parseClassElementName(member){const{type,value}=this.state;if((type===132||type===134)&&member.static&&value===\"prototype\"){this.raise(Errors.StaticPrototype,this.state.startLoc);}if(type===139){if(value===\"constructor\"){this.raise(Errors.ConstructorClassPrivateField,this.state.startLoc);}const key=this.parsePrivateName();member.key=key;return key;}this.parsePropertyName(member);return member.key;}parseClassStaticBlock(classBody,member){var _member$decorators;this.scope.enter(64|128|16);const oldLabels=this.state.labels;this.state.labels=[];this.prodParam.enter(0);const body=member.body=[];this.parseBlockOrModuleBlockBody(body,undefined,false,8);this.prodParam.exit();this.scope.exit();this.state.labels=oldLabels;classBody.body.push(this.finishNode(member,\"StaticBlock\"));if((_member$decorators=member.decorators)!=null&&_member$decorators.length){this.raise(Errors.DecoratorStaticBlock,member);}}pushClassProperty(classBody,prop){if(!prop.computed&&this.nameIsConstructor(prop.key)){this.raise(Errors.ConstructorClassField,prop.key);}classBody.body.push(this.parseClassProperty(prop));}pushClassPrivateProperty(classBody,prop){const node=this.parseClassPrivateProperty(prop);classBody.body.push(node);this.classScope.declarePrivateName(this.getPrivateNameSV(node.key),0,node.key.loc.start);}pushClassAccessorProperty(classBody,prop,isPrivate){if(!isPrivate&&!prop.computed&&this.nameIsConstructor(prop.key)){this.raise(Errors.ConstructorClassField,prop.key);}const node=this.parseClassAccessorProperty(prop);classBody.body.push(node);if(isPrivate){this.classScope.declarePrivateName(this.getPrivateNameSV(node.key),0,node.key.loc.start);}}pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper){classBody.body.push(this.parseMethod(method,isGenerator,isAsync,isConstructor,allowsDirectSuper,\"ClassMethod\",true));}pushClassPrivateMethod(classBody,method,isGenerator,isAsync){const node=this.parseMethod(method,isGenerator,isAsync,false,false,\"ClassPrivateMethod\",true);classBody.body.push(node);const kind=node.kind===\"get\"?node.static?6:2:node.kind===\"set\"?node.static?5:1:0;this.declareClassPrivateMethodInScope(node,kind);}declareClassPrivateMethodInScope(node,kind){this.classScope.declarePrivateName(this.getPrivateNameSV(node.key),kind,node.key.loc.start);}parsePostMemberNameModifiers(methodOrProp){}parseClassPrivateProperty(node){this.parseInitializer(node);this.semicolon();return this.finishNode(node,\"ClassPrivateProperty\");}parseClassProperty(node){this.parseInitializer(node);this.semicolon();return this.finishNode(node,\"ClassProperty\");}parseClassAccessorProperty(node){this.parseInitializer(node);this.semicolon();return this.finishNode(node,\"ClassAccessorProperty\");}parseInitializer(node){this.scope.enter(64|16);this.expressionScope.enter(newExpressionScope());this.prodParam.enter(0);node.value=this.eat(29)?this.parseMaybeAssignAllowIn():null;this.expressionScope.exit();this.prodParam.exit();this.scope.exit();}parseClassId(node,isStatement,optionalId,bindingType=8331){if(tokenIsIdentifier(this.state.type)){node.id=this.parseIdentifier();if(isStatement){this.declareNameFromIdentifier(node.id,bindingType);}}else{if(optionalId||!isStatement){node.id=null;}else{throw this.raise(Errors.MissingClassName,this.state.startLoc);}}}parseClassSuper(node){node.superClass=this.eat(81)?this.parseExprSubscripts():null;}parseExport(node,decorators){const maybeDefaultIdentifier=this.parseMaybeImportPhase(node,true);const hasDefault=this.maybeParseExportDefaultSpecifier(node,maybeDefaultIdentifier);const parseAfterDefault=!hasDefault||this.eat(12);const hasStar=parseAfterDefault&&this.eatExportStar(node);const hasNamespace=hasStar&&this.maybeParseExportNamespaceSpecifier(node);const parseAfterNamespace=parseAfterDefault&&(!hasNamespace||this.eat(12));const isFromRequired=hasDefault||hasStar;if(hasStar&&!hasNamespace){if(hasDefault)this.unexpected();if(decorators){throw this.raise(Errors.UnsupportedDecoratorExport,node);}this.parseExportFrom(node,true);this.sawUnambiguousESM=true;return this.finishNode(node,\"ExportAllDeclaration\");}const hasSpecifiers=this.maybeParseExportNamedSpecifiers(node);if(hasDefault&&parseAfterDefault&&!hasStar&&!hasSpecifiers){this.unexpected(null,5);}if(hasNamespace&&parseAfterNamespace){this.unexpected(null,98);}let hasDeclaration;if(isFromRequired||hasSpecifiers){hasDeclaration=false;if(decorators){throw this.raise(Errors.UnsupportedDecoratorExport,node);}this.parseExportFrom(node,isFromRequired);}else{hasDeclaration=this.maybeParseExportDeclaration(node);}if(isFromRequired||hasSpecifiers||hasDeclaration){var _node2$declaration;const node2=node;this.checkExport(node2,true,false,!!node2.source);if(((_node2$declaration=node2.declaration)==null?void 0:_node2$declaration.type)===\"ClassDeclaration\"){this.maybeTakeDecorators(decorators,node2.declaration,node2);}else if(decorators){throw this.raise(Errors.UnsupportedDecoratorExport,node);}this.sawUnambiguousESM=true;return this.finishNode(node2,\"ExportNamedDeclaration\");}if(this.eat(65)){const node2=node;const decl=this.parseExportDefaultExpression();node2.declaration=decl;if(decl.type===\"ClassDeclaration\"){this.maybeTakeDecorators(decorators,decl,node2);}else if(decorators){throw this.raise(Errors.UnsupportedDecoratorExport,node);}this.checkExport(node2,true,true);this.sawUnambiguousESM=true;return this.finishNode(node2,\"ExportDefaultDeclaration\");}this.unexpected(null,5);}eatExportStar(node){return this.eat(55);}maybeParseExportDefaultSpecifier(node,maybeDefaultIdentifier){if(maybeDefaultIdentifier||this.isExportDefaultSpecifier()){this.expectPlugin(\"exportDefaultFrom\",maybeDefaultIdentifier==null?void 0:maybeDefaultIdentifier.loc.start);const id=maybeDefaultIdentifier||this.parseIdentifier(true);const specifier=this.startNodeAtNode(id);specifier.exported=id;node.specifiers=[this.finishNode(specifier,\"ExportDefaultSpecifier\")];return true;}return false;}maybeParseExportNamespaceSpecifier(node){if(this.isContextual(93)){var _ref,_ref$specifiers;(_ref$specifiers=(_ref=node).specifiers)!=null?_ref$specifiers:_ref.specifiers=[];const specifier=this.startNodeAt(this.state.lastTokStartLoc);this.next();specifier.exported=this.parseModuleExportName();node.specifiers.push(this.finishNode(specifier,\"ExportNamespaceSpecifier\"));return true;}return false;}maybeParseExportNamedSpecifiers(node){if(this.match(5)){const node2=node;if(!node2.specifiers)node2.specifiers=[];const isTypeExport=node2.exportKind===\"type\";node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));node2.source=null;if(this.hasPlugin(\"importAssertions\")){node2.assertions=[];}else{node2.attributes=[];}node2.declaration=null;return true;}return false;}maybeParseExportDeclaration(node){if(this.shouldParseExportDeclaration()){node.specifiers=[];node.source=null;if(this.hasPlugin(\"importAssertions\")){node.assertions=[];}else{node.attributes=[];}node.declaration=this.parseExportDeclaration(node);return true;}return false;}isAsyncFunction(){if(!this.isContextual(95))return false;const next=this.nextTokenInLineStart();return this.isUnparsedContextual(next,\"function\");}parseExportDefaultExpression(){const expr=this.startNode();if(this.match(68)){this.next();return this.parseFunction(expr,1|4);}else if(this.isAsyncFunction()){this.next();this.next();return this.parseFunction(expr,1|4|8);}if(this.match(80)){return this.parseClass(expr,true,true);}if(this.match(26)){if(this.hasPlugin(\"decorators\")&&this.getPluginOption(\"decorators\",\"decoratorsBeforeExport\")===true){this.raise(Errors.DecoratorBeforeExport,this.state.startLoc);}return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false),this.startNode()),true,true);}if(this.match(75)||this.match(74)||this.isLet()){throw this.raise(Errors.UnsupportedDefaultExport,this.state.startLoc);}const res=this.parseMaybeAssignAllowIn();this.semicolon();return res;}parseExportDeclaration(node){if(this.match(80)){const node=this.parseClass(this.startNode(),true,false);return node;}return this.parseStatementListItem();}isExportDefaultSpecifier(){const{type}=this.state;if(tokenIsIdentifier(type)){if(type===95&&!this.state.containsEsc||type===100){return false;}if((type===130||type===129)&&!this.state.containsEsc){const{type:nextType}=this.lookahead();if(tokenIsIdentifier(nextType)&&nextType!==98||nextType===5){this.expectOnePlugin([\"flow\",\"typescript\"]);return false;}}}else if(!this.match(65)){return false;}const next=this.nextTokenStart();const hasFrom=this.isUnparsedContextual(next,\"from\");if(this.input.charCodeAt(next)===44||tokenIsIdentifier(this.state.type)&&hasFrom){return true;}if(this.match(65)&&hasFrom){const nextAfterFrom=this.input.charCodeAt(this.nextTokenStartSince(next+4));return nextAfterFrom===34||nextAfterFrom===39;}return false;}parseExportFrom(node,expect){if(this.eatContextual(98)){node.source=this.parseImportSource();this.checkExport(node);this.maybeParseImportAttributes(node);this.checkJSONModuleImport(node);}else if(expect){this.unexpected();}this.semicolon();}shouldParseExportDeclaration(){const{type}=this.state;if(type===26){this.expectOnePlugin([\"decorators\",\"decorators-legacy\"]);if(this.hasPlugin(\"decorators\")){if(this.getPluginOption(\"decorators\",\"decoratorsBeforeExport\")===true){this.raise(Errors.DecoratorBeforeExport,this.state.startLoc);}return true;}}if(this.isContextual(107)){this.raise(Errors.UsingDeclarationExport,this.state.startLoc);return true;}if(this.isContextual(96)&&this.startsAwaitUsing()){this.raise(Errors.UsingDeclarationExport,this.state.startLoc);return true;}return type===74||type===75||type===68||type===80||this.isLet()||this.isAsyncFunction();}checkExport(node,checkNames,isDefault,isFrom){if(checkNames){var _node$specifiers;if(isDefault){this.checkDuplicateExports(node,\"default\");if(this.hasPlugin(\"exportDefaultFrom\")){var _declaration$extra;const declaration=node.declaration;if(declaration.type===\"Identifier\"&&declaration.name===\"from\"&&declaration.end-declaration.start===4&&!((_declaration$extra=declaration.extra)!=null&&_declaration$extra.parenthesized)){this.raise(Errors.ExportDefaultFromAsIdentifier,declaration);}}}else if((_node$specifiers=node.specifiers)!=null&&_node$specifiers.length){for(const specifier of node.specifiers){const{exported}=specifier;const exportName=exported.type===\"Identifier\"?exported.name:exported.value;this.checkDuplicateExports(specifier,exportName);if(!isFrom&&specifier.local){const{local}=specifier;if(local.type!==\"Identifier\"){this.raise(Errors.ExportBindingIsString,specifier,{localName:local.value,exportName});}else{this.checkReservedWord(local.name,local.loc.start,true,false);this.scope.checkLocalExport(local);}}}}else if(node.declaration){const decl=node.declaration;if(decl.type===\"FunctionDeclaration\"||decl.type===\"ClassDeclaration\"){const{id}=decl;if(!id)throw new Error(\"Assertion failure\");this.checkDuplicateExports(node,id.name);}else if(decl.type===\"VariableDeclaration\"){for(const declaration of decl.declarations){this.checkDeclaration(declaration.id);}}}}}checkDeclaration(node){if(node.type===\"Identifier\"){this.checkDuplicateExports(node,node.name);}else if(node.type===\"ObjectPattern\"){for(const prop of node.properties){this.checkDeclaration(prop);}}else if(node.type===\"ArrayPattern\"){for(const elem of node.elements){if(elem){this.checkDeclaration(elem);}}}else if(node.type===\"ObjectProperty\"){this.checkDeclaration(node.value);}else if(node.type===\"RestElement\"){this.checkDeclaration(node.argument);}else if(node.type===\"AssignmentPattern\"){this.checkDeclaration(node.left);}}checkDuplicateExports(node,exportName){if(this.exportedIdentifiers.has(exportName)){if(exportName===\"default\"){this.raise(Errors.DuplicateDefaultExport,node);}else{this.raise(Errors.DuplicateExport,node,{exportName});}}this.exportedIdentifiers.add(exportName);}parseExportSpecifiers(isInTypeExport){const nodes=[];let first=true;this.expect(5);while(!this.eat(8)){if(first){first=false;}else{this.expect(12);if(this.eat(8))break;}const isMaybeTypeOnly=this.isContextual(130);const isString=this.match(134);const node=this.startNode();node.local=this.parseModuleExportName();nodes.push(this.parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly));}return nodes;}parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly){if(this.eatContextual(93)){node.exported=this.parseModuleExportName();}else if(isString){node.exported=this.cloneStringLiteral(node.local);}else if(!node.exported){node.exported=this.cloneIdentifier(node.local);}return this.finishNode(node,\"ExportSpecifier\");}parseModuleExportName(){if(this.match(134)){const result=this.parseStringLiteral(this.state.value);const surrogate=loneSurrogate.exec(result.value);if(surrogate){this.raise(Errors.ModuleExportNameHasLoneSurrogate,result,{surrogateCharCode:surrogate[0].charCodeAt(0)});}return result;}return this.parseIdentifier(true);}isJSONModuleImport(node){if(node.assertions!=null){return node.assertions.some(({key,value})=>{return value.value===\"json\"&&(key.type===\"Identifier\"?key.name===\"type\":key.value===\"type\");});}return false;}checkImportReflection(node){const{specifiers}=node;const singleBindingType=specifiers.length===1?specifiers[0].type:null;if(node.phase===\"source\"){if(singleBindingType!==\"ImportDefaultSpecifier\"){this.raise(Errors.SourcePhaseImportRequiresDefault,specifiers[0].loc.start);}}else if(node.phase===\"defer\"){if(singleBindingType!==\"ImportNamespaceSpecifier\"){this.raise(Errors.DeferImportRequiresNamespace,specifiers[0].loc.start);}}else if(node.module){var _node$assertions;if(singleBindingType!==\"ImportDefaultSpecifier\"){this.raise(Errors.ImportReflectionNotBinding,specifiers[0].loc.start);}if(((_node$assertions=node.assertions)==null?void 0:_node$assertions.length)>0){this.raise(Errors.ImportReflectionHasAssertion,specifiers[0].loc.start);}}}checkJSONModuleImport(node){if(this.isJSONModuleImport(node)&&node.type!==\"ExportAllDeclaration\"){const{specifiers}=node;if(specifiers!=null){const nonDefaultNamedSpecifier=specifiers.find(specifier=>{let imported;if(specifier.type===\"ExportSpecifier\"){imported=specifier.local;}else if(specifier.type===\"ImportSpecifier\"){imported=specifier.imported;}if(imported!==undefined){return imported.type===\"Identifier\"?imported.name!==\"default\":imported.value!==\"default\";}});if(nonDefaultNamedSpecifier!==undefined){this.raise(Errors.ImportJSONBindingNotDefault,nonDefaultNamedSpecifier.loc.start);}}}}isPotentialImportPhase(isExport){if(isExport)return false;return this.isContextual(105)||this.isContextual(97)||this.isContextual(127);}applyImportPhase(node,isExport,phase,loc){if(isExport){return;}if(phase===\"module\"){this.expectPlugin(\"importReflection\",loc);node.module=true;}else if(this.hasPlugin(\"importReflection\")){node.module=false;}if(phase===\"source\"){this.expectPlugin(\"sourcePhaseImports\",loc);node.phase=\"source\";}else if(phase===\"defer\"){this.expectPlugin(\"deferredImportEvaluation\",loc);node.phase=\"defer\";}else if(this.hasPlugin(\"sourcePhaseImports\")){node.phase=null;}}parseMaybeImportPhase(node,isExport){if(!this.isPotentialImportPhase(isExport)){this.applyImportPhase(node,isExport,null);return null;}const phaseIdentifier=this.parseIdentifier(true);const{type}=this.state;const isImportPhase=tokenIsKeywordOrIdentifier(type)?type!==98||this.lookaheadCharCode()===102:type!==12;if(isImportPhase){this.resetPreviousIdentifierLeadingComments(phaseIdentifier);this.applyImportPhase(node,isExport,phaseIdentifier.name,phaseIdentifier.loc.start);return null;}else{this.applyImportPhase(node,isExport,null);return phaseIdentifier;}}isPrecedingIdImportPhase(phase){const{type}=this.state;return tokenIsIdentifier(type)?type!==98||this.lookaheadCharCode()===102:type!==12;}parseImport(node){if(this.match(134)){return this.parseImportSourceAndAttributes(node);}return this.parseImportSpecifiersAndAfter(node,this.parseMaybeImportPhase(node,false));}parseImportSpecifiersAndAfter(node,maybeDefaultIdentifier){node.specifiers=[];const hasDefault=this.maybeParseDefaultImportSpecifier(node,maybeDefaultIdentifier);const parseNext=!hasDefault||this.eat(12);const hasStar=parseNext&&this.maybeParseStarImportSpecifier(node);if(parseNext&&!hasStar)this.parseNamedImportSpecifiers(node);this.expectContextual(98);return this.parseImportSourceAndAttributes(node);}parseImportSourceAndAttributes(node){var _node$specifiers2;(_node$specifiers2=node.specifiers)!=null?_node$specifiers2:node.specifiers=[];node.source=this.parseImportSource();this.maybeParseImportAttributes(node);this.checkImportReflection(node);this.checkJSONModuleImport(node);this.semicolon();this.sawUnambiguousESM=true;return this.finishNode(node,\"ImportDeclaration\");}parseImportSource(){if(!this.match(134))this.unexpected();return this.parseExprAtom();}parseImportSpecifierLocal(node,specifier,type){specifier.local=this.parseIdentifier();node.specifiers.push(this.finishImportSpecifier(specifier,type));}finishImportSpecifier(specifier,type,bindingType=8201){this.checkLVal(specifier.local,{type},bindingType);return this.finishNode(specifier,type);}parseImportAttributes(){this.expect(5);const attrs=[];const attrNames=new Set();do{if(this.match(8)){break;}const node=this.startNode();const keyName=this.state.value;if(attrNames.has(keyName)){this.raise(Errors.ModuleAttributesWithDuplicateKeys,this.state.startLoc,{key:keyName});}attrNames.add(keyName);if(this.match(134)){node.key=this.parseStringLiteral(keyName);}else{node.key=this.parseIdentifier(true);}this.expect(14);if(!this.match(134)){throw this.raise(Errors.ModuleAttributeInvalidValue,this.state.startLoc);}node.value=this.parseStringLiteral(this.state.value);attrs.push(this.finishNode(node,\"ImportAttribute\"));}while(this.eat(12));this.expect(8);return attrs;}parseModuleAttributes(){const attrs=[];const attributes=new Set();do{const node=this.startNode();node.key=this.parseIdentifier(true);if(node.key.name!==\"type\"){this.raise(Errors.ModuleAttributeDifferentFromType,node.key);}if(attributes.has(node.key.name)){this.raise(Errors.ModuleAttributesWithDuplicateKeys,node.key,{key:node.key.name});}attributes.add(node.key.name);this.expect(14);if(!this.match(134)){throw this.raise(Errors.ModuleAttributeInvalidValue,this.state.startLoc);}node.value=this.parseStringLiteral(this.state.value);attrs.push(this.finishNode(node,\"ImportAttribute\"));}while(this.eat(12));return attrs;}maybeParseImportAttributes(node){let attributes;{var useWith=false;}if(this.match(76)){if(this.hasPrecedingLineBreak()&&this.lookaheadCharCode()===40){return;}this.next();if(this.hasPlugin(\"moduleAttributes\")){attributes=this.parseModuleAttributes();this.addExtra(node,\"deprecatedWithLegacySyntax\",true);}else{attributes=this.parseImportAttributes();}{useWith=true;}}else if(this.isContextual(94)&&!this.hasPrecedingLineBreak()){if(!this.hasPlugin(\"deprecatedImportAssert\")&&!this.hasPlugin(\"importAssertions\")){this.raise(Errors.ImportAttributesUseAssert,this.state.startLoc);}if(!this.hasPlugin(\"importAssertions\")){this.addExtra(node,\"deprecatedAssertSyntax\",true);}this.next();attributes=this.parseImportAttributes();}else{attributes=[];}if(!useWith&&this.hasPlugin(\"importAssertions\")){node.assertions=attributes;}else{node.attributes=attributes;}}maybeParseDefaultImportSpecifier(node,maybeDefaultIdentifier){if(maybeDefaultIdentifier){const specifier=this.startNodeAtNode(maybeDefaultIdentifier);specifier.local=maybeDefaultIdentifier;node.specifiers.push(this.finishImportSpecifier(specifier,\"ImportDefaultSpecifier\"));return true;}else if(tokenIsKeywordOrIdentifier(this.state.type)){this.parseImportSpecifierLocal(node,this.startNode(),\"ImportDefaultSpecifier\");return true;}return false;}maybeParseStarImportSpecifier(node){if(this.match(55)){const specifier=this.startNode();this.next();this.expectContextual(93);this.parseImportSpecifierLocal(node,specifier,\"ImportNamespaceSpecifier\");return true;}return false;}parseNamedImportSpecifiers(node){let first=true;this.expect(5);while(!this.eat(8)){if(first){first=false;}else{if(this.eat(14)){throw this.raise(Errors.DestructureNamedImport,this.state.startLoc);}this.expect(12);if(this.eat(8))break;}const specifier=this.startNode();const importedIsString=this.match(134);const isMaybeTypeOnly=this.isContextual(130);specifier.imported=this.parseModuleExportName();const importSpecifier=this.parseImportSpecifier(specifier,importedIsString,node.importKind===\"type\"||node.importKind===\"typeof\",isMaybeTypeOnly,undefined);node.specifiers.push(importSpecifier);}}parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,bindingType){if(this.eatContextual(93)){specifier.local=this.parseIdentifier();}else{const{imported}=specifier;if(importedIsString){throw this.raise(Errors.ImportBindingIsString,specifier,{importName:imported.value});}this.checkReservedWord(imported.name,specifier.loc.start,true,true);if(!specifier.local){specifier.local=this.cloneIdentifier(imported);}}return this.finishImportSpecifier(specifier,\"ImportSpecifier\",bindingType);}isThisParam(param){return param.type===\"Identifier\"&&param.name===\"this\";}}class Parser extends StatementParser{constructor(options,input,pluginsMap){options=getOptions(options);super(options,input);this.options=options;this.initializeScopes();this.plugins=pluginsMap;this.filename=options.sourceFilename;this.startIndex=options.startIndex;let optionFlags=0;if(options.allowAwaitOutsideFunction){optionFlags|=1;}if(options.allowReturnOutsideFunction){optionFlags|=2;}if(options.allowImportExportEverywhere){optionFlags|=8;}if(options.allowSuperOutsideMethod){optionFlags|=16;}if(options.allowUndeclaredExports){optionFlags|=64;}if(options.allowNewTargetOutsideFunction){optionFlags|=4;}if(options.allowYieldOutsideFunction){optionFlags|=32;}if(options.ranges){optionFlags|=128;}if(options.tokens){optionFlags|=256;}if(options.createImportExpressions){optionFlags|=512;}if(options.createParenthesizedExpressions){optionFlags|=1024;}if(options.errorRecovery){optionFlags|=2048;}if(options.attachComment){optionFlags|=4096;}if(options.annexB){optionFlags|=8192;}this.optionFlags=optionFlags;}getScopeHandler(){return ScopeHandler;}parse(){this.enterInitialScopes();const file=this.startNode();const program=this.startNode();this.nextToken();file.errors=null;this.parseTopLevel(file,program);file.errors=this.state.errors;file.comments.length=this.state.commentsLen;return file;}}function parse(input,options){var _options;if(((_options=options)==null?void 0:_options.sourceType)===\"unambiguous\"){options=Object.assign({},options);try{options.sourceType=\"module\";const parser=getParser(options,input);const ast=parser.parse();if(parser.sawUnambiguousESM){return ast;}if(parser.ambiguousScriptDifferentAst){try{options.sourceType=\"script\";return getParser(options,input).parse();}catch(_unused){}}else{ast.program.sourceType=\"script\";}return ast;}catch(moduleError){try{options.sourceType=\"script\";return getParser(options,input).parse();}catch(_unused2){}throw moduleError;}}else{return getParser(options,input).parse();}}function parseExpression(input,options){const parser=getParser(options,input);if(parser.options.strictMode){parser.state.strict=true;}return parser.getExpression();}function generateExportedTokenTypes(internalTokenTypes){const tokenTypes={};for(const typeName of Object.keys(internalTokenTypes)){tokenTypes[typeName]=getExportedToken(internalTokenTypes[typeName]);}return tokenTypes;}const tokTypes=generateExportedTokenTypes(tt);function getParser(options,input){let cls=Parser;const pluginsMap=new Map();if(options!=null&&options.plugins){for(const plugin of options.plugins){let name,opts;if(typeof plugin===\"string\"){name=plugin;}else{[name,opts]=plugin;}if(!pluginsMap.has(name)){pluginsMap.set(name,opts||{});}}validatePlugins(pluginsMap);cls=getParserClass(pluginsMap);}return new cls(options,input,pluginsMap);}const parserClassCache=new Map();function getParserClass(pluginsMap){const pluginList=[];for(const name of mixinPluginNames){if(pluginsMap.has(name)){pluginList.push(name);}}const key=pluginList.join(\"|\");let cls=parserClassCache.get(key);if(!cls){cls=Parser;for(const plugin of pluginList){cls=mixinPlugins[plugin](cls);}parserClassCache.set(key,cls);}return cls;}exports.parse=parse;exports.parseExpression=parseExpression;exports.tokTypes=tokTypes;","map":{"version":3,"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","code","ModuleErrors","ImportMetaOutsideModule","message","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","node","type","prefix","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeferImportRequiresNamespace","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","DynamicImportPhaseRequiresImportExpressions","phase","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","importName","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidLhsOptionalChaining","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","map","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","key","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","SourcePhaseImportRequiresDefault","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationExport","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","YieldNotInGeneratorFunction","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","Object","assign","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","defineHidden","obj","value","defineProperty","enumerable","configurable","toParseErrorConstructor","toMessage","reasonCode","syntaxPlugin","hasMissingPlugin","oldReasonCodes","AccessorCannotDeclareThisParameter","AccessorCannotHaveTypeParameters","ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference","SetAccessorCannotHaveOptionalParameter","SetAccessorCannotHaveRestParameter","SetAccessorCannotHaveReturnType","loc","details","error","SyntaxError","pos","clone","overrides","_overrides$loc","get","set","writable","ParseErrorEnum","argument","Array","isArray","parseErrorTemplates","ParseErrorConstructors","keys","template","_ref","rest","_objectWithoutPropertiesLoose","_excluded","Errors","createDefaultOptions","sourceType","sourceFilename","undefined","startIndex","startColumn","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","allowYieldOutsideFunction","plugins","strictMode","ranges","tokens","createImportExpressions","createParenthesizedExpressions","errorRecovery","attachComment","annexB","getOptions","opts","options","Error","toUnenumerable","object","toESTreeLocation","estree","superClass","ESTreeParserMixin","parse","file","optionFlags","parseRegExpLiteral","pattern","flags","regex","RegExp","_","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","estreeParseChainExpression","endLoc","chain","startNodeAtNode","expression","finishNodeAt","directiveToStmt","directive","castNodeTo","raw","extra","expressionValue","stmt","rawValue","fillOptionalPropertiesForTSESLint","cloneEstreeStringLiteral","range","cloned","create","prototype","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","parseMethod","isGenerator","isConstructor","allowDirectSuper","inClassScope","funcNode","startNode","typeParameters","resetStartLocationFromNode","valueNode","computed","shorthand","finishNode","nameIsConstructor","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseClassAccessorProperty","accessorPropertyNode","abstract","hasPlugin","parseObjectProperty","prop","startLoc","isPattern","refExpressionErrors","finishObjectProperty","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","finishCallExpression","unfinished","optional","callee","_ref2","source","arguments","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","length","_declaration$decorato","declaration","resetStartLocation","stopParseSubscript","base","optionalChainMember","parseMember","isOptionalMemberExpression","hasPropertyAsPrivateName","isObjectMethod","result","cloneIdentifier","cloneStringLiteral","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","push","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_defer","_from","_get","_let","_meta","_of","_sent","_set","_source","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","placeholder","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","i","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","Scope","names","firstLexicalName","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","add","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitialized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","getScopeHandler","shouldParseTypes","finishToken","val","addComment","comment","matches","exec","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","match","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","forEach","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","flowInTopLevelContext","cb","curContext","oldContext","flowParseTypeParameterInstantiationInExpression","reScan_lt","oldNoAnonFunctionType","noAnonFunctionType","reScan_lt_gt","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","startNodeAt","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","nodeStart","callProperties","properties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","out","isInexactToken","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","canInsertSemicolon","elementType","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","containsEsc","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","maybeInArrowParameters","nextCh","lookaheadCharCode","setOptionalParametersError","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","stack","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","includes","offsetToSourcePos","parseParenItem","newNode","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","classBody","member","parseClassMemberFromModifier","isIterator","readIterator","readWord1","fullWord","curPosition","getTokenFromCode","input","charCodeAt","finishOp","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","elements","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassMethod","allowsDirectSuper","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","isAccessor","parseFunctionParamType","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","ch","applyImportPhase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","isLookaheadContextual","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","tryParse","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","aborted","async","failState","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","sourceToOffsetPos","parseSubscripts","noCalls","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","parseSubscript","subscriptState","isLookaheadToken_lt","stop","typeArguments","parseNewCallee","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","slice","indexOf","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitialized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","jsxParseOpeningElementAfterName","nextTokenStart","afterNext","readToken_lt","readToken_gt","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","lineBreak","lineBreakG","isNewLine","hasNewLine","skipWhiteSpace","skipWhiteSpaceInLine","isWhitespace","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","chunkStart","canStartJSXElement","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","lineStart","jsxReadString","quote","startPos","codePointAtPos","codePoint","readInt","fromCodePoint","count","desc","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","replaceToken","skipSpace","prevType","splice","TypeScriptScope","tsNames","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","len","isConst","wasConst","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","sourcePos","offsetPos","pluginConfig","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","commentWS","lastElement","CommentsParser","commentsLen","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","commentEnd","containingNode","finalizeComment","trailingNode","commentStart","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","State","errors","potentialArrowAt","topicContext","maxNumOfResolvableTopics","maxTopicIndex","labels","firstInvalidTemplateEscapePos","strictErrors","tokensLength","v","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","soloAwait","inFSharpPipelineDirectBody","hasTopLevelAwait","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","firstInvalidLoc","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","strictNumericEscape","octalStr","octal","parseInt","forceLen","n","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","total","e","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","createLookaheadState","old","curr","nextTokenStartSince","lastIndex","lookaheadCharCodeSince","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","cp","trail","setStrict","toParseError","clear","skipLineComment","startSkip","spaceStart","loop","commentWhitespace","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readToken_dot","readNumber","readToken_slash","width","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","isBigInt","replace","startsWithDot","isFloat","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","isDecimal","parseFloat","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","oldClassScope","from","declarePrivateName","redefined","accessor","oldStatic","newStatic","oldKind","newKind","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","addExtra","isUnparsedContextual","nameStart","nameEnd","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","allowAsi","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","NodePrototype","__clone","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","operator","arg","checkToRestConversion","elt","toAssignableListItem","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseBindingElement","parseBindingRestProperty","parseBindingProperty","parsePropertyName","checkLVal","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidHeritageClauseType","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenOnSameLineAndCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","tsParseImportTypeOptions","qualifier","tsParseEntityName","tsParseTypeArguments","withProperty","tsParseImportTypeWithPropertyValue","parsePropertyDefinition","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedType","tsExpectThenParseType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restStartLoc","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInTopLevelContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseEnumBody","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","importNode","parseMaybeImportPhase","parseImportSpecifiersAndAfter","nodeImportEquals","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldStrict","oldInAbstractClass","maybeTakeDecorators","hasEstreePlugin","methodFn","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","_node$directive","_node$decorators","_node$optional","_node$typeAnnotation","_node$accessibility","_node$decorators2","_node$override","_node$readonly","_node$static","_node$declare","_node$returnType","_node$typeParameters","_node$optional2","_node$optional3","_node$accessibility2","_node$readonly2","_node$static2","_node$declare2","_node$definite","_node$readonly3","_node$typeAnnotation2","_node$accessibility3","_node$decorators3","_node$override2","_node$optional4","_node$id","_node$abstract","_node$declare3","_node$decorators4","_node$implements","_node$superTypeArgume","_node$typeParameters2","_node$declare4","_node$definite2","_node$const","_node$declare5","_node$computed","_node$qualifier","_node$options","_node$declare6","_node$extends","_node$declare7","_node$global","_node$const2","_node$in","_node$out","superTypeArguments","in","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","stmtPlaceholder","parseBlock","createNewLexicalScope","parseFunctionId","requireId","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","PIPELINE_PROPOSALS","TOPIC_TOKENS","validatePlugins","pluginsMap","decoratorsBeforeExport","allowCallParenthesized","_pluginsMap$get2","proposalList","p","tokenList","_pluginsMap$get","syntaxType","moduleAttributesVersionPluginOption","version","deprecatedAssertSyntax","RECORD_AND_TUPLE_SYNTAX_TYPES","missingPlugins","mixinPlugins","mixinPluginNames","ExpressionParser","checkProto","isRecord","sawProto","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","isYield","parseYield","ownExpressionErrors","parseMaybeConditional","isAmbiguousPrefixOrIdentifier","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","recordAwaitIfAllowed","parseAwait","update","isDelete","parseUpdate","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseNoCallExpr","tag","quasi","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseImportCall","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","isSource","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","substitutions","maybeAsyncOrAccessorProp","keyName","_params","parseObjectMethod","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","isAwaitAllowed","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifierOrBrace","allowsForUsing","nextCharAfterOf","startsAwaitUsing","parseModuleItem","parseStatementListItem","allowLabeledFunction","parseStatement","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","_classNode$decorators","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","maybeContextualKw","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","_ref$specifiers","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_node$specifiers","_declaration$extra","nodes","surrogate","isJSONModuleImport","singleBindingType","_node$assertions","nonDefaultNamedSpecifier","find","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers2","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginList"],"sources":["../src/util/location.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/options.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/util/whitespace.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/util/production-parameter.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/parser/util.ts","../src/parser/node.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction:\n    \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: process.env.BABEL_8_BREAKING\n    ? 'Topic references are only supported when using the `\"proposal\": \"hack\"` version of the pipeline proposal.'\n    : 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  ...(process.env.BABEL_8_BREAKING\n    ? {}\n    : {\n        // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n        // are retained for backwards compatibility\n        // with the deprecated smart-mix pipe operator proposal plugin.\n        // They are subject to removal in a future major version.\n        PipelineBodyNoArrow:\n          'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n        PipelineBodySequenceExpression:\n          \"Pipeline body may not be a comma-separated sequence expression.\",\n        PipelineHeadSequenceExpression:\n          \"Pipeline head should not be a comma-separated sequence expression.\",\n        PipelineTopicUnused:\n          \"Pipeline is in topic style but does not use topic reference.\",\n        PrimaryTopicNotAllowed:\n          \"Topic reference was used in a lexical context without topic binding.\",\n        PrimaryTopicRequiresSmartPipeline:\n          'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n      }),\n} satisfies ParseErrorTemplates;\n","import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n","import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, yield use is not allowed outside of a generator function.\n   * Set this to true to accept such code.\n   */\n\n  allowYieldOutsideFunction?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   */\n  sourceType?: \"script\" | \"module\" | \"unambiguous\";\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowYieldOutsideFunction = 1 << 5,\n  AllowUndeclaredExports = 1 << 6,\n  Ranges = 1 << 7,\n  Tokens = 1 << 8,\n  CreateImportExpressions = 1 << 9,\n  CreateParenthesizedExpressions = 1 << 10,\n  ErrorRecovery = 1 << 11,\n  AttachComment = 1 << 12,\n  AnnexB = 1 << 13,\n}\n\ntype OptionsWithDefaults = Required<Options>;\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n","import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n    estreeParseChainExpression(\n      node: N.Expression,\n      endLoc: Position,\n    ): N.EstreeChainExpression {\n      const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n      chain.expression = node;\n      return this.finishNodeAt(chain, \"ChainExpression\", endLoc);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      this.castNodeTo(expression, \"Literal\");\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = this.castNodeTo(directive, \"ExpressionStatement\");\n      stmt.expression = expression;\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    /**\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     * This hook will be implemented by the typescript plugin.\n     *\n     * Note: This hook should be manually invoked when we change the `type` of a given AST\n     * node, to ensure that the optional properties are correctly filled.\n     * @param node The AST node finished by finishNode\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillOptionalPropertiesForTSESLint(node: NodeType) {}\n\n    cloneEstreeStringLiteral(node: N.EstreeLiteral): N.EstreeLiteral {\n      const { start, end, loc, range, raw, value } = node;\n      const cloned = Object.create(node.constructor.prototype);\n      cloned.type = \"Literal\";\n      cloned.start = start;\n      cloned.end = end;\n      cloned.loc = loc;\n      cloned.range = range;\n      cloned.raw = raw;\n      cloned.value = value;\n      return cloned;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      return this.castNodeTo(node, \"PrivateIdentifier\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ):\n      | N.EstreeProperty\n      | N.EstreeMethodDefinition\n      | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      delete funcNode.kind;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(funcNode, typeParameters);\n      }\n      const valueNode = this.castNodeTo(\n        funcNode as N.MethodLike,\n        process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"typescript\") &&\n          !funcNode.body\n          ? \"TSEmptyBodyFunctionExpression\"\n          : \"FunctionExpression\",\n      );\n      (\n        node as unknown as Undone<\n          | N.EstreeProperty\n          | N.EstreeMethodDefinition\n          | N.EstreeTSAbstractMethodDefinition\n        >\n      ).value = valueNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (process.env.BABEL_8_BREAKING && this.hasPlugin(\"typescript\")) {\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        if (node.abstract) {\n          // @ts-expect-error remove abstract from TSAbstractMethodDefinition\n          delete node.abstract;\n          return this.finishNode(\n            // @ts-expect-error cast methods to estree types\n            node as Undone<N.EstreeTSAbstractMethodDefinition>,\n            \"TSAbstractMethodDefinition\",\n          );\n        }\n      }\n      if (type === \"ObjectMethod\") {\n        if ((node as any as N.ObjectMethod).kind === \"method\") {\n          (node as any as N.EstreeProperty).kind = \"init\";\n        }\n        (node as any as N.EstreeProperty).shorthand = false;\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeProperty>,\n          \"Property\",\n        );\n      } else {\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeMethodDefinition>,\n          \"MethodDefinition\",\n        );\n      }\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        delete propertyNode.abstract;\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseClassAccessorProperty(\n      this: Parser,\n      node: N.ClassAccessorProperty,\n    ): any {\n      const accessorPropertyNode = super.parseClassAccessorProperty(node);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return accessorPropertyNode;\n        }\n      }\n      if (accessorPropertyNode.abstract && this.hasPlugin(\"typescript\")) {\n        delete accessorPropertyNode.abstract;\n        this.castNodeTo(accessorPropertyNode, \"TSAbstractAccessorProperty\");\n      } else {\n        this.castNodeTo(accessorPropertyNode, \"AccessorProperty\");\n      }\n      return accessorPropertyNode;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        this.castNodeTo(node, \"Property\");\n      }\n\n      return node as any;\n    }\n\n    finishObjectProperty(node: Undone<N.ObjectProperty>): N.ObjectProperty {\n      (node as unknown as Undone<N.EstreeProperty>).kind = \"init\";\n      return this.finishNode(\n        node as unknown as Undone<N.EstreeProperty>,\n        \"Property\",\n      ) as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        this.castNodeTo(node, \"ImportExpression\");\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        // compatibility with previous ESTree AST\n        // TODO(Babel 8): Remove this\n        (node as N.Node as N.EstreeImportExpression).attributes =\n          (node.arguments[1] as N.Expression) ?? null;\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      } else if (node.type === \"OptionalCallExpression\") {\n        this.castNodeTo(node, \"CallExpression\");\n      } else {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            this.castNodeTo(node, \"ExportAllDeclaration\");\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    stopParseSubscript(base: N.Expression, state: N.ParseSubscriptState) {\n      const node = super.stopParseSubscript(base, state);\n      if (state.optionalChainMember) {\n        return this.estreeParseChainExpression(node, base.loc.end);\n      }\n      return node;\n    }\n\n    parseMember(\n      base: N.Expression,\n      startLoc: Position,\n      state: N.ParseSubscriptState,\n      computed: boolean,\n      optional: boolean,\n    ) {\n      const node = super.parseMember(base, startLoc, state, computed, optional);\n      if (node.type === \"OptionalMemberExpression\") {\n        this.castNodeTo(node, \"MemberExpression\");\n      } else {\n        node.optional = false;\n      }\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    castNodeTo<T extends N.Node[\"type\"]>(\n      node: N.Node,\n      type: T,\n    ): Extract<N.Node, { type: T }> {\n      const result = super.castNodeTo(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      this.fillOptionalPropertiesForTSESLint(cloned);\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Literal\") {\n        return this.cloneEstreeStringLiteral(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    // Override for TS-ESLint that does not allow optional AST properties\n    finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n      const result = super.finishNode(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  // TODO: Remove this in Babel 8\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.default = false;\n            delete node.exportKind;\n            return this.castNodeTo(\n              node as N.ExportNamedDeclaration,\n              \"DeclareExportDeclaration\",\n            );\n          } else {\n            return this.castNodeTo(\n              node as N.ExportAllDeclaration,\n              \"DeclareExportAllDeclaration\",\n            );\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareTypeAlias\");\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareOpaqueType\");\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      if (this.reScan_lt() !== tt.lt) return;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = this.cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = this.cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n","import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport { OptionFlags, type Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.lookaheadCharCodeSince(this.state.pos);\n  }\n\n  lookaheadCharCodeSince(pos: number): number {\n    return this.input.charCodeAt(this.nextTokenStartSince(pos));\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      (next === charCodes.leftCurlyBrace ||\n        (next === charCodes.leftSquareBracket &&\n          this.hasPlugin(\"recordAndTuple\")))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n","import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\nimport type { Undone } from \"../parser/node.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M | V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Undone<Node>,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    if (this.optionFlags & OptionFlags.AllowYieldOutsideFunction) {\n      paramFlags |= ParamKind.PARAM_YIELD;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to null\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKeyLoc**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n *   It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type {\n  Comment,\n  Node as NodeType,\n  NodeBase,\n  EstreeLiteral,\n  Identifier,\n  Placeholder,\n  StringLiteral,\n} from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n\n  castNodeTo<T extends NodeType[\"type\"]>(\n    node: NodeType,\n    type: T,\n  ): Extract<NodeType, { type: T }> {\n    node.type = type;\n    return node as Extract<NodeType, { type: T }>;\n  }\n\n  cloneIdentifier<T extends Identifier | Placeholder>(node: T): T {\n    // We don't need to clone `typeAnnotations` and `optional`: because\n    // cloneIdentifier is only used in object shorthand and named import/export.\n    // Neither of them allow type annotations after the identifier or optional identifier\n    const { type, start, end, loc, range, name } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.name = name;\n    if (node.extra) cloned.extra = node.extra;\n    return cloned;\n  }\n\n  cloneStringLiteral<T extends StringLiteral | EstreeLiteral | Placeholder>(\n    node: T,\n  ): T {\n    const { type, start, end, loc, range, extra } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.extra = extra;\n    cloned.value = (node as StringLiteral).value;\n    return cloned;\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        this.castNodeTo(node, \"ObjectPattern\");\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        this.castNodeTo(node, \"ArrayPattern\");\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        this.castNodeTo(node, \"AssignmentPattern\");\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      this.castNodeTo(prop, \"RestElement\");\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement | null)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      this.toAssignableListItem(exprList, i, isLHS);\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  toAssignableListItem(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    index: number,\n    isLHS: boolean,\n  ): void {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      this.castNodeTo(node, \"RestElement\");\n      const arg = node.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n          if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(\n              Errors.UnsupportedParameterDecorator,\n              this.state.startLoc,\n            );\n          }\n          // invariant: hasPlugin(\"decorators-legacy\")\n          while (this.match(tt.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseBindingElement(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n      this.resetStartLocationFromNode(left, decorators[0]);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n","import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nfunction tsIsEntityName(\n  node: N.Expression,\n): node is N.MemberExpression | N.Identifier | N.TsInstantiationExpression {\n  if (node.extra?.parenthesized) {\n    return false;\n  }\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return !node.computed && tsIsEntityName(node.object);\n    case \"TSInstantiationExpression\":\n      return tsIsEntityName(node.expression);\n    default:\n      return false;\n  }\n}\n\nexport const enum tsParseEntityNameFlags {\n  NONE = 0b00,\n  ALLOW_RESERVED_WORDS = 0b01,\n  LEADING_THIS_AS_IDENTIFIER = 0b10,\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma)) {\n        node.options = this.tsParseImportTypeOptions();\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName(\n          tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n            tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n        );\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseImportTypeOptions(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      this.expect(tt.braceL);\n      const withProperty = this.startNode<N.ObjectProperty>();\n      if (this.isContextual(tt._with)) {\n        withProperty.method = false;\n        withProperty.key = this.parseIdentifier(true);\n        withProperty.computed = false;\n        withProperty.shorthand = false;\n      } else {\n        this.unexpected(null, tt._with);\n      }\n      this.expect(tt.colon);\n      withProperty.value = this.tsParseImportTypeWithPropertyValue();\n      node.properties = [this.finishObjectProperty(withProperty)];\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseImportTypeWithPropertyValue(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      const properties = [];\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        const type = this.state.type;\n        if (tokenIsIdentifier(type) || type === tt.string) {\n          properties.push(super.parsePropertyDefinition(null));\n        } else {\n          this.unexpected();\n        }\n        this.eat(tt.comma);\n      }\n      node.properties = properties;\n      this.next(); // eat }\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseEntityName(flags: tsParseEntityNameFlags): N.TsEntityName {\n      let entity: N.TsEntityName;\n      if (\n        flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS &&\n        this.match(tt._this)\n      ) {\n        if (flags & tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER) {\n          entity = this.parseIdentifier(true);\n        } else {\n          const node = this.startNode<N.ThisExpression>();\n          this.next();\n          entity = this.finishNode(node, \"ThisExpression\");\n        }\n      } else {\n        entity = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n      }\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName(\n        tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n      );\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n          );\n        } else {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n              tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n          );\n        }\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: Undone<N.TsPropertySignature | N.TsMethodSignature>,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method = node as Undone<N.TsMethodSignature>;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property = node as Undone<N.TsPropertySignature>;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n        // Allow < here so that we can recover from get key<T> later\n        if (!this.match(tt.parenL) && !this.match(tt.lt)) {\n          this.unexpected(null, tt.parenL);\n        }\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const restStartLoc = this.state.startLoc;\n\n      const rest = this.eat(tt.ellipsis);\n      const { startLoc } = this.state;\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAt<N.TsOptionalType>(startLoc);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(restStartLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsTemplateLiteralType | N.TsLiteralType {\n      if (process.env.BABEL_8_BREAKING) {\n        const startLoc = this.state.startLoc;\n        let curElt = this.parseTemplateElement(false);\n        const quasis = [curElt];\n        if (curElt.tail) {\n          const node = this.startNodeAt<N.TsLiteralType>(startLoc);\n          const literal = this.startNodeAt<N.TemplateLiteral>(startLoc);\n          literal.expressions = [];\n          literal.quasis = quasis;\n          node.literal = this.finishNode(literal, \"TemplateLiteral\");\n          return this.finishNode(node, \"TSLiteralType\");\n        } else {\n          const substitutions: N.TsType[] = [];\n          while (!curElt.tail) {\n            substitutions.push(this.tsParseType());\n            this.readTemplateContinuation();\n            quasis.push((curElt = this.parseTemplateElement(false)));\n          }\n          const node = this.startNodeAt<N.TsTemplateLiteralType>(startLoc);\n          node.types = substitutions;\n          node.quasis = quasis;\n          return this.finishNode(node, \"TSTemplateLiteralType\");\n        }\n      } else {\n        const node = this.startNode<N.TsLiteralType>();\n        node.literal = super.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      const { startLoc } = this.state;\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAt<N.TsArrayType>(startLoc);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAt<N.TsIndexedAccessType>(startLoc);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          if (process.env.BABEL_8_BREAKING) {\n            const expression = super.parseExprSubscripts();\n            if (!tsIsEntityName(expression)) {\n              this.raise(\n                TSErrors.InvalidHeritageClauseType,\n                expression.loc.start,\n                { token },\n              );\n            }\n            const nodeType =\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\";\n            if (expression.type === \"TSInstantiationExpression\") {\n              // @ts-expect-error cast TSInstantiationExpression to TSInterfaceHeritage/TSClassImplements\n              expression.type = nodeType;\n              return expression;\n            }\n            const node = this.startNodeAtNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >(expression);\n            node.expression = expression;\n            // The last element can not form a TSInstantiationExpression because of the bail condition in\n            // `parseSubscript`, in this case we have to parse type arguments again\n            if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n              node.typeArguments = this.tsParseTypeArgumentsInExpression();\n            }\n            return this.finishNode(node, nodeType);\n          } else {\n            const node = this.startNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >();\n            // @ts-expect-error Babel 7 vs Babel 8\n            node.expression = this.tsParseEntityName(\n              tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n                tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n            );\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName(tsParseEntityNameFlags.ALLOW_RESERVED_WORDS)\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      if (!process.env.BABEL_8_BREAKING) {\n        node.isExport = isExport || false;\n      }\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(tsParseEntityNameFlags.NONE);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any) {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany as Undone<N.ClassDeclaration>,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            if (!process.env.BABEL_8_BREAKING) {\n              node.global = true;\n            }\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ) {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseBindingElement(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include decorators/modifiers in range\n      const startLoc = decorators.length\n        ? decorators[0].loc.start\n        : this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(tt.parenR);\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (result.type === \"TSInstantiationExpression\") {\n            if (\n              this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis)\n            ) {\n              this.raise(\n                TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n                this.state.startLoc,\n              );\n            }\n            if (!this.match(tt.dot) && !this.match(tt.questionDot)) {\n              // If TSInstantiationExpression is not followed by . / ?.,\n              // it must be the end of a subscript chain. Note that `(` already forms\n              // call expression arguments\n              result.expression = super.stopParseSubscript(base, state);\n            }\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        const nodeImportEquals = process.env.BABEL_8_BREAKING\n          ? this.startNode<N.TsImportEqualsDeclaration>()\n          : (node as Undone<N.TsImportEqualsDeclaration>);\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        const declaration = this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n        if (process.env.BABEL_8_BREAKING) {\n          (node as Undone<N.ExportNamedDeclaration>).attributes = [];\n          (node as Undone<N.ExportNamedDeclaration>).declaration = declaration;\n          (node as Undone<N.ExportNamedDeclaration>).exportKind = \"value\";\n          (node as Undone<N.ExportNamedDeclaration>).source = null;\n          (node as Undone<N.ExportNamedDeclaration>).specifiers = [];\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        } else {\n          return declaration;\n        }\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        (node as unknown as N.EstreeMethodDefinition).value.body == null\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableListItem(\n      exprList: (N.Expression | N.SpreadElement | N.RestElement)[],\n      index: number,\n      isLHS: boolean,\n    ): void {\n      const node = exprList[index];\n      if (node.type === \"TSTypeCastExpression\") {\n        exprList[index] = this.typeCastToParameter(node);\n      }\n      super.toAssignableListItem(exprList, index, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract || method.type === \"TSAbstractMethodDefinition\") {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = this.cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n\n    /**\n     * This hook is defined in the ESTree plugin.\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     *\n     * @param node The AST node finished by finishNode\n     * @returns\n     */\n    fillOptionalPropertiesForTSESLint(node: N.Node): void {\n      switch (node.type) {\n        case \"ExpressionStatement\":\n          node.directive ??= undefined;\n          return;\n        case \"RestElement\":\n          node.value = undefined;\n        /* fallthrough */\n        case \"Identifier\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"ObjectPattern\":\n          node.decorators ??= [];\n          node.optional ??= false;\n          node.typeAnnotation ??= undefined;\n          return;\n        case \"TSParameterProperty\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSEmptyBodyFunctionExpression\":\n          node.body = null;\n        /* fallthrough */\n        case \"TSDeclareFunction\":\n        case \"FunctionDeclaration\":\n        case \"FunctionExpression\":\n        case \"ClassMethod\":\n        case \"ClassPrivateMethod\":\n          node.declare ??= false;\n          node.returnType ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"Property\":\n          node.optional ??= false;\n          return;\n        case \"TSMethodSignature\":\n        case \"TSPropertySignature\":\n          node.optional ??= false;\n        /* fallthrough */\n        case \"TSIndexSignature\":\n          node.accessibility ??= undefined;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSAbstractPropertyDefinition\":\n        case \"PropertyDefinition\":\n        case \"TSAbstractAccessorProperty\":\n        case \"AccessorProperty\":\n          node.declare ??= false;\n          node.definite ??= false;\n          node.readonly ??= false;\n          node.typeAnnotation ??= undefined;\n        /* fallthrough */\n        case \"TSAbstractMethodDefinition\":\n        case \"MethodDefinition\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.optional ??= false;\n          return;\n        case \"ClassExpression\":\n          node.id ??= null;\n        /* fallthrough */\n        case \"ClassDeclaration\":\n          node.abstract ??= false;\n          node.declare ??= false;\n          node.decorators ??= [];\n          node.implements ??= [];\n          node.superTypeArguments ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"TSTypeAliasDeclaration\":\n        case \"VariableDeclaration\":\n          node.declare ??= false;\n          return;\n        case \"VariableDeclarator\":\n          node.definite ??= false;\n          return;\n        case \"TSEnumDeclaration\":\n          node.const ??= false;\n          node.declare ??= false;\n          return;\n        case \"TSEnumMember\":\n          node.computed ??= false;\n          return;\n        case \"TSImportType\":\n          node.qualifier ??= null;\n          node.options ??= null;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments ??= null;\n          }\n          return;\n        case \"TSInterfaceDeclaration\":\n          node.declare ??= false;\n          node.extends ??= [];\n          return;\n        case \"TSModuleDeclaration\":\n          node.declare ??= false;\n          node.global ??= node.kind === \"global\";\n          return;\n        case \"TSTypeParameter\":\n          node.const ??= false;\n          node.in ??= false;\n          node.out ??= false;\n          return;\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.ts                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.ts                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      if (cloned.type === \"Placeholder\") {\n        cloned.expectedNode = (node as N.Placeholder).expectedNode;\n      }\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Placeholder\") {\n        return this.cloneIdentifier(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    /* ============================================================ *\n     * parser/lval.ts                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.ts                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n","import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          this.castNodeTo(identifier, \"V8IntrinsicIdentifier\");\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (\n          topicToken === \"#\" &&\n          pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n        ) {\n          throw new Error(\n            `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n          );\n        }\n      }\n    } else if (\n      !process.env.BABEL_8_BREAKING &&\n      proposal === \"smart\" &&\n      pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n    ) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'recordAndTuple' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    } else {\n      const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n      if (syntaxType != null) {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    sawProto: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): boolean {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return sawProto;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      return true;\n    }\n\n    return sawProto;\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(refExpressionErrors: ExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(tt._yield);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (isYield) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          op === tt.pipeline &&\n          // @ts-expect-error: Only in Babel 7\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          // @ts-expect-error: Babel 7 only\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n        ) {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(\n              this.parseExprOpBaseRightExpr(op, prec),\n              startLoc,\n            );\n          });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          return this.stopParseSubscript(base, state);\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        return this.stopParseSubscript(base, state);\n      }\n    }\n  }\n\n  stopParseSubscript(\n    this: Parser,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n  ) {\n    state.stop = true;\n    return base;\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as Undone<N.OptionalMemberExpression>).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      (node as Undone<N.OptionalCallExpression>).optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING) {\n          if (type === tt.decimal) {\n            return this.parseDecimalLiteral(this.state.value);\n          } else if (type === tt.bracketBarL || type === tt.bracketHashL) {\n            return this.parseArrayLike(\n              this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n              /* canBePattern */ false,\n              /* isTuple */ true,\n            );\n          } else if (type === tt.braceBarL || type === tt.braceHashL) {\n            return this.parseObjectLike(\n              this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n              /* isPattern */ false,\n              /* isRecord */ true,\n            );\n          }\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      if (process.env.BABEL_8_BREAKING || pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n\n        // Register the topic reference so that its pipe body knows\n        // that its topic was used at least once.\n        this.registerTopicReference();\n\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        // pipeProposal is \"smart\"\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\"(Babel 7) or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!(this.optionFlags & OptionFlags.CreateImportExpressions)) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !(this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction)\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(\n          prop,\n          isRecord,\n          sawProto,\n          refExpressionErrors,\n        );\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishObjectProperty(prop);\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = this.cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishObjectProperty(prop);\n    }\n  }\n\n  finishObjectProperty(node: Undone<N.ObjectProperty>) {\n    return this.finishNode(node, \"ObjectProperty\");\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.optionFlags & OptionFlags.AllowAwaitOutsideFunction &&\n        !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousPrefixOrIdentifier(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser, startLoc: Position): N.YieldExpression {\n    const node = this.startNodeAt<N.YieldExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      node,\n    );\n\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n\n        if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n          // keep consuming arguments, to then throw ImportCallArity\n          // instead of \"expected )\"\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // TODO(Babel 8): Remove this method\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      // @ts-expect-error Babel 7 only\n      this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])\n    ) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\"(Babel 7), \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.ExpressionStatement): N.Directive {\n    const directive = this.castNodeTo(stmt, \"Directive\");\n\n    const directiveLiteral = this.castNodeTo(\n      stmt.expression,\n      \"DirectiveLiteral\",\n    );\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directive.value = directiveLiteral;\n    delete stmt.expression;\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  allowsForUsing(): boolean {\n    const { type, containsEsc, end } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `for( using of` must start either a for-lhs-of statement\n      // or a for lexical declaration\n      const nextCharAfterOf = this.lookaheadCharCodeSince(end);\n      if (\n        nextCharAfterOf !== charCodes.equalsTo &&\n        nextCharAfterOf !== charCodes.colon &&\n        // recover from `for(using of;...);`\n        nextCharAfterOf !== charCodes.semicolon\n      ) {\n        return false;\n      }\n    }\n    if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n    return false;\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportNamedDeclaration\n            >,\n            decorators,\n          );\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.allowsForUsing());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (\n      !this.prodParam.hasReturn &&\n      !(this.optionFlags & OptionFlags.AllowReturnOutsideFunction)\n    ) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      this.sawUnambiguousESM = true;\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = this.cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = this.cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = this.cloneIdentifier(imported as N.Identifier);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (options.allowYieldOutsideFunction) {\n      optionFlags |= OptionFlags.AllowYieldOutsideFunction;\n    }\n    if (options.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (options.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (options.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (options.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n","import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nexport type {\n  PluginConfig as ParserPlugin,\n  DecoratorsPluginOptions,\n  FlowPluginOptions,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n  TypeScriptPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\n// TODO: Rather than type-casting the internal AST definitions to the\n// @babel/types one, we should actually unify them.\nimport type { Expression, File } from \"@babel/types\";\nexport type { Expression, File };\n\nexport type ParserOptions = Partial<Options>;\n\nexport interface ParseError {\n  code: string;\n  reasonCode: string;\n}\nexport type ParseResult<Result extends File | Expression = File> = Result & {\n  errors: null | ParseError[];\n};\n\n/**\n * Parse the provided code as an entire ECMAScript program.\n */\nexport function parse(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<File> {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast as unknown as ParseResult<File>;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(\n            options,\n            input,\n          ).parse() as unknown as ParseResult<File>;\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast as unknown as ParseResult<File>;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(\n          options,\n          input,\n        ).parse() as unknown as ParseResult<File>;\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse() as unknown as ParseResult<File>;\n  }\n}\n\nexport function parseExpression(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<Expression> {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression() as unknown as ParseResult<Expression>;\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n"],"mappings":"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AAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}